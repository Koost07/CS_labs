#
# This script is Copyright (C) 2004-2021 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.0 $
# $Date: 2021/08/05 $
#
# Description : This document implements the security configuration as recommended by the
#               CIS Google Kubernetes Engine (GKE) Benchmark
#
#<ui_metadata>
#<display_name>CIS Google Kubernetes Engine (GKE) v1.1.0 L1 Worker</display_name>
#<spec>
#  <type>CIS</type>
#  <name>Google Kubernetes Engine (GKE) v1.1.0 L1 Worker</name>
#  <version>1.1.0</version>
#  <link>https://workbench.cisecurity.org/files/2764</link>
#</spec>
#<labels>gke,kubernetes</labels>
#<benchmark_refs>LEVEL,CSCv6,CSCv7,CIS_Recommendation</benchmark_refs>
#<variables>
#  <variable>
#    <name>KUBECONFIG</name>
#    <default>/var/lib/kube-proxy/kubeconfig</default>
#    <description>Kubeconfig file path</description>
#    <info>The location of the kubeconfig configuration file</info>
#  </variable>
#  <variable>
#    <name>KUBELET_CONFIG</name>
#    <default>/home/kubernetes/kubelet-config.yaml</default>
#    <description>Kubelet config file path</description>
#    <info>The location of the kubelet-config.yaml configuration file</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<custom_item>
  system      : "Linux"
  type        : FILE_CHECK
  description : "3.1.1 Ensure that the proxy kubeconfig file permissions are set to 644 or more restrictive"
  info        : "If kube-proxy is running, and if it is using a file-based kubeconfig file, ensure that the proxy kubeconfig file has permissions of 644 or more restrictive.

Rationale:

The kube-proxy kubeconfig file controls various parameters of the kube-proxy service in the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.

It is possible to run kube-proxy with the kubeconfig parameters configured as a Kubernetes ConfigMap instead of a file. In this case, there is no proxy kubeconfig file."
  solution    : "Run the below command (based on the file location on your system) on the each worker
node. For example,

chmod 644 <proxy kubeconfig file>

Impact:

None.

Default Value:

See the GKE documentation for the default value."
  reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|3.1.1,CN-L3|8.1.10.6(d),CSCv6|3.1,CSCv6|5.1,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBECONFIG@ replaced with "/var/lib/kube-proxy/kubeconfig" in field "file".
  file        : "/var/lib/kube-proxy/kubeconfig"
  mask        : "133"
</custom_item>

<custom_item>
  system      : "Linux"
  type        : FILE_CHECK
  description : "3.1.2 Ensure that the proxy kubeconfig file ownership is set to root:root"
  info        : "If kube-proxy is running, ensure that the file ownership of its kubeconfig file is set to root:root.

Rationale:

The kubeconfig file for kube-proxy controls various parameters for the kube-proxy service in the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root."
  solution    : "Run the below command (based on the file location on your system) on the each worker node. For example,

chown root:root <proxy kubeconfig file>

Impact:

None

Default Value:

See the GKE documentation for the default value."
  reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|3.1.2,CN-L3|8.1.10.6(d),CSCv6|3.1,CSCv6|5.1,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBECONFIG@ replaced with "/var/lib/kube-proxy/kubeconfig" in field "file".
  file        : "/var/lib/kube-proxy/kubeconfig"
  owner       : "root"
  group       : "root"
</custom_item>

<custom_item>
  system      : "Linux"
  type        : FILE_CHECK
  description : "3.1.3 Ensure that the kubelet configuration file has permissions set to 644 or more restrictive"
  info        : "Ensure that if the kubelet refers to a configuration file with the --config argument, that file has permissions of 644 or more restrictive.

Rationale:

The kubelet reads various parameters, including security settings, from a config file specified by the --config argument. If this file is specified you should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system."
  solution    : "Run the following command (using the config file location identied in the Audit step)

chmod 644 /var/lib/kubelet/config.yaml

Impact:

None.

Default Value:

See the GKE documentation for the default value."
  reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|3.1.3,CN-L3|8.1.10.6(d),CSCv6|3.1,CSCv6|5.1,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "file".
  file        : "/home/kubernetes/kubelet-config.yaml"
  mask        : "133"
</custom_item>

<custom_item>
  system      : "Linux"
  type        : FILE_CHECK
  description : "3.1.4 Ensure that the kubelet configuration file ownership is set to root:root"
  info        : "Ensure that if the kubelet refers to a configuration file with the --config argument, that file is owned by root:root.

Rationale:

The kubelet reads various parameters, including security settings, from a config file specified by the --config argument. If this file is specified you should restrict its file permissions to maintain the integrity of the file. The file should be owned by root:root."
  solution    : "Run the following command (using the config file location identied in the Audit step)

chown root:root /etc/kubernetes/kubelet.conf

Impact:

None.

Default Value:

See the GKE documentation for the default value."
  reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|3.1.4,CN-L3|8.1.10.6(d),CSCv6|3.1,CSCv6|5.1,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "file".
  file        : "/home/kubernetes/kubelet-config.yaml"
  owner       : "root"
  group       : "root"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "3.2.1 Ensure that the --anonymous-auth argument is set to false"
      cmd         : "ps -ef | grep kubelet | grep -v grep"
      expect      : "--anonymous-auth="
    </custom_item>
  </condition>

  <then>
    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "3.2.1 Ensure that the --anonymous-auth argument is set to false"
      info          : "Disable anonymous requests to the Kubelet server.

Rationale:

When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the Kubelet server. You should rely on authentication to authorize access and disallow anonymous requests."
      solution      : "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to false.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--anonymous-auth=false

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Anonymous requests will be rejected.

Default Value:

See the GKE documentation for the default value."
      reference     : "800-171|3.5.1,800-53|IA-2,CIS_Recommendation|3.2.1,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|14,CSCv7|14,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also      : "https://workbench.cisecurity.org/files/2764"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--anonymous-auth=false"
      dont_echo_cmd : YES
    </custom_item>
  </then>

  <else>
    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check if Kubelet config file is used"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "expect".
          expect      : "--config[\\s]+/home/kubernetes/kubelet-config.yaml([\\s]|$)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "3.2.1 Ensure that the --anonymous-auth argument is set to false"
          info        : "Disable anonymous requests to the Kubelet server.

Rationale:

When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the Kubelet server. You should rely on authentication to authorize access and disallow anonymous requests."
          solution    : "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to false.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--anonymous-auth=false

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Anonymous requests will be rejected.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.5.1,800-53|IA-2.,CIS_Recommendation|3.2.1,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|14,CSCv7|14,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
          see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "cmd".
          cmd         : "sed 's/\\(\\s*\\)\\(.*:\\)\\s*\\(.*\\)/\\1\\|\\2\\|\\3/g' '/home/kubernetes/kubelet-config.yaml' | awk -F'|' '{ indent = length($1)/2; vname[indent] = $2; for (i in vname) {if (i > indent) {delete vname[i]}} if (length($3) > 0) { vn=none; for (i=0; i<=indent; i++) {vn=(vn)(vname[i])} { print vn $3 } } }'"
          expect      : "^authentication:anonymous:enabled:false$"
        </custom_item>
      </then>

      <else>
        <report type:"FAILED">
          description : "3.2.1 Ensure that the --anonymous-auth argument is set to false"
          info        : "Disable anonymous requests to the Kubelet server.

Rationale:

When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the Kubelet server. You should rely on authentication to authorize access and disallow anonymous requests."
          solution    : "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to false.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--anonymous-auth=false

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Anonymous requests will be rejected.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.5.1,800-53|IA-2.,CIS_Recommendation|3.2.1,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|14,CSCv7|14,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
          see_also    : "https://workbench.cisecurity.org/files/2764"
        </report>
      </else>
    </if>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "3.2.2 Ensure that the --authorization-mode argument is not set to AlwaysAllow"
      cmd         : "ps -ef | grep kubelet | grep -v grep"
      expect      : "--authorization-mode="
    </custom_item>
  </condition>

  <then>
    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "3.2.2 Ensure that the --authorization-mode argument is not set to AlwaysAllow"
      info          : "Do not allow all requests. Enable explicit authorization.

Rationale:

Kubelets, by default, allow all authenticated requests (even anonymous ones) without needing explicit authorization checks from the apiserver. You should restrict this behavior and only allow explicitly authorized requests."
      solution      : "If using a Kubelet config file, edit the file to set authorization: mode to Webhook.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable.

--authorization-mode=Webhook

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Unauthorized requests will be denied.

Default Value:

See the GKE documentation for the default value."
      reference     : "800-171|3.1.5,800-53|AC-6,CIS_Recommendation|3.2.2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSCv7|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also      : "https://workbench.cisecurity.org/files/2764"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--authorization-mode=((?!AlwaysAllow).)*([\\s]|$)"
      dont_echo_cmd : YES
    </custom_item>
  </then>

  <else>
    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check if Kubelet config file is used"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "expect".
          expect      : "--config[\\s]+/home/kubernetes/kubelet-config.yaml([\\s]|$)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK_NOT
          description : "3.2.2 Ensure that the --authorization-mode argument is not set to AlwaysAllow"
          info        : "Do not allow all requests. Enable explicit authorization.

Rationale:

Kubelets, by default, allow all authenticated requests (even anonymous ones) without needing explicit authorization checks from the apiserver. You should restrict this behavior and only allow explicitly authorized requests."
          solution    : "If using a Kubelet config file, edit the file to set authorization: mode to Webhook.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable.

--authorization-mode=Webhook

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Unauthorized requests will be denied.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.1.5,800-53|AC-6.,CIS_Recommendation|3.2.2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSCv7|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "file".
          file        : "/home/kubernetes/kubelet-config.yaml"
          regex       : "^[\\s]*mode[\\s]*:"
          expect      : "^[\\s]*mode[\\s]*:.*AlwaysAllow"
        </custom_item>
      </then>

      <else>
        <report type:"FAILED">
          description : "3.2.2 Ensure that the --authorization-mode argument is not set to AlwaysAllow"
          info        : "Do not allow all requests. Enable explicit authorization.

Rationale:

Kubelets, by default, allow all authenticated requests (even anonymous ones) without needing explicit authorization checks from the apiserver. You should restrict this behavior and only allow explicitly authorized requests."
          solution    : "If using a Kubelet config file, edit the file to set authorization: mode to Webhook.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable.

--authorization-mode=Webhook

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Unauthorized requests will be denied.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.1.5,800-53|AC-6.,CIS_Recommendation|3.2.2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSCv7|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also    : "https://workbench.cisecurity.org/files/2764"
        </report>
      </else>
    </if>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "3.2.3 Ensure that the --client-ca-file argument is set as appropriate"
      cmd         : "ps -ef | grep kubelet | grep -v grep"
      expect      : "--client-ca-file="
    </custom_item>
  </condition>

  <then>
    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "3.2.3 Ensure that the --client-ca-file argument is set as appropriate"
      info          : "Enable Kubelet authentication using certificates.

Rationale:

The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks. Enabling Kubelet certificate authentication ensures that the apiserver could authenticate the Kubelet before submitting any requests."
      solution      : "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to the location of the client CA file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable.

--client-ca-file=<path/to/client-ca-file>

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

You require TLS to be configured on apiserver as well as kubelets.

Default Value:

See the GKE documentation for the default value."
      reference     : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|3.2.3,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
      see_also      : "https://workbench.cisecurity.org/files/2764"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--client-ca-file=.+"
      dont_echo_cmd : YES
    </custom_item>
  </then>

  <else>
    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check if Kubelet config file is used"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "expect".
          expect      : "--config[\\s]+/home/kubernetes/kubelet-config.yaml([\\s]|$)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "3.2.3 Ensure that the --client-ca-file argument is set as appropriate"
          info        : "Enable Kubelet authentication using certificates.

Rationale:

The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks. Enabling Kubelet certificate authentication ensures that the apiserver could authenticate the Kubelet before submitting any requests."
          solution    : "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to the location of the client CA file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable.

--client-ca-file=<path/to/client-ca-file>

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

You require TLS to be configured on apiserver as well as kubelets.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|3.2.3,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
          see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "file".
          file        : "/home/kubernetes/kubelet-config.yaml"
          regex       : "^[\\s]*clientCAFile[\\s]*:"
          expect      : "^[\\s]*clientCAFile[\\s]*:.+"
        </custom_item>
      </then>

      <else>
        <report type:"FAILED">
          description : "3.2.3 Ensure that the --client-ca-file argument is set as appropriate"
          info        : "Enable Kubelet authentication using certificates.

Rationale:

The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks. Enabling Kubelet certificate authentication ensures that the apiserver could authenticate the Kubelet before submitting any requests."
          solution    : "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to the location of the client CA file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable.

--client-ca-file=<path/to/client-ca-file>

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

You require TLS to be configured on apiserver as well as kubelets.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|3.2.3,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
          see_also    : "https://workbench.cisecurity.org/files/2764"
        </report>
      </else>
    </if>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "3.2.4 Ensure that the --read-only-port argument is set to 0"
      cmd         : "ps -ef | grep kubelet | grep -v grep"
      expect      : "--read-only-port="
    </custom_item>
  </condition>

  <then>
    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "3.2.4 Ensure that the --read-only-port argument is set to 0"
      info          : "Disable the read-only port.

Rationale:

The Kubelet process provides a read-only API in addition to the main Kubelet API. Unauthenticated access is provided to this read-only API which could possibly retrieve potentially sensitive information about the cluster."
      solution      : "If using a Kubelet config file, edit the file to set readOnlyPort to 0.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--read-only-port=0

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Removal of the read-only port will require that any service which made use of it will need to be re-configured to use the main Kubelet API.

Default Value:

See the GKE documentation for the default value."
      reference     : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|3.2.4,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSCv7|9.2,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
      see_also      : "https://workbench.cisecurity.org/files/2764"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--read-only-port=0([\\s]|$)"
      dont_echo_cmd : YES
    </custom_item>
  </then>

  <else>
    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check if Kubelet config file is used"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "expect".
          expect      : "--config[\\s]+/home/kubernetes/kubelet-config.yaml([\\s]|$)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "3.2.4 Ensure that the --read-only-port argument is set to 0"
          info        : "Disable the read-only port.

Rationale:

The Kubelet process provides a read-only API in addition to the main Kubelet API. Unauthenticated access is provided to this read-only API which could possibly retrieve potentially sensitive information about the cluster."
          solution    : "If using a Kubelet config file, edit the file to set readOnlyPort to 0.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--read-only-port=0

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Removal of the read-only port will require that any service which made use of it will need to be re-configured to use the main Kubelet API.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|3.2.4,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSCv7|9.2,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "file".
          file        : "/home/kubernetes/kubelet-config.yaml"
          regex       : "^[\\s]*readOnlyPort[\\s]*:"
          expect      : "^[\\s]*readOnlyPort[\\s]*:[\\s]*0"
        </custom_item>
      </then>

      <else>
        <report type:"FAILED">
          description : "3.2.4 Ensure that the --read-only-port argument is set to 0"
          info        : "Disable the read-only port.

Rationale:

The Kubelet process provides a read-only API in addition to the main Kubelet API. Unauthenticated access is provided to this read-only API which could possibly retrieve potentially sensitive information about the cluster."
          solution    : "If using a Kubelet config file, edit the file to set readOnlyPort to 0.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--read-only-port=0

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Removal of the read-only port will require that any service which made use of it will need to be re-configured to use the main Kubelet API.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|3.2.4,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSCv7|9.2,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/2764"
        </report>
      </else>
    </if>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "3.2.5 Ensure that the --streaming-connection-idle-timeout argument is not set to 0"
      cmd         : "ps -ef | grep kubelet | grep -v grep"
      expect      : "--streaming-connection-idle-timeout="
    </custom_item>
  </condition>

  <then>
    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "3.2.5 Ensure that the --streaming-connection-idle-timeout argument is not set to 0"
      info          : "Do not disable timeouts on streaming connections.

Rationale:

Setting idle timeouts ensures that you are protected against Denial-of-Service attacks, inactive connections and running out of ephemeral ports.

Note: By default, --streaming-connection-idle-timeout is set to 4 hours which might be too high for your environment. Setting this as appropriate would additionally ensure that such streaming connections are timed out after serving legitimate use cases."
      solution      : "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a value other than 0.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--streaming-connection-idle-timeout=5m

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Long-lived connections could be interrupted.

Default Value:

See the GKE documentation for the default value."
      reference     : "800-53|SC-5.,CIS_Recommendation|3.2.5,CSCv6|9,CSCv7|9,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,ITSG-33|SC-5a.,LEVEL|1S,NESA|T3.3.1,NIAv2|GS8e,NIAv2|GS10c,QCSC-v1|8.2.1"
      see_also      : "https://workbench.cisecurity.org/files/2764"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--streaming-connection-idle-timeout=[^0]"
      dont_echo_cmd : YES
    </custom_item>
  </then>

  <else>
    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check if Kubelet config file is used"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "expect".
          expect      : "--config[\\s]+/home/kubernetes/kubelet-config.yaml([\\s]|$)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK_NOT
          description : "3.2.5 Ensure that the --streaming-connection-idle-timeout argument is not set to 0"
          info        : "Do not disable timeouts on streaming connections.

Rationale:

Setting idle timeouts ensures that you are protected against Denial-of-Service attacks, inactive connections and running out of ephemeral ports.

Note: By default, --streaming-connection-idle-timeout is set to 4 hours which might be too high for your environment. Setting this as appropriate would additionally ensure that such streaming connections are timed out after serving legitimate use cases."
          solution    : "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a value other than 0.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--streaming-connection-idle-timeout=5m

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Long-lived connections could be interrupted.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-53|SC-5.,CIS_Recommendation|3.2.5,CSCv6|9,CSCv7|9,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,ITSG-33|SC-5a.,LEVEL|1S,NESA|T3.3.1,NIAv2|GS8e,NIAv2|GS10c,QCSC-v1|8.2.1"
          see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "file".
          file        : "/home/kubernetes/kubelet-config.yaml"
          regex       : "^[\\s]*streamingConnectionIdleTimeout[\\s]*:"
          expect      : "^[\\s]*streamingConnectionIdleTimeout[\\s]*:[\\s]*0"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "3.2.5 Ensure that the --streaming-connection-idle-timeout argument is not set to 0"
          info        : "Do not disable timeouts on streaming connections.

Rationale:

Setting idle timeouts ensures that you are protected against Denial-of-Service attacks, inactive connections and running out of ephemeral ports.

Note: By default, --streaming-connection-idle-timeout is set to 4 hours which might be too high for your environment. Setting this as appropriate would additionally ensure that such streaming connections are timed out after serving legitimate use cases."
          solution    : "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a value other than 0.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--streaming-connection-idle-timeout=5m

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Long-lived connections could be interrupted.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-53|SC-5.,CIS_Recommendation|3.2.5,CSCv6|9,CSCv7|9,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,ITSG-33|SC-5a.,LEVEL|1S,NESA|T3.3.1,NIAv2|GS8e,NIAv2|GS10c,QCSC-v1|8.2.1"
          see_also    : "https://workbench.cisecurity.org/files/2764"
        </report>
      </else>
    </if>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "3.2.6 Ensure that the --protect-kernel-defaults argument is set to true"
      cmd         : "ps -ef | grep kubelet | grep -v grep"
      expect      : "--protect-kernel-defaults="
    </custom_item>
  </condition>

  <then>
    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "3.2.6 Ensure that the --protect-kernel-defaults argument is set to true"
      info          : "Protect tuned kernel parameters from overriding kubelet default kernel parameter values.

Rationale:

Kernel parameters are usually tuned and hardened by the system administrators before putting the systems into production. These parameters protect the kernel and the system. Your kubelet kernel defaults that rely on such parameters should be appropriately set to match the desired secured system state. Ignoring this could potentially lead to running pods with undesired kernel behavior."
      solution      : "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--protect-kernel-defaults=true

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

You would have to re-tune kernel parameters to match kubelet parameters.

Default Value:

See the GKE documentation for the default value."
      reference     : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|3.2.6,CN-L3|8.1.10.6(d),CSCv6|3,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also      : "https://workbench.cisecurity.org/files/2764"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--protect-kernel-defaults=true"
      dont_echo_cmd : YES
    </custom_item>
  </then>

  <else>
    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check if Kubelet config file is used"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "expect".
          expect      : "--config[\\s]+/home/kubernetes/kubelet-config.yaml([\\s]|$)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "3.2.6 Ensure that the --protect-kernel-defaults argument is set to true"
          info        : "Protect tuned kernel parameters from overriding kubelet default kernel parameter values.

Rationale:

Kernel parameters are usually tuned and hardened by the system administrators before putting the systems into production. These parameters protect the kernel and the system. Your kubelet kernel defaults that rely on such parameters should be appropriately set to match the desired secured system state. Ignoring this could potentially lead to running pods with undesired kernel behavior."
          solution    : "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--protect-kernel-defaults=true

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

You would have to re-tune kernel parameters to match kubelet parameters.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|3.2.6,CN-L3|8.1.10.6(d),CSCv6|3,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "file".
          file        : "/home/kubernetes/kubelet-config.yaml"
          regex       : "^[\\s]*protectKernelDefaults[\\s]*:"
          expect      : "^[\\s]*protectKernelDefaults[\\s]*:[\\s]*true"
        </custom_item>
      </then>

      <else>
        <report type:"FAILED">
          description : "3.2.6 Ensure that the --protect-kernel-defaults argument is set to true"
          info        : "Protect tuned kernel parameters from overriding kubelet default kernel parameter values.

Rationale:

Kernel parameters are usually tuned and hardened by the system administrators before putting the systems into production. These parameters protect the kernel and the system. Your kubelet kernel defaults that rely on such parameters should be appropriately set to match the desired secured system state. Ignoring this could potentially lead to running pods with undesired kernel behavior."
          solution    : "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--protect-kernel-defaults=true

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

You would have to re-tune kernel parameters to match kubelet parameters.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|3.2.6,CN-L3|8.1.10.6(d),CSCv6|3,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/2764"
        </report>
      </else>
    </if>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "3.2.7 Ensure that the --make-iptables-util-chains argument is set to true"
      cmd         : "ps -ef | grep kubelet | grep -v grep"
      expect      : "--make-iptables-util-chains="
    </custom_item>
  </condition>

  <then>
    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "3.2.7 Ensure that the --make-iptables-util-chains argument is set to true"
      info          : "Allow Kubelet to manage iptables.

Rationale:

Kubelets can automatically manage the required changes to iptables based on how you choose your networking options for the pods. It is recommended to let kubelets manage the changes to iptables. This ensures that the iptables configuration remains in sync with pods networking configuration. Manually configuring iptables with dynamic pod network configuration changes might hamper the communication between pods/containers and to the outside world. You might have iptables rules too restrictive or too open."
      solution      : "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove the --make-iptables-util-chains argument from the KUBELET_SYSTEM_PODS_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Kubelet would manage the iptables on the system and keep it in sync. If you are using any other iptables management solution, then there might be some conflicts.

Default Value:

See the GKE documentation for the default value."
      reference     : "800-171|3.13.1,800-171|3.13.6,800-53|SC-7(5),CIS_Recommendation|3.2.7,CN-L3|7.1.2.2(c),CSCv6|9,CSCv7|9,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(5),LEVEL|1S,NESA|T4.5.4,NIAv2|GS7b,NIAv2|NS25,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
      see_also      : "https://workbench.cisecurity.org/files/2764"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--make-iptables-util-chains=true"
      dont_echo_cmd : YES
    </custom_item>
  </then>

  <else>
    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check if Kubelet config file is used"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "expect".
          expect      : "--config[\\s]+/home/kubernetes/kubelet-config.yaml([\\s]|$)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "3.2.7 Ensure that the --make-iptables-util-chains argument is set to true"
          info        : "Allow Kubelet to manage iptables.

Rationale:

Kubelets can automatically manage the required changes to iptables based on how you choose your networking options for the pods. It is recommended to let kubelets manage the changes to iptables. This ensures that the iptables configuration remains in sync with pods networking configuration. Manually configuring iptables with dynamic pod network configuration changes might hamper the communication between pods/containers and to the outside world. You might have iptables rules too restrictive or too open."
          solution    : "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove the --make-iptables-util-chains argument from the KUBELET_SYSTEM_PODS_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Kubelet would manage the iptables on the system and keep it in sync. If you are using any other iptables management solution, then there might be some conflicts.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.13.1,800-171|3.13.6,800-53|SC-7(5),CIS_Recommendation|3.2.7,CN-L3|7.1.2.2(c),CSCv6|9,CSCv7|9,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(5),LEVEL|1S,NESA|T4.5.4,NIAv2|GS7b,NIAv2|NS25,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
          see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "file".
          file        : "/home/kubernetes/kubelet-config.yaml"
          regex       : "^[\\s]*makeIPTablesUtilChains[\\s]*:"
          expect      : "^[\\s]*makeIPTablesUtilChains[\\s]*:[\\s]*true"
        </custom_item>
      </then>

      <else>
        <report type:"FAILED">
          description : "3.2.7 Ensure that the --make-iptables-util-chains argument is set to true"
          info        : "Allow Kubelet to manage iptables.

Rationale:

Kubelets can automatically manage the required changes to iptables based on how you choose your networking options for the pods. It is recommended to let kubelets manage the changes to iptables. This ensures that the iptables configuration remains in sync with pods networking configuration. Manually configuring iptables with dynamic pod network configuration changes might hamper the communication between pods/containers and to the outside world. You might have iptables rules too restrictive or too open."
          solution    : "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove the --make-iptables-util-chains argument from the KUBELET_SYSTEM_PODS_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Kubelet would manage the iptables on the system and keep it in sync. If you are using any other iptables management solution, then there might be some conflicts.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.13.1,800-171|3.13.6,800-53|SC-7(5),CIS_Recommendation|3.2.7,CN-L3|7.1.2.2(c),CSCv6|9,CSCv7|9,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(5),LEVEL|1S,NESA|T4.5.4,NIAv2|GS7b,NIAv2|NS25,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
          see_also    : "https://workbench.cisecurity.org/files/2764"
        </report>
      </else>
    </if>
  </else>
</if>

<custom_item>
  system        : "Linux"
  type          : CMD_EXEC
  description   : "3.2.8 Ensure that the --hostname-override argument is not set"
  info          : "Do not override node hostnames.

Rationale:

Overriding hostnames could potentially break TLS setup between the kubelet and the apiserver. Additionally, with overridden hostnames, it becomes increasingly difficult to associate logs with a particular node and process them for security analytics. Hence, you should setup your kubelet nodes with resolvable FQDNs and avoid overriding the hostnames with IPs."
  solution      : "Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove the --hostname-override argument from the KUBELET_SYSTEM_PODS_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Some cloud providers may require this flag to ensure that hostname matches names issued by the cloud provider. In these environments, this recommendation should not apply.

Default Value:

See the GKE documentation for the default value."
  reference     : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|3.2.8,CN-L3|8.1.10.6(d),CSCv6|3,CSCv7|5,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also      : "https://workbench.cisecurity.org/files/2764"
  cmd           : "ps -ef | grep kubelet | grep -v grep"
  expect        : "^((?!--hostname-override).)*$"
  dont_echo_cmd : YES
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "3.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - cert"
      cmd         : "ps -ef | grep kubelet | grep -v grep"
      expect      : "--tls-cert-file="
    </custom_item>
  </condition>

  <then>
    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "3.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - cert"
      info          : "Setup TLS connection on the Kubelets.

Rationale:

Kubelet communication contains sensitive parameters that should remain encrypted in transit. Configure the Kubelets to serve only HTTPS traffic."
      solution      : "If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the corresponding private key file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameters in KUBELET_CERTIFICATE_ARGS variable.

--tls-cert-file=<path/to/tls-certificate-file>  --tls-private-key-file=<path/to/tls-key-file>

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

TLS and client certificate authentication must be configured for your Kubernetes cluster deployment.

Default Value:

See the GKE documentation for the default value."
      reference     : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|3.2.10,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
      see_also      : "https://workbench.cisecurity.org/files/2764"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--tls-cert-file=.+"
      dont_echo_cmd : YES
    </custom_item>
  </then>

  <else>
    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check if Kubelet config file is used"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "expect".
          expect      : "--config[\\s]+/home/kubernetes/kubelet-config.yaml([\\s]|$)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "3.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - cert"
          info        : "Setup TLS connection on the Kubelets.

Rationale:

Kubelet communication contains sensitive parameters that should remain encrypted in transit. Configure the Kubelets to serve only HTTPS traffic."
          solution    : "If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the corresponding private key file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameters in KUBELET_CERTIFICATE_ARGS variable.

--tls-cert-file=<path/to/tls-certificate-file>  --tls-private-key-file=<path/to/tls-key-file>

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

TLS and client certificate authentication must be configured for your Kubernetes cluster deployment.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|3.2.10,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
          see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "file".
          file        : "/home/kubernetes/kubelet-config.yaml"
          regex       : "^[\\s]*tlsCertFile[\\s]*:"
          expect      : "^[\\s]*tlsCertFile[\\s]*:.+"
        </custom_item>
      </then>

      <else>
        <report type:"FAILED">
          description : "3.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - cert"
          info        : "Setup TLS connection on the Kubelets.

Rationale:

Kubelet communication contains sensitive parameters that should remain encrypted in transit. Configure the Kubelets to serve only HTTPS traffic."
          solution    : "If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the corresponding private key file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameters in KUBELET_CERTIFICATE_ARGS variable.

--tls-cert-file=<path/to/tls-certificate-file>  --tls-private-key-file=<path/to/tls-key-file>

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

TLS and client certificate authentication must be configured for your Kubernetes cluster deployment.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|3.2.10,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
          see_also    : "https://workbench.cisecurity.org/files/2764"
        </report>
      </else>
    </if>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "3.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - key"
      cmd         : "ps -ef | grep kubelet | grep -v grep"
      expect      : "--tls-private-key-file=.+"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "3.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - key"
      info          : "Setup TLS connection on the Kubelets.

Rationale:

Kubelet communication contains sensitive parameters that should remain encrypted in transit. Configure the Kubelets to serve only HTTPS traffic."
      solution      : "If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the corresponding private key file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameters in KUBELET_CERTIFICATE_ARGS variable.

--tls-cert-file=<path/to/tls-certificate-file>  --tls-private-key-file=<path/to/tls-key-file>

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

TLS and client certificate authentication must be configured for your Kubernetes cluster deployment.

Default Value:

See the GKE documentation for the default value."
      reference     : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|3.2.10,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
      see_also      : "https://workbench.cisecurity.org/files/2764"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--tls-private-key-file=.+"
      dont_echo_cmd : YES
    </custom_item>
  </then>

  <else>
    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check if Kubelet config file is used"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "expect".
          expect      : "--config[\\s]+/home/kubernetes/kubelet-config.yaml([\\s]|$)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "3.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - key"
          info        : "Setup TLS connection on the Kubelets.

Rationale:

Kubelet communication contains sensitive parameters that should remain encrypted in transit. Configure the Kubelets to serve only HTTPS traffic."
          solution    : "If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the corresponding private key file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameters in KUBELET_CERTIFICATE_ARGS variable.

--tls-cert-file=<path/to/tls-certificate-file>  --tls-private-key-file=<path/to/tls-key-file>

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

TLS and client certificate authentication must be configured for your Kubernetes cluster deployment.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|3.2.10,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
          see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "file".
          file        : "/home/kubernetes/kubelet-config.yaml"
          regex       : "^[\\s]*tlsPrivateKeyFile[\\s]*:"
          expect      : "^[\\s]*tlsPrivateKeyFile[\\s]*:.+@"
        </custom_item>
      </then>

      <else>
        <report type:"FAILED">
          description : "3.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - key"
          info        : "Setup TLS connection on the Kubelets.

Rationale:

Kubelet communication contains sensitive parameters that should remain encrypted in transit. Configure the Kubelets to serve only HTTPS traffic."
          solution    : "If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the corresponding private key file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameters in KUBELET_CERTIFICATE_ARGS variable.

--tls-cert-file=<path/to/tls-certificate-file>  --tls-private-key-file=<path/to/tls-key-file>

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

TLS and client certificate authentication must be configured for your Kubernetes cluster deployment.

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|3.2.10,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
          see_also    : "https://workbench.cisecurity.org/files/2764"
        </report>
      </else>
    </if>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "3.2.11 Ensure that the --rotate-certificates argument is not set to false"
      cmd         : "ps -ef | grep kubelet | grep -v grep"
      expect      : "--rotate-certificates="
    </custom_item>
  </condition>

  <then>
    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "3.2.11 Ensure that the --rotate-certificates argument is not set to false"
      info          : "Enable kubelet client certificate rotation.

Rationale:

The --rotate-certificates setting causes the kubelet to rotate its client certificates by creating new CSRs as its existing credentials expire. This automated periodic rotation ensures that the there is no downtime due to expired certificates and thus addressing availability in the CIA security triad.

Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.

Note: This feature also require the RotateKubeletClientCertificate feature gate to be enabled (which is the default since Kubernetes v1.7)"
      solution      : "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or remove it altogether to use the default value.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

None

Default Value:

See the GKE documentation for the default value."
      reference     : "800-171|3.4.3,800-53|CM-3(6),CIS_Recommendation|3.2.11,CN-L3|8.1.10.6(g),CSCv6|14.2,CSCv7|14.4,CSF|PR.IP-1,CSF|PR.IP-3,ISO/IEC-27001|A.10.1.1,ITSG-33|CM-3,LEVEL|1S,NESA|T3.2.3,NESA|T3.3.2,NESA|T7.5.1,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|CM1,NIAv2|CM1a,NIAv2|CM1b,NIAv2|CM1c,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1"
      see_also      : "https://workbench.cisecurity.org/files/2764"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "^((?!--rotate-certificates=false).)*$"
      dont_echo_cmd : YES
    </custom_item>
  </then>

  <else>
    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check if Kubelet config file is used"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "expect".
          expect      : "--config[\\s]+/home/kubernetes/kubelet-config.yaml([\\s]|$)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK_NOT
          description : "3.2.11 Ensure that the --rotate-certificates argument is not set to false"
          info        : "Enable kubelet client certificate rotation.

Rationale:

The --rotate-certificates setting causes the kubelet to rotate its client certificates by creating new CSRs as its existing credentials expire. This automated periodic rotation ensures that the there is no downtime due to expired certificates and thus addressing availability in the CIA security triad.

Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.

Note: This feature also require the RotateKubeletClientCertificate feature gate to be enabled (which is the default since Kubernetes v1.7)"
          solution    : "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or remove it altogether to use the default value.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

None

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.4.3,800-53|CM-3(6),CIS_Recommendation|3.2.11,CN-L3|8.1.10.6(g),CSCv6|14.2,CSCv7|14.4,CSF|PR.IP-1,CSF|PR.IP-3,ISO/IEC-27001|A.10.1.1,ITSG-33|CM-3,LEVEL|1S,NESA|T3.2.3,NESA|T3.3.2,NESA|T7.5.1,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|CM1,NIAv2|CM1a,NIAv2|CM1b,NIAv2|CM1c,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1"
          see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "file".
          file        : "/home/kubernetes/kubelet-config.yaml"
          regex       : "^[\\s]*rotateCertificates[\\s]*:"
          expect      : "^[\\s]*rotateCertificates[\\s]*:[\\s]*false"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "3.2.11 Ensure that the --rotate-certificates argument is not set to false"
          info        : "Enable kubelet client certificate rotation.

Rationale:

The --rotate-certificates setting causes the kubelet to rotate its client certificates by creating new CSRs as its existing credentials expire. This automated periodic rotation ensures that the there is no downtime due to expired certificates and thus addressing availability in the CIA security triad.

Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.

Note: This feature also require the RotateKubeletClientCertificate feature gate to be enabled (which is the default since Kubernetes v1.7)"
          solution    : "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or remove it altogether to use the default value.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

None

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.4.3,800-53|CM-3(6),CIS_Recommendation|3.2.11,CN-L3|8.1.10.6(g),CSCv6|14.2,CSCv7|14.4,CSF|PR.IP-1,CSF|PR.IP-3,ISO/IEC-27001|A.10.1.1,ITSG-33|CM-3,LEVEL|1S,NESA|T3.2.3,NESA|T3.3.2,NESA|T7.5.1,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|CM1,NIAv2|CM1a,NIAv2|CM1b,NIAv2|CM1c,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1"
          see_also    : "https://workbench.cisecurity.org/files/2764"
        </report>
      </else>
    </if>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "3.2.12 Ensure that the RotateKubeletServerCertificate argument is set to true"
      cmd         : "ps -ef | grep kubelet | grep -v grep"
      expect      : "RotateKubeletServerCertificate="
    </custom_item>
  </condition>

  <then>
    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "3.2.12 Ensure that the RotateKubeletServerCertificate argument is set to true"
      info          : "Enable kubelet server certificate rotation.

Rationale:

RotateKubeletServerCertificate causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad.

Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself."
      solution      : "Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.

--feature-gates=RotateKubeletServerCertificate=true

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

None

Default Value:

See the GKE documentation for the default value."
      reference     : "800-171|3.5.2,800-53|IA-5(1)(g),CIS_Recommendation|3.2.12,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also      : "https://workbench.cisecurity.org/files/2764"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "RotateKubeletServerCertificate=true"
      dont_echo_cmd : YES
    </custom_item>
  </then>

  <else>
    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check if Kubelet config file is used"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "expect".
          expect      : "--config[\\s]+/home/kubernetes/kubelet-config.yaml([\\s]|$)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "3.2.12 Ensure that the RotateKubeletServerCertificate argument is set to true"
          info        : "Enable kubelet server certificate rotation.

Rationale:

RotateKubeletServerCertificate causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad.

Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself."
          solution    : "Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.

--feature-gates=RotateKubeletServerCertificate=true

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

None

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.4.3,800-53|CM-3(6),CIS_Recommendation|3.2.12,CN-L3|8.1.10.6(g),CSCv6|14.2,CSCv7|14.4,CSF|PR.IP-1,CSF|PR.IP-3,ISO/IEC-27001|A.10.1.1,ITSG-33|CM-3,LEVEL|1S,NESA|T3.2.3,NESA|T3.3.2,NESA|T7.5.1,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|CM1,NIAv2|CM1a,NIAv2|CM1b,NIAv2|CM1c,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1"
          see_also    : "https://workbench.cisecurity.org/files/2764"
# Note: Variable @KUBELET_CONFIG@ replaced with "/home/kubernetes/kubelet-config.yaml" in field "file".
          file        : "/home/kubernetes/kubelet-config.yaml"
          regex       : "^[\\s]*RotateKubeletServerCertificate[\\s]*:"
          expect      : "^[\\s]*RotateKubeletServerCertificate[\\s]*:[\\s]*true"
        </custom_item>
      </then>

      <else>
        <report type:"FAILED">
          description : "3.2.12 Ensure that the RotateKubeletServerCertificate argument is set to true"
          info        : "Enable kubelet server certificate rotation.

Rationale:

RotateKubeletServerCertificate causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad.

Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself."
          solution    : "Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.

--feature-gates=RotateKubeletServerCertificate=true

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

None

Default Value:

See the GKE documentation for the default value."
          reference   : "800-171|3.4.3,800-53|CM-3(6),CIS_Recommendation|3.2.12,CN-L3|8.1.10.6(g),CSCv6|14.2,CSCv7|14.4,CSF|PR.IP-1,CSF|PR.IP-3,ISO/IEC-27001|A.10.1.1,ITSG-33|CM-3,LEVEL|1S,NESA|T3.2.3,NESA|T3.3.2,NESA|T7.5.1,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|CM1,NIAv2|CM1a,NIAv2|CM1b,NIAv2|CM1c,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1"
          see_also    : "https://workbench.cisecurity.org/files/2764"
        </report>
      </else>
    </if>
  </else>
</if>

<report type:"WARNING">
  description : "5.9.1 Enable Customer-Managed Encryption Keys (CMEK) for GKE Persistent Disks (PD)"
  info        : "Use Customer-Managed Encryption Keys (CMEK) to encrypt node boot and dynamically-provisioned attached Google Compute Engine Persistent Disks (PDs) using keys managed within Cloud Key Management Service (Cloud KMS).

Rationale:

GCE persistent disks are encrypted at rest by default using envelope encryption with keys managed by Google. For additional protection, users can manage the Key Encryption Keys using Cloud KMS.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "This cannot be remediated by updating an existing cluster. You must either recreate the desired node pool or create a new cluster.

Using Google Cloud Console

FOR NODE BOOT DISKS:
To create a new node pool:

Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list

Select Kubernetes clusters for which node boot disk CMEK is disabled

Click ADD NODE POOL

Ensure Boot disk type is 'Standard persistent disk' or 'SSD persistent disk'

Select 'Enable customer-managed encryption for Boot Disk' and select the Cloud KMS encryption key you desire

Click SAVE.

To create a new cluster:

Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list

Click CREATE CLUSTER

Under the 'default-pool' heading, click 'More options'

In the Node pool edit window, select 'Standard persistent disk' or 'SSD Persistent Disk' as the Boot disk type

Select 'Enable customer-managed encryption for Boot Disk' check box and choose the Cloud KMS encryption key you desire

Configure the rest of the cluster settings as desired

Click CREATE.

Click Save.

FOR ATTACHED DISKS:
This is not possible using Google Cloud Console.

Using Command Line:

FOR NODE BOOT DISKS:
Create a new node pool using customer-managed encryption keys for the node boot disk, of [DISK_TYPE] either pd-standard or pd-ssd:

gcloud beta container node-pools create [CLUSTER_NAME] \
--disk-type [DISK_TYPE] \
--boot-disk-kms-key projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]

Create a cluster using customer-managed encryption keys for the node boot disk, of [DISK_TYPE] either pd-standard or pd-ssd:

gcloud beta container clusters create [CLUSTER_NAME] \
--disk-type [DISK_TYPE] \
--boot-disk-kms-key projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]

FOR ATTACHED DISKS:
Follow the instructions detailed at https://cloud.google.com/kubernetes-engine/docs/how-to/using-cmek.

Impact:

While GKE CMEK is in beta, encryption of dynamically-provisioned attached disks requires the use of the self-provisioned Compute Engine Persistent Disk CSI Driver v0.5.1 or higher.

If you are configuring CMEK with a regional cluster, the cluster must run GKE 1.14 or higher.

Default Value:

Persistent disks are encrypted at rest by default, but are not encrypted using Customer-Managed Encryption Keys by default. By default, the Compute Engine Persistent Disk CSI Driver is not provisioned within the cluster."
  reference   : "800-53|SC-28.,CIS_Recommendation|5.9.1,CSCv7|14.8,LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/2764"
</report>

</check_type>
