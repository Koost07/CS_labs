#
# This script is Copyright (C) 2004-2021 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.1 $
# $Date: 2021/06/17 $
#
# description : This document implements the security configuration as recommended by the
#               CIS Kubernetes Benchmark v1.6.1
#
#<ui_metadata>
#<display_name>CIS Kubernetes Benchmark v1.6.1 L1 Worker</display_name>
#<spec>
#  <type>CIS</type>
#  <name>Kubernetes L1 Worker</name>
#  <version>1.6.1</version>
#  <link>https://workbench.cisecurity.org/files/2968</link>
#</spec>
#<labels>unix,agent</labels>
#<benchmark_refs>LEVEL,CSCv6,CSCv7,CIS_Recommendation</benchmark_refs>
#<variables>
#  <variable>
#    <name>CLIENT_CA_FILE</name>
#    <default>/etc/kubernetes/pki/ca.crt</default>
#    <description>Client CA File</description>
#    <info>Any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.</info>
#  </variable>
#  <variable>
#    <name>CONFIG_FILE</name>
#    <default>/etc/kubernetes/kubelet.conf</default>
#    <description>Worker Node Config File</description>
#    <info>The config file controls various parameters that set the behavior of various components of the worker node.</info>
#  </variable>
#  <variable>
#    <name>KUBECONFIG</name>
#    <default>/etc/kubernetes/admin.conf</default>
#    <description>Path to the kubectl config</description>
#    <info>The kubeconfig file controls various parameters for connecting to the API server.</info>
#  </variable>
#  <variable>
#    <name>KUBECTL_PATH</name>
#    <default>/usr/bin</default>
#    <description>Path to the kubectl binary</description>
#    <info>This is the directory where the kubectl binary is located.</info>
#  </variable>
#  <variable>
#    <name>KUBELET_CONFIG_FILE</name>
#    <default>/var/lib/kubelet/config.yaml</default>
#    <description>Kubelet Config File</description>
#    <info>The kubelet config file controls various parameters that set the behavior of the kubelet service.</info>
#  </variable>
#  <variable>
#    <name>KUBELET_FILE</name>
#    <default>/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</default>
#    <description>Kubelet Service Config File</description>
#    <info>The kubelet file controls various parameters that set the behavior of the kubelet service in the worker node.</info>
#  </variable>
#  <variable>
#    <name>PROXY_FILE</name>
#    <default>/etc/kubernetes/proxy</default>
#    <description>Proxy File</description>
#    <info>The proxy file controls various parameters that set the behavior of the kube-proxy service in the worker node.</info>
#  </variable>
#  <variable>
#    <name>TLS_CERT_FILE</name>
#    <default>/etc/kubernetes/pki/apiserver.crt</default>
#    <description>TLS Certificate File</description>
#    <info>File containing the default x509 Certificate for HTTPS.</info>
#  </variable>
#  <variable>
#    <name>TLS_PRIVATE_KEY_FILE</name>
#    <default>/etc/kubernetes/pki/apiserver.key</default>
#    <description>TLS Private Key File</description>
#    <info>File containing the default x509 private key matching --tls-cert-file.</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<custom_item>
  system      : "Linux"
  type        : PROCESS_CHECK
  description : "CIS_Kubernetes_v1.6.1_Level_1_Worker.audit from CIS Kubernetes Benchmark v1.6.1"
  info        : "NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  reference   : "800-171|3.4.2,800-53|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6b.,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2968"
  name        : "kubelet"
  status      : ON
  severity    : MEDIUM
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : PROCESS_CHECK
      description : "Check if kubelet is running"
      name        : "kubelet"
      status      : ON
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "Check if this is a Docker Vessel/Host"
      cmd         : "/usr/bin/docker info"
      expect      : "Containers"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "4.1.1 Ensure that the kubelet service file permissions are set to 644 or more restrictive"
      info        : "Ensure that the kubelet service file has permissions of 644 or more restrictive.

Rationale:

The kubelet service file controls various parameters that set the behavior of the kubelet service in the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.

Impact:

None"
      solution    : "Run the below command (based on the file location on your system) on the each worker node. For example,

chmod 755 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

Default Value:

By default, the kubelet service file has permissions of 640."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.1.1,CN-L3|8.1.10.6(d),CSCv6|3.1,CSCv6|5.1,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_FILE@ replaced with "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf" in field "file".
      file        : "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
      mask        : "133"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "4.1.2 Ensure that the kubelet service file ownership is set to root:root"
      info        : "Ensure that the kubelet service file ownership is set to root:root.

Rationale:

The kubelet service file controls various parameters that set the behavior of the kubelet service in the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.

Impact:

None"
      solution    : "Run the below command (based on the file location on your system) on the each worker node. For example,

chown root:root /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

Default Value:

By default, kubelet service file ownership is set to root:root."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.1.2,CN-L3|8.1.10.6(d),CSCv6|3.1,CSCv6|5.1,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_FILE@ replaced with "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf" in field "file".
      file        : "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
      owner       : "root"
      group       : "root"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "4.1.3 If proxy kubeconfig file exists ensure permissions are set to 644 or more restrictive"
      info        : "If kube-proxy is running, and if it is using a file-based kubeconfig file, ensure that the proxy kubeconfig file has permissions of 644 or more restrictive.

Rationale:

The kube-proxy kubeconfig file controls various parameters of the kube-proxy service in the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.

It is possible to run kube-proxy with the kubeconfig parameters configured as a Kubernetes ConfigMap instead of a file. In this case, there is no proxy kubeconfig file.

Impact:

None"
      solution    : "Run the below command (based on the file location on your system) on the each worker node. For example,

chmod 644 <proxy kubeconfig file>

Default Value:

By default, proxy file has permissions of 640."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.1.3,CN-L3|8.1.10.6(d),CSCv6|3.1,CSCv6|5.1,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @PROXY_FILE@ replaced with "/etc/kubernetes/proxy" in field "file".
      file        : "/etc/kubernetes/proxy"
      mask        : "133"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "4.1.4 If proxy kubeconfig file exists ensure ownership is set to root:root"
      info        : "If kube-proxy is running, ensure that the file ownership of its kubeconfig file is set to root:root.

Rationale:

The kubeconfig file for kube-proxy controls various parameters for the kube-proxy service in the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.

Impact:

None"
      solution    : "Run the below command (based on the file location on your system) on the each worker node. For example,

chown root:root <proxy kubeconfig file>

Default Value:

By default, proxy file ownership is set to root:root."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.1.4,CN-L3|8.1.10.6(d),CSCv6|3.1,CSCv6|5.1,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @PROXY_FILE@ replaced with "/etc/kubernetes/proxy" in field "file".
      file        : "/etc/kubernetes/proxy"
      owner       : "root"
      group       : "root"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "4.1.5 Ensure that the --kubeconfig kubelet.conf file permissions are set to 644 or more restrictive"
      info        : "Ensure that the kubelet.conf file has permissions of 644 or more restrictive.

Rationale:

The kubelet.conf file is the kubeconfig file for the node, and controls various parameters that set the behavior and identity of the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.

Impact:

None"
      solution    : "Run the below command (based on the file location on your system) on the each worker node. For example,

chmod 644 /etc/kubernetes/kubelet.conf

Default Value:

By default, kubelet.conf file has permissions of 640."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.1.5,CN-L3|8.1.10.6(d),CSCv6|3.1,CSCv6|5.1,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @CONFIG_FILE@ replaced with "/etc/kubernetes/kubelet.conf" in field "file".
      file        : "/etc/kubernetes/kubelet.conf"
      mask        : "133"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "4.1.6 Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root"
      info        : "Ensure that the kubelet.conf file ownership is set to root:root.

Rationale:

The kubelet.conf file is the kubeconfig file for the node, and controls various parameters that set the behavior and identity of the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.

Impact:

None"
      solution    : "Run the below command (based on the file location on your system) on the each worker node. For example,

chown root:root /etc/kubernetes/kubelet.conf

Default Value:

By default, kubelet.conf file ownership is set to root:root."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.1.6,CN-L3|8.1.10.6(d),CSCv6|3.1,CSCv6|5.1,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @CONFIG_FILE@ replaced with "/etc/kubernetes/kubelet.conf" in field "file".
      file        : "/etc/kubernetes/kubelet.conf"
      owner       : "root"
      group       : "root"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "4.1.7 Ensure that the certificate authorities file permissions are set to 644 or more restrictive"
      info        : "Ensure that the certificate authorities file has permissions of 644 or more restrictive.

Rationale:

The certificate authorities file controls the authorities used to validate API requests. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.

Impact:

None"
      solution    : "Run the following command to modify the file permissions of the --client-ca-file

chmod 644 <filename>

Default Value:

By default no --client-ca-file is specified."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.1.7,CN-L3|8.1.10.6(d),CSCv6|3.1,CSCv6|5.1,CSCv6|14.4,CSCv7|14.6,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @CLIENT_CA_FILE@ replaced with "/etc/kubernetes/pki/ca.crt" in field "file".
      file        : "/etc/kubernetes/pki/ca.crt"
      mask        : "133"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "4.1.8 Ensure that the client certificate authorities file ownership is set to root:root"
      info        : "Ensure that the certificate authorities file ownership is set to root:root.

Rationale:

The certificate authorities file controls the authorities used to validate API requests. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.

Impact:

None"
      solution    : "Run the following command to modify the ownership of the --client-ca-file.

chown root:root <filename>

Default Value:

By default no --client-ca-file is specified."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.1.8,CN-L3|8.1.10.6(d),CSCv6|3.1,CSCv6|5.1,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @CLIENT_CA_FILE@ replaced with "/etc/kubernetes/pki/ca.crt" in field "file".
      file        : "/etc/kubernetes/pki/ca.crt"
      owner       : "root"
      group       : "root"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "4.1.9 Ensure that the kubelet --config configuration file has permissions set to 644 or more restrictive"
      info        : "Ensure that if the kubelet refers to a configuration file with the --config argument, that file has permissions of 644 or more restrictive.

Rationale:

The kubelet reads various parameters, including security settings, from a config file specified by the --config argument. If this file is specified you should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.

Impact:

None"
      solution    : "Run the following command (using the config file location identied in the Audit step)

chmod 644 /var/lib/kubelet/config.yaml

Default Value:

By default, the /var/lib/kubelet/config.yaml file as set up by kubeadm has permissions of 644."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.1.9,CN-L3|8.1.10.6(d),CSCv6|3.1,CSCv6|5.1,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "file".
      file        : "/var/lib/kubelet/config.yaml"
      mask        : "133"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "4.1.10 Ensure that the kubelet --config configuration file ownership is set to root:root"
      info        : "Ensure that if the kubelet refers to a configuration file with the --config argument, that file is owned by root:root.

Rationale:

The kubelet reads various parameters, including security settings, from a config file specified by the --config argument. If this file is specified you should restrict its file permissions to maintain the integrity of the file. The file should be owned by root:root.

Impact:

None"
      solution    : "Run the following command (using the config file location identied in the Audit step)

chown root:root /etc/kubernetes/kubelet.conf

Default Value:

By default, /var/lib/kubelet/config.yaml file as set up by kubeadm is owned by root:root."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.1.10,CN-L3|8.1.10.6(d),CSCv6|3.1,CSCv6|5.1,CSCv7|5.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "file".
      file        : "/var/lib/kubelet/config.yaml"
      owner       : "root"
      group       : "root"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "4.2.1 Ensure that the anonymous-auth argument is set to false"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
          expect      : "--anonymous-auth="
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "4.2.1 Ensure that the --anonymous-auth argument is set to false"
          info          : "Disable anonymous requests to the Kubelet server.

Rationale:

When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the Kubelet server. You should rely on authentication to authorize access and disallow anonymous requests.

Impact:

Anonymous requests will be rejected."
          solution      : "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to false.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--anonymous-auth=false

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, anonymous access is enabled."
          reference     : "800-171|3.5.1,800-53|IA-2,CIS_Recommendation|4.2.1,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|14,CSCv7|14,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
          see_also      : "https://workbench.cisecurity.org/files/2968"
          cmd           : "ps -ef | grep kubelet | grep -v grep"
          expect        : "--anonymous-auth=false"
          dont_echo_cmd : YES
        </custom_item>
      </then>

      <else>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : CMD_EXEC
              description : "Check if Kubelet config file is used"
              cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "expect".
              expect      : "--config=/var/lib/kubelet/config.yaml([\\s]|$)"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system      : "Linux"
              type        : CMD_EXEC
              description : "4.2.1 Ensure that the --anonymous-auth argument is set to false"
              info        : "Disable anonymous requests to the Kubelet server.

Rationale:

When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the Kubelet server. You should rely on authentication to authorize access and disallow anonymous requests.

Impact:

Anonymous requests will be rejected."
              solution    : "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to false.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--anonymous-auth=false

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, anonymous access is enabled."
              reference   : "800-171|3.5.1,800-53|IA-2,CIS_Recommendation|4.2.1,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|14,CSCv7|14,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
              see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "cmd".
              cmd         : "sed 's/\\(\\s*\\)\\(.*:\\)\\s*\\(.*\\)/\\1\\|\\2\\|\\3/g' '/var/lib/kubelet/config.yaml' | awk -F'|' '{ indent = length($1)/2; vname[indent] = $2; for (i in vname) {if (i > indent) {delete vname[i]}} if (length($3) > 0) { vn=none; for (i=0; i<=indent; i++) {vn=(vn)(vname[i])} { print vn $3 } } }'"
              expect      : "^authentication:anonymous:enabled:false$"
            </custom_item>
          </then>

          <else>
            <report type:"FAILED">
              description : "4.2.1 Ensure that the --anonymous-auth argument is set to false"
              info        : "Disable anonymous requests to the Kubelet server.

Rationale:

When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the Kubelet server. You should rely on authentication to authorize access and disallow anonymous requests.

Impact:

Anonymous requests will be rejected."
              solution    : "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to false.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--anonymous-auth=false

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, anonymous access is enabled."
              reference   : "800-171|3.5.1,800-53|IA-2,CIS_Recommendation|4.2.1,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|14,CSCv7|14,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
              see_also    : "https://workbench.cisecurity.org/files/2968"
            </report>
          </else>
        </if>
      </else>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "4.2.2 Ensure that the --authorization-mode argument is not set to AlwaysAllow"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
          expect      : "--authorization-mode="
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "4.2.2 Ensure that the --authorization-mode argument is not set to AlwaysAllow"
          info          : "Do not allow all requests. Enable explicit authorization.

Rationale:

Kubelets, by default, allow all authenticated requests (even anonymous ones) without needing explicit authorization checks from the apiserver. You should restrict this behavior and only allow explicitly authorized requests.

Impact:

Unauthorized requests will be denied."
          solution      : "If using a Kubelet config file, edit the file to set authorization: mode to Webhook.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable.

--authorization-mode=Webhook

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --authorization-mode argument is set to AlwaysAllow."
          reference     : "800-171|3.1.5,800-53|AC-6,CIS_Recommendation|4.2.2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSCv7|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/2968"
          cmd           : "ps -ef | grep kubelet | grep -v grep"
          expect        : "--authorization-mode=((?!AlwaysAllow).)*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>
      </then>

      <else>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : CMD_EXEC
              description : "Check if Kubelet config file is used"
              cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "expect".
              expect      : "--config=/var/lib/kubelet/config.yaml([\\s]|$)"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system      : "Linux"
              type        : FILE_CONTENT_CHECK_NOT
              description : "4.2.2 Ensure that the --authorization-mode argument is not set to AlwaysAllow"
              info        : "Do not allow all requests. Enable explicit authorization.

Rationale:

Kubelets, by default, allow all authenticated requests (even anonymous ones) without needing explicit authorization checks from the apiserver. You should restrict this behavior and only allow explicitly authorized requests.

Impact:

Unauthorized requests will be denied."
              solution    : "If using a Kubelet config file, edit the file to set authorization: mode to Webhook.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable.

--authorization-mode=Webhook

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --authorization-mode argument is set to AlwaysAllow."
              reference   : "800-171|3.1.5,800-53|AC-6.,CIS_Recommendation|4.2.2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSCv7|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
              see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "file".
              file        : "/var/lib/kubelet/config.yaml"
              regex       : "^[\\s]*mode[\\s]*:"
              expect      : "^[\\s]*mode[\\s]*:.*AlwaysAllow"
            </custom_item>
          </then>

          <else>
            <report type:"FAILED">
              description : "4.2.2 Ensure that the --authorization-mode argument is not set to AlwaysAllow"
              info        : "Do not allow all requests. Enable explicit authorization.

Rationale:

Kubelets, by default, allow all authenticated requests (even anonymous ones) without needing explicit authorization checks from the apiserver. You should restrict this behavior and only allow explicitly authorized requests.

Impact:

Unauthorized requests will be denied."
              solution    : "If using a Kubelet config file, edit the file to set authorization: mode to Webhook.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable.

--authorization-mode=Webhook

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --authorization-mode argument is set to AlwaysAllow."
              reference   : "800-171|3.1.5,800-53|AC-6.,CIS_Recommendation|4.2.2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSCv7|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
              see_also    : "https://workbench.cisecurity.org/files/2968"
            </report>
          </else>
        </if>
      </else>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "4.2.3 Ensure that the --client-ca-file argument is set as appropriate"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
          expect      : "--client-ca-file="
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "4.2.3 Ensure that the --client-ca-file argument is set as appropriate"
          info          : "Enable Kubelet authentication using certificates.

Rationale:

The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks. Enabling Kubelet certificate authentication ensures that the apiserver could authenticate the Kubelet before submitting any requests.

Impact:

You require TLS to be configured on apiserver as well as kubelets."
          solution      : "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to the location of the client CA file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable.

--client-ca-file=<path/to/client-ca-file>

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --client-ca-file argument is not set."
          reference     : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|4.2.3,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
          see_also      : "https://workbench.cisecurity.org/files/2968"
          cmd           : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @CLIENT_CA_FILE@ replaced with "/etc/kubernetes/pki/ca.crt" in field "expect".
          expect        : "--client-ca-file=/etc/kubernetes/pki/ca.crt([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>
      </then>

      <else>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : CMD_EXEC
              description : "Check if Kubelet config file is used"
              cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "expect".
              expect      : "--config=/var/lib/kubelet/config.yaml([\\s]|$)"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system      : "Linux"
              type        : FILE_CONTENT_CHECK
              description : "4.2.3 Ensure that the --client-ca-file argument is set as appropriate"
              info        : "Enable Kubelet authentication using certificates.

Rationale:

The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks. Enabling Kubelet certificate authentication ensures that the apiserver could authenticate the Kubelet before submitting any requests.

Impact:

You require TLS to be configured on apiserver as well as kubelets."
              solution    : "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to the location of the client CA file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable.

--client-ca-file=<path/to/client-ca-file>

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --client-ca-file argument is not set."
              reference   : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|4.2.3,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
              see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "file".
              file        : "/var/lib/kubelet/config.yaml"
              regex       : "^[\\s]*clientCAFile[\\s]*:"
# Note: Variable @CLIENT_CA_FILE@ replaced with "/etc/kubernetes/pki/ca.crt" in field "expect".
              expect      : "^[\\s]*clientCAFile[\\s]*:[\\s]*/etc/kubernetes/pki/ca.crt"
            </custom_item>
          </then>

          <else>
            <report type:"FAILED">
              description : "4.2.3 Ensure that the --client-ca-file argument is set as appropriate"
              info        : "Enable Kubelet authentication using certificates.

Rationale:

The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks. Enabling Kubelet certificate authentication ensures that the apiserver could authenticate the Kubelet before submitting any requests.

Impact:

You require TLS to be configured on apiserver as well as kubelets."
              solution    : "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to the location of the client CA file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable.

--client-ca-file=<path/to/client-ca-file>

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --client-ca-file argument is not set."
              reference   : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|4.2.3,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
              see_also    : "https://workbench.cisecurity.org/files/2968"
            </report>
          </else>
        </if>
      </else>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "4.2.4 Verify that the --read-only-port argument is set to 0"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
          expect      : "--read-only-port="
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "4.2.4 Verify that the --read-only-port argument is set to 0"
          info          : "Disable the read-only port.

Rationale:

The Kubelet process provides a read-only API in addition to the main Kubelet API. Unauthenticated access is provided to this read-only API which could possibly retrieve potentially sensitive information about the cluster.

Impact:

Removal of the read-only port will require that any service which made use of it will need to be re-configured to use the main Kubelet API."
          solution      : "If using a Kubelet config file, edit the file to set readOnlyPort to 0.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--read-only-port=0

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --read-only-port is set to 10255/TCP. However, if a config file is specified by --config the default value for readOnlyPort is 0."
          reference     : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|4.2.4,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSCv7|9.2,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|1M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/2968"
          cmd           : "ps -ef | grep kubelet | grep -v grep"
          expect        : "--read-only-port=0([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>
      </then>

      <else>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : CMD_EXEC
              description : "Check if Kubelet config file is used"
              cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "expect".
              expect      : "--config=/var/lib/kubelet/config.yaml([\\s]|$)"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system      : "Linux"
              type        : FILE_CONTENT_CHECK
              description : "4.2.4 Verify that the --read-only-port argument is set to 0"
              info        : "Disable the read-only port.

Rationale:

The Kubelet process provides a read-only API in addition to the main Kubelet API. Unauthenticated access is provided to this read-only API which could possibly retrieve potentially sensitive information about the cluster.

Impact:

Removal of the read-only port will require that any service which made use of it will need to be re-configured to use the main Kubelet API."
              solution    : "If using a Kubelet config file, edit the file to set readOnlyPort to 0.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--read-only-port=0

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --read-only-port is set to 10255/TCP. However, if a config file is specified by --config the default value for readOnlyPort is 0."
              reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|4.2.4,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSCv7|9.2,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|1M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
              see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "file".
              file        : "/var/lib/kubelet/config.yaml"
              regex       : "^[\\s]*readOnlyPort[\\s]*:"
              expect      : "^[\\s]*readOnlyPort[\\s]*:[\\s]*0"
            </custom_item>
          </then>

          <else>
            <report type:"FAILED">
              description : "4.2.4 Verify that the --read-only-port argument is set to 0"
              info        : "Disable the read-only port.

Rationale:

The Kubelet process provides a read-only API in addition to the main Kubelet API. Unauthenticated access is provided to this read-only API which could possibly retrieve potentially sensitive information about the cluster.

Impact:

Removal of the read-only port will require that any service which made use of it will need to be re-configured to use the main Kubelet API."
              solution    : "If using a Kubelet config file, edit the file to set readOnlyPort to 0.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--read-only-port=0

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --read-only-port is set to 10255/TCP. However, if a config file is specified by --config the default value for readOnlyPort is 0."
              reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|4.2.4,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSCv7|9.2,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|1M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
              see_also    : "https://workbench.cisecurity.org/files/2968"
            </report>
          </else>
        </if>
      </else>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "4.2.5 Ensure that the --streaming-connection-idle-timeout argument is not set to 0"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
          expect      : "--streaming-connection-idle-timeout="
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "4.2.5 Ensure that the --streaming-connection-idle-timeout argument is not set to 0"
          info          : "Do not disable timeouts on streaming connections.

Rationale:

Setting idle timeouts ensures that you are protected against Denial-of-Service attacks, inactive connections and running out of ephemeral ports.

Note: By default, --streaming-connection-idle-timeout is set to 4 hours which might be too high for your environment. Setting this as appropriate would additionally ensure that such streaming connections are timed out after serving legitimate use cases.

Impact:

Long-lived connections could be interrupted."
          solution      : "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a value other than 0.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--streaming-connection-idle-timeout=5m

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --streaming-connection-idle-timeout is set to 4 hours."
          reference     : "800-53|SC-5.,CIS_Recommendation|4.2.5,CSCv6|9,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,ITSG-33|SC-5a.,LEVEL|1M,NESA|T3.3.1,NIAv2|GS8e,NIAv2|GS10c,QCSC-v1|8.2.1"
          see_also      : "https://workbench.cisecurity.org/files/2968"
          cmd           : "ps -ef | grep kubelet | grep -v grep"
          expect        : "--streaming-connection-idle-timeout=[^0]"
          dont_echo_cmd : YES
        </custom_item>
      </then>

      <else>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : CMD_EXEC
              description : "Check if Kubelet config file is used"
              cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "expect".
              expect      : "--config=/var/lib/kubelet/config.yaml([\\s]|$)"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system      : "Linux"
              type        : FILE_CONTENT_CHECK_NOT
              description : "4.2.5 Ensure that the --streaming-connection-idle-timeout argument is not set to 0"
              info        : "Do not disable timeouts on streaming connections.

Rationale:

Setting idle timeouts ensures that you are protected against Denial-of-Service attacks, inactive connections and running out of ephemeral ports.

Note: By default, --streaming-connection-idle-timeout is set to 4 hours which might be too high for your environment. Setting this as appropriate would additionally ensure that such streaming connections are timed out after serving legitimate use cases.

Impact:

Long-lived connections could be interrupted."
              solution    : "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a value other than 0.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--streaming-connection-idle-timeout=5m

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --streaming-connection-idle-timeout is set to 4 hours."
              reference   : "800-53|SC-5.,CIS_Recommendation|4.2.5,CSCv6|9,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,ITSG-33|SC-5a.,LEVEL|1M,NESA|T3.3.1,NIAv2|GS8e,NIAv2|GS10c,QCSC-v1|8.2.1"
              see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "file".
              file        : "/var/lib/kubelet/config.yaml"
              regex       : "^[\\s]*streamingConnectionIdleTimeout[\\s]*:"
              expect      : "^[\\s]*streamingConnectionIdleTimeout[\\s]*:[\\s]*0"
            </custom_item>
          </then>

          <else>
            <report type:"PASSED">
              description : "4.2.5 Ensure that the --streaming-connection-idle-timeout argument is not set to 0"
              info        : "Do not disable timeouts on streaming connections.

Rationale:

Setting idle timeouts ensures that you are protected against Denial-of-Service attacks, inactive connections and running out of ephemeral ports.

Note: By default, --streaming-connection-idle-timeout is set to 4 hours which might be too high for your environment. Setting this as appropriate would additionally ensure that such streaming connections are timed out after serving legitimate use cases.

Impact:

Long-lived connections could be interrupted."
              solution    : "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a value other than 0.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--streaming-connection-idle-timeout=5m

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --streaming-connection-idle-timeout is set to 4 hours."
              reference   : "800-53|SC-5.,CIS_Recommendation|4.2.5,CSCv6|9,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,ITSG-33|SC-5a.,LEVEL|1M,NESA|T3.3.1,NIAv2|GS8e,NIAv2|GS10c,QCSC-v1|8.2.1"
              see_also    : "https://workbench.cisecurity.org/files/2968"
            </report>
          </else>
        </if>
      </else>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "4.2.6 Ensure that the --protect-kernel-defaults argument is set to true"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
          expect      : "--protect-kernel-defaults="
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "4.2.6 Ensure that the --protect-kernel-defaults argument is set to true"
          info          : "Protect tuned kernel parameters from overriding kubelet default kernel parameter values.

Rationale:

Kernel parameters are usually tuned and hardened by the system administrators before putting the systems into production. These parameters protect the kernel and the system. Your kubelet kernel defaults that rely on such parameters should be appropriately set to match the desired secured system state. Ignoring this could potentially lead to running pods with undesired kernel behavior.

Impact:

You would have to re-tune kernel parameters to match kubelet parameters."
          solution      : "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--protect-kernel-defaults=true

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --protect-kernel-defaults is not set."
          reference     : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.2.6,CN-L3|8.1.10.6(d),CSCv6|3,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/2968"
          cmd           : "ps -ef | grep kubelet | grep -v grep"
          expect        : "--protect-kernel-defaults=true"
          dont_echo_cmd : YES
        </custom_item>
      </then>

      <else>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : CMD_EXEC
              description : "Check if Kubelet config file is used"
              cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "expect".
              expect      : "--config=/var/lib/kubelet/config.yaml([\\s]|$)"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system      : "Linux"
              type        : FILE_CONTENT_CHECK
              description : "4.2.6 Ensure that the --protect-kernel-defaults argument is set to true"
              info        : "Protect tuned kernel parameters from overriding kubelet default kernel parameter values.

Rationale:

Kernel parameters are usually tuned and hardened by the system administrators before putting the systems into production. These parameters protect the kernel and the system. Your kubelet kernel defaults that rely on such parameters should be appropriately set to match the desired secured system state. Ignoring this could potentially lead to running pods with undesired kernel behavior.

Impact:

You would have to re-tune kernel parameters to match kubelet parameters."
              solution    : "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--protect-kernel-defaults=true

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --protect-kernel-defaults is not set."
              reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.2.6,CN-L3|8.1.10.6(d),CSCv6|3,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "file".
              file        : "/var/lib/kubelet/config.yaml"
              regex       : "^[\\s]*protectKernelDefaults[\\s]*:"
              expect      : "^[\\s]*protectKernelDefaults[\\s]*:[\\s]*true"
            </custom_item>
          </then>

          <else>
            <report type:"FAILED">
              description : "4.2.6 Ensure that the --protect-kernel-defaults argument is set to true"
              info        : "Protect tuned kernel parameters from overriding kubelet default kernel parameter values.

Rationale:

Kernel parameters are usually tuned and hardened by the system administrators before putting the systems into production. These parameters protect the kernel and the system. Your kubelet kernel defaults that rely on such parameters should be appropriately set to match the desired secured system state. Ignoring this could potentially lead to running pods with undesired kernel behavior.

Impact:

You would have to re-tune kernel parameters to match kubelet parameters."
              solution    : "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.

--protect-kernel-defaults=true

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --protect-kernel-defaults is not set."
              reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.2.6,CN-L3|8.1.10.6(d),CSCv6|3,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also    : "https://workbench.cisecurity.org/files/2968"
            </report>
          </else>
        </if>
      </else>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "4.2.7 Ensure that the --make-iptables-util-chains argument is set to true"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
          expect      : "--make-iptables-util-chains="
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "4.2.7 Ensure that the --make-iptables-util-chains argument is set to true"
          info          : "Allow Kubelet to manage iptables.

Rationale:

Kubelets can automatically manage the required changes to iptables based on how you choose your networking options for the pods. It is recommended to let kubelets manage the changes to iptables. This ensures that the iptables configuration remains in sync with pods networking configuration. Manually configuring iptables with dynamic pod network configuration changes might hamper the communication between pods/containers and to the outside world. You might have iptables rules too restrictive or too open.

Impact:

Kubelet would manage the iptables on the system and keep it in sync. If you are using any other iptables management solution, then there might be some conflicts."
          solution      : "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove the --make-iptables-util-chains argument from the KUBELET_SYSTEM_PODS_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --make-iptables-util-chains argument is set to true."
          reference     : "800-171|3.13.1,800-171|3.13.6,800-53|SC-7(5),CIS_Recommendation|4.2.7,CN-L3|7.1.2.2(c),CSCv6|9,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(5),LEVEL|1A,NESA|T4.5.4,NIAv2|GS7b,NIAv2|NS25,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
          see_also      : "https://workbench.cisecurity.org/files/2968"
          cmd           : "ps -ef | grep kubelet | grep -v grep"
          expect        : "--make-iptables-util-chains=true"
          dont_echo_cmd : YES
        </custom_item>
      </then>

      <else>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : CMD_EXEC
              description : "Check if Kubelet config file is used"
              cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "expect".
              expect      : "--config=/var/lib/kubelet/config.yaml([\\s]|$)"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system      : "Linux"
              type        : FILE_CONTENT_CHECK
              description : "4.2.7 Ensure that the --make-iptables-util-chains argument is set to true"
              info        : "Allow Kubelet to manage iptables.

Rationale:

Kubelets can automatically manage the required changes to iptables based on how you choose your networking options for the pods. It is recommended to let kubelets manage the changes to iptables. This ensures that the iptables configuration remains in sync with pods networking configuration. Manually configuring iptables with dynamic pod network configuration changes might hamper the communication between pods/containers and to the outside world. You might have iptables rules too restrictive or too open.

Impact:

Kubelet would manage the iptables on the system and keep it in sync. If you are using any other iptables management solution, then there might be some conflicts."
              solution    : "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove the --make-iptables-util-chains argument from the KUBELET_SYSTEM_PODS_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --make-iptables-util-chains argument is set to true."
              reference   : "800-171|3.13.1,800-171|3.13.6,800-53|SC-7(5),CIS_Recommendation|4.2.7,CN-L3|7.1.2.2(c),CSCv6|9,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(5),LEVEL|1A,NESA|T4.5.4,NIAv2|GS7b,NIAv2|NS25,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
              see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "file".
              file        : "/var/lib/kubelet/config.yaml"
              regex       : "^[\\s]*makeIPTablesUtilChains[\\s]*:"
              expect      : "^[\\s]*makeIPTablesUtilChains[\\s]*:[\\s]*true"
            </custom_item>
          </then>

          <else>
            <report type:"PASSED">
              description : "4.2.7 Ensure that the --make-iptables-util-chains argument is set to true"
              info        : "Allow Kubelet to manage iptables.

Rationale:

Kubelets can automatically manage the required changes to iptables based on how you choose your networking options for the pods. It is recommended to let kubelets manage the changes to iptables. This ensures that the iptables configuration remains in sync with pods networking configuration. Manually configuring iptables with dynamic pod network configuration changes might hamper the communication between pods/containers and to the outside world. You might have iptables rules too restrictive or too open.

Impact:

Kubelet would manage the iptables on the system and keep it in sync. If you are using any other iptables management solution, then there might be some conflicts."
              solution    : "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove the --make-iptables-util-chains argument from the KUBELET_SYSTEM_PODS_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --make-iptables-util-chains argument is set to true."
              reference   : "800-171|3.13.1,800-171|3.13.6,800-53|SC-7(5),CIS_Recommendation|4.2.7,CN-L3|7.1.2.2(c),CSCv6|9,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(5),LEVEL|1A,NESA|T4.5.4,NIAv2|GS7b,NIAv2|NS25,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
              see_also    : "https://workbench.cisecurity.org/files/2968"
            </report>
          </else>
        </if>
      </else>
    </if>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "4.2.8 Ensure that the --hostname-override argument is not set"
      info          : "Do not override node hostnames.

Rationale:

Overriding hostnames could potentially break TLS setup between the kubelet and the apiserver. Additionally, with overridden hostnames, it becomes increasingly difficult to associate logs with a particular node and process them for security analytics. Hence, you should setup your kubelet nodes with resolvable FQDNs and avoid overriding the hostnames with IPs.

Impact:

Some cloud providers may require this flag to ensure that hostname matches names issued by the cloud provider. In these environments, this recommendation should not apply."
      solution      : "Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove the --hostname-override argument from the KUBELET_SYSTEM_PODS_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, --hostname-override argument is not set."
      reference     : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.2.8,CN-L3|8.1.10.6(d),CSCv6|3,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also      : "https://workbench.cisecurity.org/files/2968"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "^((?!--hostname-override).)*$"
      dont_echo_cmd : YES
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "4.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - cert"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
          expect      : "--tls-cert-file="
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "4.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - cert"
          info          : "Setup TLS connection on the Kubelets.

Rationale:

The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks."
          solution      : "If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the corresponding private key file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameters in KUBELET_CERTIFICATE_ARGS variable.
--tls-cert-file=<path/to/tls-certificate-file> --tls-private-key-file=<path/to/tls-key-file>
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service"
          reference     : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|4.2.10,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
          see_also      : "https://workbench.cisecurity.org/files/2968"
          cmd           : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @TLS_CERT_FILE@ replaced with "/etc/kubernetes/pki/apiserver.crt" in field "expect".
          expect        : "--tls-cert-file=/etc/kubernetes/pki/apiserver.crt([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>
      </then>

      <else>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : CMD_EXEC
              description : "Check if Kubelet config file is used"
              cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "expect".
              expect      : "--config=/var/lib/kubelet/config.yaml([\\s]|$)"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system      : "Linux"
              type        : FILE_CONTENT_CHECK
              description : "4.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - cert"
              info        : "Setup TLS connection on the Kubelets.

Rationale:

The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks."
              solution    : "If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the corresponding private key file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameters in KUBELET_CERTIFICATE_ARGS variable.
--tls-cert-file=<path/to/tls-certificate-file> --tls-private-key-file=<path/to/tls-key-file>
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service"
              reference   : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|4.2.10,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
              see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "file".
              file        : "/var/lib/kubelet/config.yaml"
              regex       : "^[\\s]*tlsCertFile[\\s]*:"
# Note: Variable @TLS_CERT_FILE@ replaced with "/etc/kubernetes/pki/apiserver.crt" in field "expect".
              expect      : "^[\\s]*tlsCertFile[\\s]*:[\\s]*/etc/kubernetes/pki/apiserver.crt"
            </custom_item>
          </then>

          <else>
            <report type:"FAILED">
              description : "4.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - cert"
              info        : "Setup TLS connection on the Kubelets.

Rationale:

The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks."
              solution    : "If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the corresponding private key file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameters in KUBELET_CERTIFICATE_ARGS variable.
--tls-cert-file=<path/to/tls-certificate-file> --tls-private-key-file=<path/to/tls-key-file>
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service"
              reference   : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|4.2.10,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
              see_also    : "https://workbench.cisecurity.org/files/2968"
            </report>
          </else>
        </if>
      </else>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "4.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - key"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @TLS_PRIVATE_KEY_FILE@ replaced with "/etc/kubernetes/pki/apiserver.key" in field "expect".
          expect      : "--tls-private-key-file=/etc/kubernetes/pki/apiserver.key([\\s]|$)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "4.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - key"
          info          : "Setup TLS connection on the Kubelets.

Rationale:

The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks."
          solution      : "If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the corresponding private key file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameters in KUBELET_CERTIFICATE_ARGS variable.
--tls-cert-file=<path/to/tls-certificate-file> --tls-private-key-file=<path/to/tls-key-file>
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service"
          reference     : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|4.2.10,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
          see_also      : "https://workbench.cisecurity.org/files/2968"
          cmd           : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @TLS_PRIVATE_KEY_FILE@ replaced with "/etc/kubernetes/pki/apiserver.key" in field "expect".
          expect        : "--tls-private-key-file=/etc/kubernetes/pki/apiserver.key([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>
      </then>

      <else>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : CMD_EXEC
              description : "Check if Kubelet config file is used"
              cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "expect".
              expect      : "--config=/var/lib/kubelet/config.yaml([\\s]|$)"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system      : "Linux"
              type        : FILE_CONTENT_CHECK
              description : "4.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - key"
              info        : "Setup TLS connection on the Kubelets.

Rationale:

The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks."
              solution    : "If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the corresponding private key file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameters in KUBELET_CERTIFICATE_ARGS variable.
--tls-cert-file=<path/to/tls-certificate-file> --tls-private-key-file=<path/to/tls-key-file>
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service"
              reference   : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|4.2.10,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
              see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "file".
              file        : "/var/lib/kubelet/config.yaml"
              regex       : "^[\\s]*tlsPrivateKeyFile[\\s]*:"
# Note: Variable @TLS_PRIVATE_KEY_FILE@ replaced with "/etc/kubernetes/pki/apiserver.key" in field "expect".
              expect      : "^[\\s]*tlsPrivateKeyFile[\\s]*:[\\s]*/etc/kubernetes/pki/apiserver.key"
            </custom_item>
          </then>

          <else>
            <report type:"FAILED">
              description : "4.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - key"
              info        : "Setup TLS connection on the Kubelets.

Rationale:

The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks."
              solution    : "If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the corresponding private key file.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameters in KUBELET_CERTIFICATE_ARGS variable.
--tls-cert-file=<path/to/tls-certificate-file> --tls-private-key-file=<path/to/tls-key-file>
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service"
              reference   : "800-171|3.5.2,800-53|IA-5(2),CIS_Recommendation|4.2.10,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
              see_also    : "https://workbench.cisecurity.org/files/2968"
            </report>
          </else>
        </if>
      </else>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "4.2.11 Ensure that the --rotate-certificates argument is not set to false"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
          expect      : "--rotate-certificates=true"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "4.2.11 Ensure that the --rotate-certificates argument is not set to false"
          info          : "Enable kubelet client certificate rotation.

Rationale:

The --rotate-certificates setting causes the kubelet to rotate its client certificates by creating new CSRs as its existing credentials expire. This automated periodic rotation ensures that the there is no downtime due to expired certificates and thus addressing availability in the CIA security triad.

Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.

Note: This feature also require the RotateKubeletClientCertificate feature gate to be enabled (which is the default since Kubernetes v1.7)

Impact:

None"
          solution      : "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or remove it altogether to use the default value.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, kubelet client certificate rotation is enabled."
          reference     : "800-171|3.4.3,800-53|CM-3(6),CIS_Recommendation|4.2.11,CN-L3|8.1.10.6(g),CSCv6|14.2,CSCv7|14.4,CSF|PR.IP-1,CSF|PR.IP-3,ISO/IEC-27001|A.10.1.1,ITSG-33|CM-3,LEVEL|1M,NESA|T3.2.3,NESA|T3.3.2,NESA|T7.5.1,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|CM1,NIAv2|CM1a,NIAv2|CM1b,NIAv2|CM1c,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1"
          see_also      : "https://workbench.cisecurity.org/files/2968"
          cmd           : "ps -ef | grep kubelet | grep -v grep"
          expect        : "--rotate-certificates=true"
          dont_echo_cmd : YES
        </custom_item>
      </then>

      <else>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : CMD_EXEC
              description : "Check if Kubelet config file is used"
              cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "expect".
              expect      : "--config=/var/lib/kubelet/config.yaml([\\s]|$)"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system      : "Linux"
              type        : FILE_CONTENT_CHECK
              description : "4.2.11 Ensure that the --rotate-certificates argument is not set to false"
              info        : "Enable kubelet client certificate rotation.

Rationale:

The --rotate-certificates setting causes the kubelet to rotate its client certificates by creating new CSRs as its existing credentials expire. This automated periodic rotation ensures that the there is no downtime due to expired certificates and thus addressing availability in the CIA security triad.

Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.

Note: This feature also require the RotateKubeletClientCertificate feature gate to be enabled (which is the default since Kubernetes v1.7)

Impact:

None"
              solution    : "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or remove it altogether to use the default value.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, kubelet client certificate rotation is enabled."
              reference   : "800-171|3.4.3,800-53|CM-3(6),CIS_Recommendation|4.2.11,CN-L3|8.1.10.6(g),CSCv6|14.2,CSCv7|14.4,CSF|PR.IP-1,CSF|PR.IP-3,ISO/IEC-27001|A.10.1.1,ITSG-33|CM-3,LEVEL|1M,NESA|T3.2.3,NESA|T3.3.2,NESA|T7.5.1,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|CM1,NIAv2|CM1a,NIAv2|CM1b,NIAv2|CM1c,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1"
              see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "file".
              file        : "/var/lib/kubelet/config.yaml"
              regex       : "^[\\s]*rotateCertificates[\\s]*:"
              expect      : "^[\\s]*rotateCertificates[\\s]*:[\\s]*true"
            </custom_item>
          </then>

          <else>
            <report type:"PASSED">
              description : "4.2.11 Ensure that the --rotate-certificates argument is not set to false"
              info        : "Enable kubelet client certificate rotation.

Rationale:

The --rotate-certificates setting causes the kubelet to rotate its client certificates by creating new CSRs as its existing credentials expire. This automated periodic rotation ensures that the there is no downtime due to expired certificates and thus addressing availability in the CIA security triad.

Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.

Note: This feature also require the RotateKubeletClientCertificate feature gate to be enabled (which is the default since Kubernetes v1.7)

Impact:

None"
              solution    : "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or remove it altogether to use the default value.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, kubelet client certificate rotation is enabled."
              reference   : "800-171|3.4.3,800-53|CM-3(6),CIS_Recommendation|4.2.11,CN-L3|8.1.10.6(g),CSCv6|14.2,CSCv7|14.4,CSF|PR.IP-1,CSF|PR.IP-3,ISO/IEC-27001|A.10.1.1,ITSG-33|CM-3,LEVEL|1M,NESA|T3.2.3,NESA|T3.3.2,NESA|T7.5.1,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|CM1,NIAv2|CM1a,NIAv2|CM1b,NIAv2|CM1c,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1"
              see_also    : "https://workbench.cisecurity.org/files/2968"
            </report>
          </else>
        </if>
      </else>
    </if>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "4.2.12 Verify that the RotateKubeletServerCertificate argument is set to true"
      info          : "Enable kubelet server certificate rotation.

Rationale:

RotateKubeletServerCertificate causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad.

Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.

Impact:

None"
      solution      : "Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.

--feature-gates=RotateKubeletServerCertificate=true

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default, kubelet server certificate rotation is disabled."
      reference     : "800-171|3.5.2,800-53|IA-5(1)(g),CIS_Recommendation|4.2.12,CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(1),LEVEL|1M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also      : "https://workbench.cisecurity.org/files/2968"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "RotateKubeletServerCertificate=true"
      dont_echo_cmd : YES
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "4.2.13 Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
          expect      : "--tls-cipher-suites="
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "4.2.13 Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers"
          info          : "Ensure that the Kubelet is configured to only use strong cryptographic ciphers.

Rationale:

TLS ciphers have had a number of known vulnerabilities and weaknesses, which can reduce the protection provided by them. By default Kubernetes supports a number of TLS ciphersuites including some that have security concerns, weakening the protection provided.

Impact:

Kubelet clients that cannot support modern cryptographic ciphers will not be able to make connections to the Kubelet API."
          solution      : "If using a Kubelet config file, edit the file to set TLSCipherSuites: to TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256 or to a subset of these values.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the --tls-cipher-suites parameter as follows, or to a subset of these values.

 --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default the Kubernetes API server supports a wide range of TLS ciphers

Additional Information:

The list chosen above should be fine for modern clients. It's essentially the list from the Mozilla 'Modern cipher' option with the ciphersuites supporting CBC mode removed, as CBC has traditionally had a lot of issues"
          reference     : "800-171|3.13.11,800-53|SC-13.,CIS_Recommendation|4.2.13,CSCv6|3.4,CSCv7|4.5,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|1M,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
          see_also      : "https://workbench.cisecurity.org/files/2968"
          cmd           : "ps -ef | grep kubelet | grep -v grep"
          expect        : "--tls-cipher-suites=((TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305|TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384|TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305|TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_RSA_WITH_AES_256_GCM_SHA384|TLS_RSA_WITH_AES_128_GCM_SHA256)[,]?)+([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>
      </then>

      <else>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : CMD_EXEC
              description : "Check if Kubelet config file is used"
              cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "expect".
              expect      : "--config=/var/lib/kubelet/config.yaml([\\s]|$)"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system      : "Linux"
              type        : FILE_CONTENT_CHECK
              description : "4.2.13 Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers"
              info        : "Ensure that the Kubelet is configured to only use strong cryptographic ciphers.

Rationale:

TLS ciphers have had a number of known vulnerabilities and weaknesses, which can reduce the protection provided by them. By default Kubernetes supports a number of TLS ciphersuites including some that have security concerns, weakening the protection provided.

Impact:

Kubelet clients that cannot support modern cryptographic ciphers will not be able to make connections to the Kubelet API."
              solution    : "If using a Kubelet config file, edit the file to set TLSCipherSuites: to TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256 or to a subset of these values.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the --tls-cipher-suites parameter as follows, or to a subset of these values.

 --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default the Kubernetes API server supports a wide range of TLS ciphers

Additional Information:

The list chosen above should be fine for modern clients. It's essentially the list from the Mozilla 'Modern cipher' option with the ciphersuites supporting CBC mode removed, as CBC has traditionally had a lot of issues"
              reference   : "800-171|3.13.11,800-53|SC-13.,CIS_Recommendation|4.2.13,CSCv6|3.4,CSCv7|4.5,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|1M,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
              see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "file".
              file        : "/var/lib/kubelet/config.yaml"
              regex       : "^[\\s]*TLSCipherSuites[\\s]*:"
              expect      : "^[\\s]*TLSCipherSuites[\\s]*:[\\s]*TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"
            </custom_item>
          </then>

          <else>
            <report type:"FAILED">
              description : "4.2.13 Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers"
              info        : "Ensure that the Kubelet is configured to only use strong cryptographic ciphers.

Rationale:

TLS ciphers have had a number of known vulnerabilities and weaknesses, which can reduce the protection provided by them. By default Kubernetes supports a number of TLS ciphersuites including some that have security concerns, weakening the protection provided.

Impact:

Kubelet clients that cannot support modern cryptographic ciphers will not be able to make connections to the Kubelet API."
              solution    : "If using a Kubelet config file, edit the file to set TLSCipherSuites: to TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256 or to a subset of these values.
If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the --tls-cipher-suites parameter as follows, or to a subset of these values.

 --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256

Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Default Value:

By default the Kubernetes API server supports a wide range of TLS ciphers

Additional Information:

The list chosen above should be fine for modern clients. It's essentially the list from the Mozilla 'Modern cipher' option with the ciphersuites supporting CBC mode removed, as CBC has traditionally had a lot of issues"
              reference   : "800-171|3.13.11,800-53|SC-13.,CIS_Recommendation|4.2.13,CSCv6|3.4,CSCv7|4.5,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|1M,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
              see_also    : "https://workbench.cisecurity.org/files/2968"
            </report>
          </else>
        </if>
      </else>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CHECK
          description : "Check if kubectl exists"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "file".
          file        : "/usr/bin/kubectl"
        </custom_item>
      </condition>

      <then>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check if kubeconfig exists"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "file".
              file        : "/etc/kubernetes/admin.conf"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.1.3 Minimize wildcard use in Roles and ClusterRoles - roles"
              info          : "Kubernetes Roles and ClusterRoles provide access to resources based on sets of objects and actions that can be taken on those objects. It is possible to set either of these to be the wildcard '*' which matches all items.

Use of wildcards is not optimal from a security perspective as it may allow for inadvertent access to be granted when new resources are added to the Kubernetes API either as CRDs or in later versions of the product.

Rationale:

The principle of least privilege recommends that users are provided only the access required for their role and nothing more. The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Where possible replace any use of wildcards in clusterroles and roles with specific objects or actions."
              reference     : "800-171|3.1.5,800-53|AC-6.,CIS_Recommendation|5.1.3,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
              see_also      : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "cmd".
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get roles --kubeconfig /etc/kubernetes/admin.conf --all-namespaces -o yaml"
              expect        : "^.*[\\s]<none>$"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>

            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.1.3 Minimize wildcard use in Roles and ClusterRoles - clusterroles"
              info          : "Kubernetes Roles and ClusterRoles provide access to resources based on sets of objects and actions that can be taken on those objects. It is possible to set either of these to be the wildcard '*' which matches all items.

Use of wildcards is not optimal from a security perspective as it may allow for inadvertent access to be granted when new resources are added to the Kubernetes API either as CRDs or in later versions of the product.

Rationale:

The principle of least privilege recommends that users are provided only the access required for their role and nothing more. The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Where possible replace any use of wildcards in clusterroles and roles with specific objects or actions."
              reference     : "800-171|3.1.5,800-53|AC-6.,CIS_Recommendation|5.1.3,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
              see_also      : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "cmd".
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get clusterroles --kubeconfig /etc/kubernetes/admin.conf -o yaml"
              expect        : "^.*[\\s]<none>$"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.1.3 Minimize wildcard use in Roles and ClusterRoles - roles"
              info          : "Kubernetes Roles and ClusterRoles provide access to resources based on sets of objects and actions that can be taken on those objects. It is possible to set either of these to be the wildcard '*' which matches all items.

Use of wildcards is not optimal from a security perspective as it may allow for inadvertent access to be granted when new resources are added to the Kubernetes API either as CRDs or in later versions of the product.

Rationale:

The principle of least privilege recommends that users are provided only the access required for their role and nothing more. The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Where possible replace any use of wildcards in clusterroles and roles with specific objects or actions."
              reference     : "800-171|3.1.5,800-53|AC-6.,CIS_Recommendation|5.1.3,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
              see_also      : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get roles --all-namespaces -o yaml"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>

            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.1.3 Minimize wildcard use in Roles and ClusterRoles - clusterroles"
              info          : "Kubernetes Roles and ClusterRoles provide access to resources based on sets of objects and actions that can be taken on those objects. It is possible to set either of these to be the wildcard '*' which matches all items.

Use of wildcards is not optimal from a security perspective as it may allow for inadvertent access to be granted when new resources are added to the Kubernetes API either as CRDs or in later versions of the product.

Rationale:

The principle of least privilege recommends that users are provided only the access required for their role and nothing more. The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Where possible replace any use of wildcards in clusterroles and roles with specific objects or actions."
              reference     : "800-171|3.1.5,800-53|AC-6.,CIS_Recommendation|5.1.3,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
              see_also      : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get clusterroles -o yaml"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </else>
        </if>
      </then>
    </if>
  </then>
</if>

</check_type>
