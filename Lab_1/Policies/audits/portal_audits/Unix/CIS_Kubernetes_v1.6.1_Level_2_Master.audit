#
# This script is Copyright (C) 2004-2021 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.1 $
# $Date: 2021/06/17 $
#
# description : This document implements the security configuration as recommended by the
#               CIS Kubernetes Benchmark v1.6.1
#
#<ui_metadata>
#<display_name>CIS Kubernetes Benchmark v1.6.1 L2 Master</display_name>
#<spec>
#  <type>CIS</type>
#  <name>Kubernetes L2 Master</name>
#  <version>1.6.1</version>
#  <link>https://workbench.cisecurity.org/files/2968</link>
#</spec>
#<labels>unix,agent</labels>
#<benchmark_refs>LEVEL,CSCv6,CSCv7,CIS_Recommendation</benchmark_refs>
#<variables>
#  <variable>
#    <name>APISERVER_FILE</name>
#    <default>/etc/kubernetes/manifests/kube-apiserver.yaml</default>
#    <description>API Server Config File</description>
#    <info>The apiserver file controls various parameters that set the behavior of the API server.</info>
#  </variable>
#  <variable>
#    <name>KUBECONFIG</name>
#    <default>/etc/kubernetes/admin.conf</default>
#    <description>Path to the kubectl config</description>
#    <info>The kubeconfig file controls various parameters for connecting to the API server.</info>
#  </variable>
#  <variable>
#    <name>AUDIT_POLICY_FILE</name>
#    <default>/etc/kubernetes/kubernetes-audit-policy.yml</default>
#    <description>Path to the kubernetes audit file</description>
#    <info>The audit policy file controls various parameters that set the audit logging policy.</info>
#  </variable>
#  <variable>
#    <name>KUBECTL_PATH</name>
#    <default>/usr/bin</default>
#    <description>Path to the kubectl binary</description>
#    <info>This is the directory where the kubectl binary is located.</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<custom_item>
  system      : "Linux"
  type        : PROCESS_CHECK
  description : "CIS_Kubernetes_v1.6.1_Level_2_Master.audit from CIS Kubernetes Benchmark v1.6.1"
  info        : "NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  reference   : "800-171|3.4.2,800-53|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6b.,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2968"
  name        : "kubelet"
  status      : ON
  severity    : MEDIUM
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : PROCESS_CHECK
      description : "Check if kubelet is running"
      name        : "kubelet"
      status      : ON
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "Check if this is a Docker Vessel/Host"
      cmd         : "/usr/bin/docker info"
      expect      : "Containers"
    </custom_item>
  </condition>

  <then>
    <if>
      <condition type:"AND">
        <custom_item>
          type        : PROCESS_CHECK
          description : "Check if Controller Manager is running"
          name        : "kube-controller"
          status      : ON
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.3.6 Ensure that the RotateKubeletServerCertificate argument is set to true"
          info          : "Enable kubelet server certificate rotation on controller-manager.

Rationale:

RotateKubeletServerCertificate causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad.

Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.

Impact:

None"
          solution      : "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml on the master node and set the --feature-gates parameter to include RotateKubeletServerCertificate=true.

--feature-gates=RotateKubeletServerCertificate=true

Default Value:

By default, RotateKubeletServerCertificate is set to 'true' this recommendation verifies that it has not been disabled."
          reference     : "800-171|3.4.3,800-53|CM-3(6),CIS_Recommendation|1.3.6,CN-L3|8.1.10.6(g),CSCv6|14.2,CSCv7|14.4,CSF|PR.IP-1,CSF|PR.IP-3,ISO/IEC-27001|A.10.1.1,ITSG-33|CM-3,LEVEL|2A,NESA|T3.2.3,NESA|T3.3.2,NESA|T7.5.1,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|CM1,NIAv2|CM1a,NIAv2|CM1b,NIAv2|CM1c,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1"
          see_also      : "https://workbench.cisecurity.org/files/2968"
          cmd           : "ps -ef | grep kube-controller-manager | grep -v grep"
          expect        : "--feature-gates=[A-z,=]*RotateKubeletServerCertificate=true[A-z,=]*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type          : CMD_EXEC
          description   : "Check if API Server is running"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
          expect        : "etcd[2]?[\\s]"
          dont_echo_cmd : YES
        </custom_item>
      </condition>

      <then>
        <report type:"WARNING">
          description : "2.7 Ensure that a unique Certificate Authority is used for etcd"
          info        : "Use a different certificate authority for etcd from the one used for Kubernetes.

Rationale:

etcd is a highly available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. Its access should be restricted to specifically designated clients and peers only.

Authentication to etcd is based on whether the certificate presented was issued by a trusted certificate authority. There is no checking of certificate attributes such as common name or subject alternative name. As such, if any attackers were able to gain access to any certificate issued by the trusted certificate authority, they would be able to gain full access to the etcd database.

Impact:

Additional management of the certificates and keys for the dedicated certificate authority will be required.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Follow the etcd documentation and create a dedicated certificate authority setup for the etcd service.
Then, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master node and set the below parameter.

--trusted-ca-file=</path/to/ca-file>

Default Value:

By default, no etcd certificate is created and used."
          reference   : "CSCv6|9,CSCv7|9,LEVEL|2M,CIS_Recommendation|2.7"
          see_also    : "https://workbench.cisecurity.org/files/2968"
        </report>

        <if>
          <condition type:"AND">
            <custom_item>
              type          : CMD_EXEC
              description   : "3.2.2 Ensure that the audit policy covers key security concerns"
              cmd           : "ps -ef | grep kube-apiserver | grep -v grep"
# Note: Variable @AUDIT_POLICY_FILE@ replaced with "/etc/kubernetes/kubernetes-audit-policy.yml" in field "expect".
              expect        : "--audit-policy-file=/etc/kubernetes/kubernetes-audit-policy.yml([\\s]|$)"
              dont_echo_cmd : YES
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system      : "Linux"
              type        : FILE_CONTENT_CHECK
              description : "3.2.2 Ensure that the audit policy covers key security concerns"
              info        : "Ensure that the audit policy created for the cluster covers key security concerns.

Rationale:

Security audit logs should cover access and modification of key resources in the cluster, to enable them to form an effective part of a security environment.

Impact:

Increasing audit logging will consume resources on the nodes or other log destination.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution    : "Consider modification of the audit policy in use on the cluster to include these items, at a minimum.

Default Value:

By default Kubernetes clusters do not log audit information."
              reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-2.,CIS_Recommendation|3.2.2,CN-L3|8.1.4.3(a),CSCv6|14.6,CSCv7|14.9,CSF|PR.PT-1,ITSG-33|AU-2,LEVEL|2M,NESA|M1.2.2,NESA|M5.5.1,NIAv2|AM7,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|SS30,NIAv2|VL8,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
              see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @AUDIT_POLICY_FILE@ replaced with "/etc/kubernetes/kubernetes-audit-policy.yml" in field "file".
              file        : "/etc/kubernetes/kubernetes-audit-policy.yml"
              regex       : ".*"
              expect      : "$MANUAL_REVIEW^"
              severity    : MEDIUM
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "3.2.2 Ensure that the audit policy covers key security concerns"
              info          : "Ensure that the audit policy created for the cluster covers key security concerns.

Rationale:

Security audit logs should cover access and modification of key resources in the cluster, to enable them to form an effective part of a security environment.

Impact:

Increasing audit logging will consume resources on the nodes or other log destination."
              solution      : "Consider modification of the audit policy in use on the cluster to include these items, at a minimum.

Default Value:

By default Kubernetes clusters do not log audit information."
              reference     : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,CIS_Recommendation|3.2.2,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|14.6,CSCv7|14.9,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|2M,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
              see_also      : "https://workbench.cisecurity.org/files/2968"
              cmd           : "ps -ef | grep kube-apiserver | grep -v grep"
# Note: Variable @AUDIT_POLICY_FILE@ replaced with "/etc/kubernetes/kubernetes-audit-policy.yml" in field "expect".
              expect        : "--audit-policy-file=/etc/kubernetes/kubernetes-audit-policy.yml([\\s]|$)"
              dont_echo_cmd : YES
            </custom_item>
          </else>
        </if>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CHECK
          description : "Check if kubectl exists"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "file".
          file        : "/usr/bin/kubectl"
        </custom_item>
      </condition>

      <then>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check if kubeconfig exists"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "file".
              file        : "/etc/kubernetes/admin.conf"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.2.6 Minimize the admission of root containers"
              info          : "Do not generally permit containers to be run as the root user.

Rationale:

Containers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout.

Ideally, all containers should run as a defined non-UID 0 user.

There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container.

If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.

Impact:

Pods with containers which run as the root user will not be permitted."
              solution      : "Create a PSP as described in the Kubernetes documentation, ensuring that the .spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of UIDs not including 0.

Default Value:

By default, PodSecurityPolicies are not defined."
              reference     : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|5.2.6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "cmd".
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get psp --kubeconfig /etc/kubernetes/admin.conf -o=custom-columns=name:.metadata.name,rule:.spec.runAsUser.rule,min:.spec.runAsUser.ranges.min"
              expect        : "^.*[\\s](MustRunAs[\\s]+[1-9][0-9]*|MustRunAsNonRoot[\\s]+<none>)$"
              dont_echo_cmd : YES
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.2.6 Minimize the admission of root containers"
              info          : "Do not generally permit containers to be run as the root user.

Rationale:

Containers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout.

Ideally, all containers should run as a defined non-UID 0 user.

There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container.

If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.

Impact:

Pods with containers which run as the root user will not be permitted."
              solution      : "Create a PSP as described in the Kubernetes documentation, ensuring that the .spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of UIDs not including 0.

Default Value:

By default, PodSecurityPolicies are not defined."
              reference     : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|5.2.6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get psp -o=custom-columns=name:.metadata.name,rule:.spec.runAsUser.rule,min:.spec.runAsUser.ranges.min"
              expect        : "^.*[\\s](MustRunAs[\\s]+[1-9][0-9]*|MustRunAsNonRoot[\\s]+<none>)$"
              dont_echo_cmd : YES
            </custom_item>
          </else>
        </if>

        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check if kubeconfig exists"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "file".
              file        : "/etc/kubernetes/admin.conf"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.2.9 Minimize the admission of containers with capabilities assigned"
              info          : "Do not generally permit containers with capabilities

Rationale:

Containers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user.

In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.

Impact:

Pods with containers require capabilities to operate will not be permitted.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Review the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.

Default Value:

By default, PodSecurityPolicies are not defined."
              reference     : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|5.2.9,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "cmd".
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get psp --kubeconfig /etc/kubernetes/admin.conf -o=custom-columns=name:.metadata.name,requiredDropCapabilities:.spec.requiredDropCapabilities"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.2.9 Minimize the admission of containers with capabilities assigned"
              info          : "Do not generally permit containers with capabilities

Rationale:

Containers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user.

In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.

Impact:

Pods with containers require capabilities to operate will not be permitted.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Review the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.

Default Value:

By default, PodSecurityPolicies are not defined."
              reference     : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|5.2.9,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get psp -o=custom-columns=name:.metadata.name,requiredDropCapabilities:.spec.requiredDropCapabilities"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </else>
        </if>

        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check if kubeconfig exists"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "file".
              file        : "/etc/kubernetes/admin.conf"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.3.2 Ensure that all Namespaces have Network Policies defined"
              info          : "Use network policies to isolate traffic in your cluster network.

Rationale:

Running different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. A network policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints.

Network Policies are namespace scoped. When a network policy is introduced to a given namespace, all traffic not allowed by the policy is denied. However, if there are no network policies in a namespace all traffic will be allowed into and out of the pods in that namespace.

Impact:

Once network policies are in use within a given namespace, traffic not explicitly allowed by a network policy will be denied. As such it is important to ensure that, when introducing network policies, legitimate traffic is not blocked.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Follow the documentation and create NetworkPolicy objects as you need them.

Default Value:

By default, network policies are not created."
              reference     : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(21),CIS_Recommendation|5.3.2,CN-L3|8.1.10.6(j),CSCv6|14.1,CSCv7|14.1,CSCv7|14.2,CSF|PR.AC-5,CSF|PR.DS-5,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|2M,NESA|T4.5.3,NIAv2|VL6,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
              see_also      : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "cmd".
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get networkpolicy --namespace=kube-system --kubeconfig /etc/kubernetes/admin.conf"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.3.2 Ensure that all Namespaces have Network Policies defined"
              info          : "Use network policies to isolate traffic in your cluster network.

Rationale:

Running different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. A network policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints.

Network Policies are namespace scoped. When a network policy is introduced to a given namespace, all traffic not allowed by the policy is denied. However, if there are no network policies in a namespace all traffic will be allowed into and out of the pods in that namespace.

Impact:

Once network policies are in use within a given namespace, traffic not explicitly allowed by a network policy will be denied. As such it is important to ensure that, when introducing network policies, legitimate traffic is not blocked.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Follow the documentation and create NetworkPolicy objects as you need them.

Default Value:

By default, network policies are not created."
              reference     : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(21),CIS_Recommendation|5.3.2,CN-L3|8.1.10.6(j),CSCv6|14.1,CSCv7|14.1,CSCv7|14.2,CSF|PR.AC-5,CSF|PR.DS-5,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|2M,NESA|T4.5.3,NIAv2|VL6,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
              see_also      : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get networkpolicy --namespace=kube-system"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </else>
        </if>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CHECK
          description : "Check if kubeconfig exists"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "file".
          file        : "/etc/kubernetes/admin.conf"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "5.4.1 Prefer using secrets as files over secrets as environment variables"
          info          : "Kubernetes supports mounting secrets as data volumes or as environment variables. Minimize the use of environment variable secrets.

Rationale:

It is reasonably common for application code to log out its environment (particularly in the event of an error). This will include any secret values passed in as environment variables, so secrets can easily be exposed to any user or entity who has access to the logs.

Impact:

Application code which expects to read secrets in the form of environment variables would need modification"
          solution      : "If possible, rewrite application code to read secrets from mounted secret files, rather than from environment variables.

Default Value:

By default, secrets are not defined"
          reference     : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|5.4.1,CN-L3|8.1.10.6(d),CSCv7|14.4,CSCv7|14.8,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "cmd".
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
          cmd           : "/usr/bin/kubectl get all --kubeconfig /etc/kubernetes/admin.conf -o jsonpath='{range .items[?(@..secretKeyRef)]} {.kind} {.metadata.name} {\"\"}{end}' -A"
          expect        : "^.*[\\s]$"
          dont_echo_cmd : YES
        </custom_item>
      </then>

      <else>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "5.4.1 Prefer using secrets as files over secrets as environment variables"
          info          : "Kubernetes supports mounting secrets as data volumes or as environment variables. Minimize the use of environment variable secrets.

Rationale:

It is reasonably common for application code to log out its environment (particularly in the event of an error). This will include any secret values passed in as environment variables, so secrets can easily be exposed to any user or entity who has access to the logs.

Impact:

Application code which expects to read secrets in the form of environment variables would need modification"
          solution      : "If possible, rewrite application code to read secrets from mounted secret files, rather than from environment variables.

Default Value:

By default, secrets are not defined"
          reference     : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|5.4.1,CN-L3|8.1.10.6(d),CSCv7|14.4,CSCv7|14.8,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
          cmd           : "/usr/bin/kubectl get all -o jsonpath='{range .items[?(@..secretKeyRef)]} {.kind} {.metadata.name} {\"\"}{end}' -A"
          expect        : "^.*[\\s]false$"
          dont_echo_cmd : YES
        </custom_item>
      </else>
    </if>

    <report type:"WARNING">
      description : "5.4.2 Consider external secret storage"
      info        : "Consider the use of an external secrets storage and management system, instead of using Kubernetes Secrets directly, if you have more complex secret management needs. Ensure the solution requires authentication to access secrets, has auditing of access to and use of secrets, and encrypts secrets. Some solutions also make it easier to rotate secrets.

Rationale:

Kubernetes supports secrets as first-class objects, but care needs to be taken to ensure that access to secrets is carefully limited. Using an external secrets provider can ease the management of access to secrets, especially where secrests are used across both Kubernetes and non-Kubernetes environments.

Impact:

None

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Refer to the secrets management options offered by your cloud provider or a third-party secrets management solution.

Default Value:

By default, no external secret management is configured."
      reference   : "CSCv7|14.8,LEVEL|2M,CIS_Recommendation|5.4.2"
      see_also    : "https://workbench.cisecurity.org/files/2968"
    </report>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "5.7.2 Ensure that the seccomp profile is set to docker/default in your pod definitions"
      info        : "Enable docker/default seccomp profile in your pod definitions.

Rationale:

Seccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.

Impact:

If the docker/default seccomp profile is too restrictive for you, you would have to create/manage your own seccomp profiles. Also, you need to enable all alpha features for this to work. There is no individual switch to turn on this feature."
      solution    : "Seccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing '--feature-gates=AllAlpha=true' argument.
Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to '--feature-gates=AllAlpha=true'

KUBE_API_ARGS='--feature-gates=AllAlpha=true'

Based on your system, restart the kube-apiserver service. For example:

systemctl restart kube-apiserver.service

Use annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:

apiVersion: v1
kind: Pod
metadata:
  name: trustworthy-pod
  annotations:
    seccomp.security.alpha.kubernetes.io/pod: docker/default
spec:
  containers:
    - name: trustworthy-container
      image: sotrustworthy:latest

Default Value:

By default, seccomp profile is set to unconfined which means that no seccomp profiles are enabled."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|5.7.2,CN-L3|8.1.10.6(d),CSCv6|5,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @APISERVER_FILE@ replaced with "/etc/kubernetes/manifests/kube-apiserver.yaml" in field "file".
      file        : "/etc/kubernetes/manifests/kube-apiserver.yaml"
      regex       : "seccomp"
      expect      : "seccomp.security.alpha.kubernetes.io/pod[\\s]*:[\\s]*docker/default"
    </custom_item>

    <report type:"WARNING">
      description : "5.7.3 Apply Security Context to Your Pods and Containers"
      info        : "Apply Security Context to Your Pods and Containers

Rationale:

A security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.

Impact:

If you incorrectly apply security contexts, you may have trouble running the pods.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.

Default Value:

By default, no security contexts are automatically applied to pods."
      reference   : "CSCv6|3,LEVEL|2M,CIS_Recommendation|5.7.3"
      see_also    : "https://workbench.cisecurity.org/files/2968"
    </report>

    <report type:"WARNING">
      description : "5.5.1 Configure Image Provenance using ImagePolicyWebhook admission controller"
      info        : "Configure Image Provenance for your deployment.

Rationale:

Kubernetes supports plugging in provenance rules to accept or reject the images in your deployments. You could configure such rules to ensure that only approved images are deployed in the cluster.

Impact:

You need to regularly maintain your provenance configuration based on container image updates.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Follow the Kubernetes documentation and setup image provenance.

Default Value:

By default, image provenance is not set."
      reference   : "CSCv6|18,LEVEL|2M,CIS_Recommendation|5.5.1"
      see_also    : "https://workbench.cisecurity.org/files/2968"
    </report>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CHECK
          description : "Check if kubectl exists"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "file".
          file        : "/usr/bin/kubectl"
        </custom_item>
      </condition>

      <then>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check if kubeconfig exists"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "file".
              file        : "/etc/kubernetes/admin.conf"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.7.4 The default namespace should not be used"
              info          : "Kubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.

Rationale:

Resources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.

Impact:

None

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace.

Default Value:

Unless a namespace is specific on object creation, the default namespace will be used"
              reference     : "800-171|3.1.5,800-53|AC-6.,CIS_Recommendation|5.7.4,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|2M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
              see_also      : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "cmd".
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get all --kubeconfig /etc/kubernetes/admin.conf"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.7.4 The default namespace should not be used"
              info          : "Kubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.

Rationale:

Resources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.

Impact:

None

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace.

Default Value:

Unless a namespace is specific on object creation, the default namespace will be used"
              reference     : "800-171|3.1.5,800-53|AC-6.,CIS_Recommendation|5.7.4,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|2M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
              see_also      : "https://workbench.cisecurity.org/files/2968"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get all"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </else>
        </if>
      </then>
    </if>
  </then>
</if>

</check_type>
