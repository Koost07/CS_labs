#
# This script is Copyright (C) 2004-2021 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
#
# $Revision: 1.1 $
# $Date: 2021/06/17 $
#
# description	: CIS Microsoft Azure Foundations v1.3.0 audit
#
#<ui_metadata>
#<display_name>CIS Microsoft Azure Foundations v1.3.0 L2</display_name>
#<spec>
#  <type>CIS</type>
#  <name>CIS Microsoft Azure Foundations v1.3.0 L2</name>
#  <version>1.3.0</version>
#  <link>https://workbench.cisecurity.org/files/3131</link>
#</spec>
#<labels>microsoft,azure,cloud</labels>
#<benchmark_refs>CSCv7,LEVEL,CIS_Recommendation</benchmark_refs>
#</ui_metadata>

<check_type:"microsoft_azure">

<custom_item>
  description    : "1.2 Ensure that multi-factor authentication is enabled for all non-privileged users - List Users"
  info           : "Enable multi-factor authentication for all non-privileged users.

Rationale:

Multi-factor authentication requires an individual to present a minimum of two separate forms of authentication before access is granted. Multi-factor authentication provides additional assurance that the individual attempting to gain access is who they claim to be. With multi-factor authentication, an attacker would need to compromise at least two different authentication mechanisms, increasing the difficulty of compromise and thus reducing the risk.

Impact:

Users would require two forms of authentication before any action is granted. Also, this requires an overhead for managing dual forms of authentication.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Follow Microsoft Azure documentation and setup multi-factor authentication in your environment.
https://docs.microsoft.com/en-us/azure/active-directory/authentication/tutorial-enable-azure-mfa

Default Value:

By default, multi-factor authentication is disabled for all users."
  reference      : "800-171|3.5.1,800-53|IA-2.,CIS_Recommendation|1.2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.3,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|2M,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listUsers"
  json_transform : '.[]|.id as $id|.displayName as $dn|.userPrincipalName as $upn|"ID: \($id)"+" User Principal Name: \($upn)"+" Display Name: \($dn)"'
  regex          : ".+"
  not_expect     : ".+"
  severity       : MEDIUM
</custom_item>

<custom_item>
  description    : "1.2 Ensure that multi-factor authentication is enabled for all non-privileged users - Role Definitions"
  info           : "Enable multi-factor authentication for all non-privileged users.

Rationale:

Multi-factor authentication requires an individual to present a minimum of two separate forms of authentication before access is granted. Multi-factor authentication provides additional assurance that the individual attempting to gain access is who they claim to be. With multi-factor authentication, an attacker would need to compromise at least two different authentication mechanisms, increasing the difficulty of compromise and thus reducing the risk.

Impact:

Users would require two forms of authentication before any action is granted. Also, this requires an overhead for managing dual forms of authentication.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Follow Microsoft Azure documentation and setup multi-factor authentication in your environment.
https://docs.microsoft.com/en-us/azure/active-directory/authentication/tutorial-enable-azure-mfa

Default Value:

By default, multi-factor authentication is disabled for all users."
  reference      : "800-171|3.5.1,800-53|IA-2.,CIS_Recommendation|1.2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.3,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|2M,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listRoleDefinitions"
  json_transform : '.[]|.value[]|select((.properties.roleName == "Owner") or (.properties.roleName == "Admin") or (.properties.roleName == "*contributor"))|"Name: \(.name)"+" Role Name: \(.properties.roleName)"'
  regex          : ".+"
  not_expect     : ".+"
  severity       : MEDIUM
</custom_item>

<custom_item>
  description    : "1.2 Ensure that multi-factor authentication is enabled for all non-privileged users - Role Assignments"
  info           : "Enable multi-factor authentication for all non-privileged users.

Rationale:

Multi-factor authentication requires an individual to present a minimum of two separate forms of authentication before access is granted. Multi-factor authentication provides additional assurance that the individual attempting to gain access is who they claim to be. With multi-factor authentication, an attacker would need to compromise at least two different authentication mechanisms, increasing the difficulty of compromise and thus reducing the risk.

Impact:

Users would require two forms of authentication before any action is granted. Also, this requires an overhead for managing dual forms of authentication.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Follow Microsoft Azure documentation and setup multi-factor authentication in your environment.
https://docs.microsoft.com/en-us/azure/active-directory/authentication/tutorial-enable-azure-mfa

Default Value:

By default, multi-factor authentication is disabled for all users."
  reference      : "800-171|3.5.1,800-53|IA-2.,CIS_Recommendation|1.2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.3,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|2M,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listRoleAssignments"
  json_transform : '.[]|.value[]|"Name: \(.name)"+" Role Definition ID: \(.properties.roleDefinitionId)" + " Principal ID: \(.properties.principalId)"+" Principal Type: \(.properties.principalType)"'
  regex          : ".+"
  not_expect     : ".+"
  severity       : MEDIUM
</custom_item>

<report type:"WARNING">
  description : "1.4 Ensure that 'Allow users to remember multi-factor authentication on devices they trust' is 'Disabled'"
  info        : "Do not allow users to remember multi-factor authentication on devices.

Rationale:

Remembering Multi-Factor Authentication(MFA) for devices and browsers allows users to have the option to by-pass MFA for a set number of days after performing a successful sign-in using MFA. This can enhance usability by minimizing the number of times a user may need to perform two-step verification on the same device. However, if an account or device is compromised, remembering MFA for trusted devices may affect security. Hence, it is recommended that users not be allowed to bypass MFA.

Impact:

For every login attempt, the user will be required to perform multi-factor authentication.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to Users

Go to All Users

Click on Multi-Factor Authentication button on the top bar

Click on service settings

Disable Allow users to remember multi-factor authentication on devices they trust

Default Value:

By default, 'Allow users to remember multi-factor authentication on devices they trust' is disabled."
  reference   : "CSCv7|16.3,LEVEL|2M,CIS_Recommendation|1.4"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.8 Ensure that 'Notify all admins when other admins reset their password?' is set to 'Yes'"
  info        : "Ensure that all administrators are notified if any other administrator resets their password.

Rationale:

Administrator accounts are sensitive. Any password reset activity notification, when sent to all administrators, ensures that all administrators can passively confirm if such a reset is a common pattern within their group. For example, if all administrators change their password every 30 days, any password reset activity before that may require administrator(s) to evaluate any unusual activity and confirm its origin.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to Users

Go to Password reset

Go to Notification

Set Notify all admins when other admins reset their password? to Yes



Default Value:

By default, 'Notify all admins when other admins reset their password?' is set to 'No'."
  reference   : "CSCv7|4,LEVEL|2M,CIS_Recommendation|1.8"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.9 Ensure that 'Users can consent to apps accessing company data on their behalf' is set to 'No'"
  info        : "Require administrators to provide consent for the apps before use.

Rationale:

Unless Azure Active Directory is running as an identity provider for third-party applications, do not allow users to use their identity outside of the cloud environment. User profiles contain private information such as phone numbers and email addresses which could then be sold off to other third parties without requiring any further consent from the user.

Impact:

It might be an additional request that administrators need to fulfill quite often.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console

Go to Azure Active Directory

Go to Users

Go to User settings

Click on Manage how end users launch and view their applications

Set Users can consent to apps accessing company data on their behalf to No

Default Value:

By default, 'Users can consent to apps accessing company data on their behalf' is set to 'Yes'."
  reference   : "CSCv7|16,LEVEL|2M,CIS_Recommendation|1.9"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.10 Ensure that 'Users can add gallery apps to their Access Panel' is set to 'No'"
  info        : "Require administrators to provide consent for the apps before use.

Rationale:

Unless Azure Active Directory is running as an identity provider for third-party applications, do not allow users to use their identity outside of your cloud environment. User profiles contain private information such as phone numbers and email addresses which could then be sold off to other third parties without requiring any further consent from the user.

Impact:

It might be an additional request that administrators need to fulfill quite often.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to Users

Go to User settings

Click on Manage how end users launch and view their applications

Set Users can add gallery apps to their Access Panel to No

Default Value:

By default, 'Users can add gallery apps to their Access Panel' is set to 'No'."
  reference   : "CSCv7|2,LEVEL|2M,CIS_Recommendation|1.10"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.11 Ensure that 'Users can register applications' is set to 'No'"
  info        : "Require administrators to register third-party applications.

Rationale:

It is recommended to let administrator register custom-developed applications. This ensures that the application undergoes a security review before exposing active directory data to it.

Impact:

This might create additional requests that administrators need to fulfill quite often.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to Users

Go to User settings

Set Users can register applications to No

Default Value:

By default, Users can register applications is set to Yes."
  reference   : "CSCv7|2,LEVEL|2M,CIS_Recommendation|1.11"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.12 Ensure that 'Guest user permissions are limited' is set to 'Yes'"
  info        : "Limit guest user permissions.

Rationale:

Limiting guest access ensures that guest accounts do not have permission for certain directory tasks, such as enumerating users, groups or other directory resources, and cannot be assigned to administrative roles in your directory. If guest access in not limited, they have the same access to directory data as regular users.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to External Identities

Go to External collaboration settings

Set Guest users permissions are limited to Yes

Default Value:

By default, Guest users permissions are limited is set to Yes."
  reference   : "CSCv7|16,LEVEL|2M,CIS_Recommendation|1.12"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.13 Ensure that 'Members can invite' is set to 'No'"
  info        : "Restrict invitations to administrators only.

Rationale:

Restricting invitations to administrators ensures that only authorized accounts have access to cloud resources. This helps to maintain 'Need to Know' permissions and prevents inadvertent access to data.

By default the setting Admins and users in the guest inviter role can invite is set to yes. This will allow you to use the inviter role to control who will be able to invite guests to the tenant.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to External Identities

Go to External collaboration settings

Set Members can invite to No

Default Value:

By default, Members can invite is set to Yes."
  reference   : "CSCv7|14,CSCv7|16,LEVEL|2M,CIS_Recommendation|1.13"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.14 Ensure that 'Guests can invite' is set to 'No'"
  info        : "Restrict guest being able to invite other guests to collaborate with your organization.

Rationale:

Restricting invitations to administrators ensures that only authorized accounts have access to cloud resources. This helps to maintain 'Need to Know' permissions and prevents inadvertent access to data.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to External Identities

Go to External collaboration settings

Set Guests can invite to No

Default Value:

By default, Guests can invite is set to Yes."
  reference   : "CSCv7|14,CSCv7|16,LEVEL|2M,CIS_Recommendation|1.14"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.16 Ensure that 'Restrict user ability to access groups features in the Access Pane' is set to 'No'"
  info        : "Restrict group creation to administrators only.

Rationale:

Self-service group management enables users to create and manage security groups or Office 365 groups in Azure Active Directory (Azure AD). Unless a business requires this day-to-day delegation for some users, self-service group management should be disabled.

Impact:

Enabling this setting could create a number of request that would need to me managed by administrators.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to Groups

Go to General in setting

Ensure that Restrict user ability to access groups features in the Access Pane is set to No

Default Value:

By default, Restrict user ability to access groups features in the Access Pane is set to No."
  reference   : "CSCv7|16,LEVEL|2M,CIS_Recommendation|1.16"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.17 Ensure that 'Users can create security groups in Azure Portals' is set to 'No'"
  info        : "Restrict security group creation to administrators only.

Rationale:

When creating security groups is enabled, all users in the directory are allowed to create new security groups and add members to those groups. Unless a business requires this day-to-day delegation, security group creation should be restricted to administrators only.

Impact:

Enabling this setting could create a number of request that would need to be managed by an administrator.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to Groups

Go to General in setting

Set Users can create security groups in Azure Portals to No



Default Value:

By default, Users can create security groups is set to Yes."
  reference   : "CSCv7|16,LEVEL|2M,CIS_Recommendation|1.17"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.18 Ensure that 'Owners can manage group membership requests in the Access Panel' is set to 'No'"
  info        : "Restrict security group management to administrators only.

Rationale:

Restricting security group management to administrators only prohibits users from making changes to security groups. This ensures that security groups are appropriately managed and their management is not delegated to non-administrators.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to Groups

Go to General in settings

Set Owners can manage group membership requests in the Access Panel' to No'

Default Value:

By default, Owners can manage group membership requests in the Access Panel is set to No."
  reference   : "CSCv7|16,LEVEL|2M,CIS_Recommendation|1.18"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.19 Ensure that 'Users can create Microsoft 365 groups in Azure Portals' is set to 'No'"
  info        : "Restrict Microsoft 365 group creation to administrators only.

Rationale:

Restricting Microsoft 365 group creation to administrators only ensures that creation of Microsoft 365 groups is controlled by the administrator. Appropriate groups should be created and managed by the administrator and group creation rights should not be delegated to any other user.

Impact:

Enabling this setting could create a number of request that would need to be managed by an administrator.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to Groups

Go to General in setting

Set Users can create Microsoft 365 groups in Azure Portals to No

Default Value:

By default, Users can create Microsoft 365 groups in Azure Portals is set to Yes."
  reference   : "CSCv7|16,LEVEL|2M,CIS_Recommendation|1.19"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.21 Ensure that no custom subscription owner roles are created - Assignable Scope"
  info        : "Subscription ownership should not include permission to create custom owner roles. The principle of least privilege should be followed and only necessary privileges should be assigned instead of allowing full administrative access.

Rationale:

Classic subscription admin roles offer basic access management and include Account Administrator, Service Administrator, and Co-Administrators. It is recommended the least necessary permissions be given initially. Permissions can be added as needed by the account holder. This ensures the account holder cannot perform actions which were not intended.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Using Azure Command Line Interface 2.0

az role definition list

Check for entries with assignableScope of / or a subscription, and an action of *
Verify the usage and impact of removing the role identified

az role definition delete --name 'rolename'

Default Value:

By default, no custom owner roles are created."
  reference   : "CSCv7|16,CSCv7|4,LEVEL|2A,CIS_Recommendation|1.21"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.21 Ensure that no custom subscription owner roles are created - Action Types"
  info        : "Subscription ownership should not include permission to create custom owner roles. The principle of least privilege should be followed and only necessary privileges should be assigned instead of allowing full administrative access.

Rationale:

Classic subscription admin roles offer basic access management and include Account Administrator, Service Administrator, and Co-Administrators. It is recommended the least necessary permissions be given initially. Permissions can be added as needed by the account holder. This ensures the account holder cannot perform actions which were not intended.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Using Azure Command Line Interface 2.0

az role definition list

Check for entries with assignableScope of / or a subscription, and an action of *
Verify the usage and impact of removing the role identified

az role definition delete --name 'rolename'

Default Value:

By default, no custom owner roles are created."
  reference   : "CSCv7|16,CSCv7|4,LEVEL|2A,CIS_Recommendation|1.21"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<custom_item>
  description    : "1.23 Ensure Custom Role is assigned for Administering Resource Locks - Role"
  info           : "Resource locking is a powerful protection mechanism that can prevent inadvertent modification/deletion of resources within Azure subscriptions/Resource Groups and is a recommended NIST configuration.

Rationale:

Given the resource lock functionality is outside of standard Role Based Access Control(RBAC), it would be prudent to create a resource lock administrator role to prevent inadvertent unlocking of resources.

Impact:

By adding this role is you can have specific permissions granted for managing just resource locks rather than needing to provide the wide owner or contributor role reducing the risk of the user being able to do unintentional damage."
  solution       : "From Azure Console

In the Azure portal, open a subscription or resource group where you want the custom role to be assignable.

Select Access control (IAM)

Click Add

Select Add custom role'.

In the Custom Role Name field enter Resource Lock Administrator

In the Description field enter Can Administer Resource Locks

For Baseline permissions select Start from scratch

Click next

In the Permissions tab select Add permissions

in the Search for a permission box, type in Microsoft.Authorization/locks to search for permissions.

Select the check box next to the permission called Microsoft.Authorization/locks

click add

Click Review+create

Click Create

Assign the newly created role to the appropriate user.
Using PowerShell:
Below is a power shell definition for a resource lock administrator role created at an Azure Management group level

Import-Module Az.Accounts
Connect-AzAccount

$role = Get-AzRoleDefinition 'User Access Administrator'
$role.Id = $null
$role.Name = 'Resource Lock Administrator'
$role.Description = 'Can Administer Resource Locks'
$role.Actions.Clear()
$role.Actions.Add('Microsoft.Authorization/locks/*')
$role.AssignableScopes.Clear()

* Scope at the Management group level Management group

$role.AssignableScopes.Add('/providers/Microsoft.Management/managementGroups/MG-Name')

New-AzRoleDefinition -Role $role
Get-AzureRmRoleDefinition 'Resource Lock Administrator'"
  reference      : "800-171|3.5.1,800-53|IA-2.,CIS_Recommendation|1.23,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|14.6,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|2M,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listRoleDefinitions"
  json_transform : '.[]|.subscriptionId as $id|"ID: \($id)" + " Role Name: \(.value[].properties.roleName)"'
  expect         : "Role Name: Resource Lock Administrator"
</custom_item>

<custom_item>
  description    : "1.23 Ensure Custom Role is assigned for Administering Resource Locks - Permissions"
  info           : "Resource locking is a powerful protection mechanism that can prevent inadvertent modification/deletion of resources within Azure subscriptions/Resource Groups and is a recommended NIST configuration.

Rationale:

Given the resource lock functionality is outside of standard Role Based Access Control(RBAC), it would be prudent to create a resource lock administrator role to prevent inadvertent unlocking of resources.

Impact:

By adding this role is you can have specific permissions granted for managing just resource locks rather than needing to provide the wide owner or contributor role reducing the risk of the user being able to do unintentional damage.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "From Azure Console

In the Azure portal, open a subscription or resource group where you want the custom role to be assignable.

Select Access control (IAM)

Click Add

Select Add custom role'.

In the Custom Role Name field enter Resource Lock Administrator

In the Description field enter Can Administer Resource Locks

For Baseline permissions select Start from scratch

Click next

In the Permissions tab select Add permissions

in the Search for a permission box, type in Microsoft.Authorization/locks to search for permissions.

Select the check box next to the permission called Microsoft.Authorization/locks

click add

Click Review+create

Click Create

Assign the newly created role to the appropriate user.
Using PowerShell:
Below is a power shell definition for a resource lock administrator role created at an Azure Management group level

Import-Module Az.Accounts
Connect-AzAccount

$role = Get-AzRoleDefinition 'User Access Administrator'
$role.Id = $null
$role.Name = 'Resource Lock Administrator'
$role.Description = 'Can Administer Resource Locks'
$role.Actions.Clear()
$role.Actions.Add('Microsoft.Authorization/locks/*')
$role.AssignableScopes.Clear()

* Scope at the Management group level Management group

$role.AssignableScopes.Add('/providers/Microsoft.Management/managementGroups/MG-Name')

New-AzRoleDefinition -Role $role
Get-AzureRmRoleDefinition 'Resource Lock Administrator'"
  reference      : "800-171|3.5.1,800-53|IA-2.,CIS_Recommendation|1.23,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|14.6,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|2M,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listRoleDefinitions"
  json_transform : '.[]|.value[]|select((.properties.roleName == "Resource Lock Administrator"))|"Permissions: \(.properties.permissions[].actions[])"'
  regex          : "Permissions:"
  expect         : "Permissions: MANUAL_REVIEW"
  severity       : MEDIUM
</custom_item>

<custom_item>
  description    : "2.1 Ensure that Azure Defender is set to On for Servers"
  info           : "Turning on Azure Defender enables threat detection for Server, providing threat intelligence, anomaly detection, and behavior analytics in the Azure Security Center.

Rationale:

Enabling Azure Defender for Servers allows for greater defense-in-depth, with threat detection provided by the Microsoft Security Response Center (MSRC).

Impact:

Turning on Azure Defender in Azure Security Center incurs an additional cost per resource."
  solution       : "From Azure Console

Go to Security Center

Select Pricing & settings blade

Click on the subscription name

Select the Azure Defender plans blade

On the line in the table for Servers Select On under Plan.

Select Save

Using Azure Command Line Interface 2.0
Use the below command to enable Azure Defender for Servers

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/pricings/VirtualMachines?api-version=2018-06-01 -d@'input.json''

Where input.json contains the Request body json data as mentioned below.

{
  'id': '/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/pricings/VirtualMachines',
  'name': 'VirtualMachines',
  'type': 'Microsoft.Security/pricings',
  'properties': {
    'pricingTier': 'Standard'
  }
}

Default Value:

By default, Azure Defender off is selected."
  reference      : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|2.1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|8,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|2M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listPricings"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Pricing Tier: \(.properties.pricingTier)"'
  regex          : "Name: VirtualMachines Pricing Tier:"
  expect         : "Name: VirtualMachines Pricing Tier: Standard"
  match_all      : YES
</custom_item>

<custom_item>
  description    : "2.2 Ensure that Azure Defender is set to On for App Service"
  info           : "Turning on Azure Defender enables threat detection for App Service, providing threat intelligence, anomaly detection, and behavior analytics in the Azure Security Center.

Rationale:

Enabling Azure Defender for App Service allows for greater defense-in-depth, with threat detection provided by the Microsoft Security Response Center (MSRC).

Impact:

Turning on Azure Defender in Azure Security Center incurs an additional cost per resource."
  solution       : "From Azure Console

Go to Security Center

Select Pricing & settings blade

Click on the subscription name

Select the Azure Defender plans blade

On the line in the table for App Service Select On under Plan.

Select 'Save

Using Azure Command Line Interface 2.0
Use the below command to enable Standard pricing tier for App Service

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/pricings/AppServices?api-version=2018-06-01 -d@'input.json''

Where input.json contains the Request body json data as mentioned below.

{
  'id': '/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/pricings/AppServices',
  'name': 'AppServices',
  'type': 'Microsoft.Security/pricings',
  'properties': {
    'pricingTier': 'Standard'
  }
}

Default Value:

By default, Azure Defender off is selected."
  reference      : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|2.2,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|8,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|2M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listPricings"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Pricing Tier: \(.properties.pricingTier)"'
  regex          : "Name: AppServices Pricing Tier:"
  expect         : "Name: AppServices Pricing Tier: Standard"
  match_all      : YES
</custom_item>

<custom_item>
  description    : "2.3 Ensure that Azure Defender is set to On for Azure SQL database servers"
  info           : "Turning on Azure Defender enables threat detection for Azure SQL database servers, providing threat intelligence, anomaly detection, and behavior analytics in the Azure Security Center.

Rationale:

Enabling Azure Defender for Azure SQL database servers allows for greater defense-in-depth, with threat detection provided by the Microsoft Security Response Center (MSRC).

Impact:

Turning on Azure Defender in Azure Security Center incurs an additional cost per resource."
  solution       : "From Azure Console

Go to Security Center

Select Pricing & settings blade

Click on the subscription name

Select the Azure Defender plans blade

On the line in the table for Azure SQL database servers Select On under Plan.

Select Save

Using Azure Command Line Interface 2.0
Use the below command to enable Standard pricing tier for Azure SQL database servers

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/pricings/SqlServers?api-version=2018-06-01 -d@'input.json''

Where input.json contains the Request body json data as mentioned below.

{
  'id': '/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/pricings/SqlServers',
  'name': 'SqlServers',
  'type': 'Microsoft.Security/pricings',
  'properties': {
    'pricingTier': 'Standard'
  }
}

Default Value:

By default, Azure Defender off is selected."
  reference      : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|2.3,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|8,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|2M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listPricings"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Pricing Tier: \(.properties.pricingTier)"'
  regex          : "Name: SqlServers Pricing Tier:"
  expect         : "Name: SqlServers Pricing Tier: Standard"
  match_all      : YES
</custom_item>

<custom_item>
  description    : "2.4 Ensure that Azure Defender is set to On for SQL servers on machines"
  info           : "Turning on Azure Defender enables threat detection for SQL servers on machines, providing threat intelligence, anomaly detection, and behavior analytics in the Azure Security Center.

Rationale:

Enabling Azure Defender for SQL servers on machines allows for greater defense-in-depth, with threat detection provided by the Microsoft Security Response Center (MSRC).

Impact:

Turning on Azure Defender in Azure Security Center incurs an additional cost per resource."
  solution       : "From Azure Console

Go to Security Center

Select Pricing & settings blade

Click on the subscription name

Select the Azure Defender plans blade

On the line in the table for SQL Servers on machines Select On under Plan.

Select Save

Using Azure Command Line Interface 2.0
Use the below command to enable Standard pricing tier for Storage

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/pricings/StorageAccounts?api-version=2018-06-01 -d@'input.json''

Where input.json contains the Request body json data as mentioned below.

{
  'id': '/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/pricings/StorageAccounts',
  'name': 'StorageAccounts',
  'type': 'Microsoft.Security/pricings',
  'properties': {
    'SqlserverVirtualMachines': 'Standard'
  }
}

Default Value:

By default, Azure Defender off is selected."
  reference      : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|2.4,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|8,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|2M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listPricings"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Pricing Tier: \(.properties.pricingTier)"'
  regex          : "Name: SqlServerVirtualMachines Pricing Tier:"
  expect         : "Name: SqlServerVirtualMachines Pricing Tier: Standard"
  match_all      : YES
</custom_item>

<custom_item>
  description    : "2.5 Ensure that Azure Defender is set to On for Storage"
  info           : "Turning on Azure Defender enables threat detection for Storage, providing threat intelligence, anomaly detection, and behavior analytics in the Azure Security Center.

Rationale:

Enabling Azure Defender for Storage allows for greater defense-in-depth, with threat detection provided by the Microsoft Security Response Center (MSRC).

Impact:

Turning on Azure Defender in Azure Security Center incurs an additional cost per resource."
  solution       : "From Azure Console

Go to Security Center

Select Pricing & settings blade

Click on the subscription name

Select the Azure Defender plans blade

On the line in the table for Storage Select On under Plan.

Select Save

Using Azure Command Line Interface 2.0
Use the below command to enable Standard pricing tier for Storage

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/pricings/StorageAccounts?api-version=2018-06-01 -d@'input.json''

Where input.json contains the Request body json data as mentioned below.

{
  'id': '/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/pricings/StorageAccounts',
  'name': 'StorageAccounts',
  'type': 'Microsoft.Security/pricings',
  'properties': {
    'pricingTier': 'Standard'
  }
}

Default Value:

By default, Azure Defender off is selected."
  reference      : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|2.5,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|8,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|2M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listPricings"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Pricing Tier: \(.properties.pricingTier)"'
  regex          : "Name: StorageAccounts Pricing Tier:"
  expect         : "Name: StorageAccounts Pricing Tier: Standard"
  match_all      : YES
</custom_item>

<custom_item>
  description    : "2.6 Ensure that Azure Defender is set to On for Kubernetes"
  info           : "Turning on Azure Defender enables threat detection for Kubernetes, providing threat intelligence, anomaly detection, and behavior analytics in the Azure Security Center.

Rationale:

Enabling Azure Defender for Kubernetes allows for greater defense-in-depth, with threat detection provided by the Microsoft Security Response Center (MSRC).

Impact:

Turning on Azure Defender in Azure Security Center incurs an additional cost per resource."
  solution       : "From Azure Console

Go to Security Center

Select Pricing & settings blade

Click on the subscription name

Select the Azure Defender plans blade

On the line in the table for Kubernetes Select On under Plan.

Select Save

Using Azure Command Line Interface 2.0
Use the below command to enable Standard pricing tier for Storage

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/pricings/StorageAccounts?api-version=2018-06-01 -d@'input.json''

Where input.json contains the Request body json data as mentioned below.

{
  'id': '/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/pricings/StorageAccounts',
  'name': 'KubernetesService',
  'type': 'Microsoft.Security/pricings',
  'properties': {
    'pricingTier': 'Standard'
  }
}

Default Value:

By default, Azure Defender off is selected."
  reference      : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|2.6,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|8,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|2M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listPricings"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Pricing Tier: \(.properties.pricingTier)"'
  regex          : "Name: KubernetesService Pricing Tier:"
  expect         : "Name: KubernetesService Pricing Tier: Standard"
  match_all      : YES
</custom_item>

<custom_item>
  description    : "2.7 Ensure that Azure Defender is set to On for Container Registries"
  info           : "Turning on Azure Defender enables threat detection for Container Registries, providing threat intelligence, anomaly detection, and behavior analytics in the Azure Security Center.

Rationale:

Enabling Azure Defender for Container Registries allows for greater defense-in-depth, with threat detection provided by the Microsoft Security Response Center (MSRC).

Impact:

Turning on Azure Defender in Azure Security Center incurs an additional cost per resource."
  solution       : "From Azure Console

Go to Security Center

Select Pricing & settings blade

Click on the subscription name

Select the Azure Defender plans blade

On the line in the table for Container Registries Select On under Plan.

Select Save

Using Azure Command Line Interface 2.0
Use the below command to enable Standard pricing tier for Storage

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/pricings/StorageAccounts?api-version=2018-06-01 -d@'input.json''

Where input.json contains the Request body json data as mentioned below.

{
  'id': '/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/pricings/StorageAccounts',
  'name': 'ContainerRegistry',
  'type': 'Microsoft.Security/pricings',
  'properties': {
    'pricingTier': 'Standard'
  }
}

Default Value:

By default, Azure Defender off is selected."
  reference      : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|2.7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|8,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|2M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listPricings"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Pricing Tier: \(.properties.pricingTier)"'
  regex          : "Name: ContainerRegistry Pricing Tier:"
  expect         : "Name: ContainerRegistry Pricing Tier: Standard"
  match_all      : YES
</custom_item>

<custom_item>
  description    : "2.8 Ensure that Azure Defender is set to On for Key Vault"
  info           : "Turning on Azure Defender enables threat detection for Key Vault, providing threat intelligence, anomaly detection, and behavior analytics in the Azure Security Center.

Rationale:

Enabling Azure Defender for Key Vault allows for greater defense-in-depth, with threat detection provided by the Microsoft Security Response Center (MSRC).

Impact:

Turning on Azure Defender in Azure Security Center incurs an additional cost per resource."
  solution       : "From Azure Console

Go to Security Center

Select Pricing & settings blade

Click on the subscription name

Select the Azure Defender plans blade

On the line in the table for Key Vault Select On under Plan.

Select Save

Using Azure Command Line Interface 2.0
Use the below command to enable Standard pricing tier for Storage

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/pricings/StorageAccounts?api-version=2018-06-01 -d@'input.json''

Where input.json contains the Request body json data as mentioned below.

{
  'id': '/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/pricings/StorageAccounts',
  'name': 'KeyVaults',
  'type': 'Microsoft.Security/pricings',
  'properties': {
    'pricingTier': 'Standard'
  }
}

Default Value:

By default, Azure Defender off is selected."
  reference      : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|2.8,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|8,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|2M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listPricings"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Pricing Tier: \(.properties.pricingTier)"'
  regex          : "Name: KeyVaults Pricing Tier:"
  expect         : "Name: KeyVaults Pricing Tier: Standard"
  match_all      : YES
</custom_item>

<custom_item>
  description    : "2.9 Ensure that Windows Defender ATP (WDATP) integration with Security Center is selected"
  info           : "This setting enables Windows Defender ATP (WDATP) integration with Security Center.

Rationale:

WDATP integration brings comprehensive Endpoint Detection and Response (EDR) capabilities within security center. This integration helps to spot abnormalities, detect and respond to advanced attacks on Windows server endpoints monitored by Azure Security Center. Windows Defender ATP in Security Center supports detection on Windows Server 2016, 2012 R2, and 2008 R2 SP1 operating systems in a Standard service subscription.

WDATP works only with Standard Tier subscriptions.

Impact:

WDATP works with Standard pricing tier Subscription.Choosing the Standard pricing tier of Azure Security Center incurs an additional cost per resource."
  solution       : "From Azure Console

Go to Azure Security Center

Select Security policy blade

Click On Edit Settings to alter the the security policy for a subscription

Select the Threat Detection blade

Check/Enable option Allow Windows Defender ATP to access my data

Select Save

Using Azure Command Line Interface 2.0
Use the below command to enable Standard pricing tier for Storage Accounts

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/settings/WDATP?api-version=2019-01-01 -d@'input.json''

Where input.json contains the Request body json data as mentioned below.

{
  'id': '/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/settings/WDATP',
  'kind': 'DataExportSetting',
  'type': 'Microsoft.Security/settings',
  'properties': {
    'enabled': true
  }
}"
  reference      : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|2.9,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|8,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|2M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listSecurityCenterSettings"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Enabled: \(.properties.enabled)"'
  regex          : "Name: WDATP Enabled:"
  expect         : "Name: WDATP Enabled: True"
  match_all      : YES
</custom_item>

<custom_item>
  description    : "2.10 Ensure that Microsoft Cloud App Security (MCAS) integration with Security Center is selected"
  info           : "This setting enables Microsoft Cloud App Security (MCAS) integration with Security Center.

Rationale:

Security Center offers an additional layer of protection by using Azure Resource Manager events, which is considered to be the control plane for Azure. By analyzing the Azure Resource Manager records, Security Center detects unusual or potentially harmful operations in the Azure subscription environment. Several of the preceding analytics are powered by Microsoft Cloud App Security. To benefit from these analytics, subscription must have a Cloud App Security license.

MCAS works only with Standard Tier subscriptions.

Impact:

MCAS works with Standard pricing tier Subscription.Choosing the Standard pricing tier of Azure Security Center incurs an additional cost per resource."
  solution       : "From Azure Console

Go to Azure Security Center

Select Security policy blade

Click On Edit Settings to alter the the security policy for a subscription

Select the Threat Detection blade

Check/Enable option Allow Microsoft Cloud App Security to access my data

Select Save

Using Azure Command Line Interface 2.0
Use the below command to enable Standard pricing tier for Storage Accounts

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/settings/MCAS?api-version=2019-01-01 -d@'input.json''

Where input.json contains the Request body json data as mentioned below.

{
  'id': '/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/settings/MCAS',
  'kind': 'DataExportSetting',
  'type': 'Microsoft.Security/settings',
  'properties': {
    'enabled': true
  }
}

Default Value:

With Cloud App Security license, these alerts are enabled by default."
  reference      : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,CIS_Recommendation|2.10,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|8,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7a.,LEVEL|2M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listSecurityCenterSettings"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Enabled: \(.properties.enabled)"'
  regex          : "Name: MCAS Enabled:"
  expect         : "Name: MCAS Enabled: True"
  match_all      : YES
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Storage Accounts Exist"
      request        : "listStorageAccounts"
      json_transform : '.[].value[].name'
      regex          : ".*"
      expect         : ".+"
    </custom_item>
  </condition>

  <then>
    <report type:"WARNING">
      description : "3.3 Ensure Storage logging is enabled for Queue service for read, write, and delete requests"
      info        : "The Storage Queue service stores messages that may be read by any client who has access to the storage account. A queue can contain an unlimited number of messages, each of which can be up to 64KB in size using version 2011-08-18 or newer. Storage Logging happens server-side and allows details for both successful and failed requests to be recorded in the storage account. These logs allow users to see the details of read, write, and delete operations against the queues. Storage Logging log entries contain the following information about individual requests: Timing information such as start time, end-to-end latency, and server latency, authentication details , concurrency information and the sizes of the request and response messages.

Rationale:

Storage Analytics logs contain detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis.

Storage Analytics logging is not enabled by default for your storage account.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "From Azure Console:

Go to Storage Accounts.

Select the specific Storage Account.

Click the Diagnostics settings (classic) blade from Monitoring (classic) section.

Set the Status to On, if set to Off.

Select Queue properties.

Select Read, Write and Delete options under the Logging section to enable Storage Logging for Queue service.

Using Azure Command Line Interface 2.0
Use the below command to enable the Storage Logging for Queue service.

az storage logging update --account-name <storageAccountName> --account-key <storageAccountKey> --services q --log rwd --retention 90"
      reference   : "CSCv7|6.3,LEVEL|2M,CIS_Recommendation|3.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <custom_item>
      description    : "3.6 Ensure default network access rule for Storage Accounts is set to deny"
      info           : "Restricting default network access helps to provide a new layer of security, since storage accounts accept connections from clients on any network. To limit access to selected networks, the default action must be changed.

Rationale:

Storage accounts should be configured to deny access to traffic from all networks (including internet traffic). Access can be granted to traffic from specific Azure Virtual networks, allowing a secure network boundary for specific applications to be built. Access can also be granted to public internet IP address ranges, to enable connections from specific internet or on-premises clients. When network rules are configured, only applications from allowed networks can access a storage account. When calling from an allowed network, applications continue to require proper authorization (a valid access key or SAS token) to access the storage account."
      solution       : "From Azure Console

Go to Storage Accounts

For each storage account, Click on the settings menu called Firewalls and virtual networks.

Ensure that you have elected to allow access from Selected networks.

Add rules to allow traffic from specific network.

Click Save to apply your changes.

Using Azure Command Line Interface 2.0
Use the below command to update default-action to Deny.

    az storage account update --name <StorageAccountName> --resource-group <resourceGroupName> --default-action Deny"
      reference      : "800-171|3.13.1,800-53|SC-7(12),CIS_Recommendation|3.6,CN-L3|8.1.10.6(j),CSCv7|16,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2A,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listStorageAccounts"
      json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Default Action: \(.properties.networkAcls.defaultAction)"'
      regex          : "Default Action:"
      not_expect     : "Default Action: Allow"
    </custom_item>

    <custom_item>
      description    : "3.7 Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
      info           : "Some Microsoft services that interact with storage accounts operate from networks that can't be granted access through network rules. To help this type of service work as intended, allow the set of trusted Microsoft services to bypass the network rules. These services will then use strong authentication to access the storage account. If the Allow trusted Microsoft services exception is enabled, the following services: Azure Backup, Azure Site Recovery, Azure DevTest Labs, Azure Event Grid, Azure Event Hubs, Azure Networking, Azure Monitor and Azure SQL Data Warehouse (when registered in the subscription), are granted access to the storage account.

Rationale:

Turning on firewall rules for storage account will block access to incoming requests for data, including from other Azure services. This includes using the Portal, writing logs, etc. We can re-enable functionality. The customer can get access to services like Monitor, Networking, Hubs, and Event Grid by enabling 'Trusted Microsoft Services' through exceptions. Also, Backup and Restore of Virtual Machines using unmanaged disks in storage accounts with network rules applied is supported via creating an exception."
      solution       : "From Azure Console

Go to Storage Accounts

For each storage account, Click on the settings menu called Firewalls and virtual networks.

Ensure that you have elected to allow access from 'Selected networks'.

Enable check box for Allow trusted Microsoft services to access this storage account.

Click Save to apply your changes.

Using Azure Command Line Interface 2.0
Use the below command to update trusted Microsoft services.

    az storage account update --name <StorageAccountName> --resource-group <resourceGroupName> --bypass AzureServices"
      reference      : "800-171|3.13.1,800-53|SC-7(12),CIS_Recommendation|3.7,CN-L3|8.1.10.6(j),CSCv7|9.2,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2M,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listStorageAccounts"
      json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Bypass: \(.properties.networkAcls.bypass)"'
      regex          : "Bypass:"
      not_expect     : "Bypass: (Logging, Metrics$|Metrics$|Logging$)"
    </custom_item>

    <custom_item>
      description    : "3.9 Ensure storage for critical data are encrypted with Customer Managed Key"
      info           : "Enable sensitive data encryption at rest using Customer Managed Keys rather than Microsoft Managed keys

Rationale:

By default, data in the storage account is encrypted using Microsoft Managed Keys at rest. All Azure Storage resources are encrypted, including blobs, disks, files, queues, and tables. All object metadata is also encrypted. However, if you want to control and manage this encryption key yourself, you can specify a customer-managed key, that key is used to protect and control access to the key that encrypts your data. You can also choose to automatically update the key version used for Azure Storage encryption whenever a new version is available in the associated Key Vault.

Impact:

If the key expires by setting the 'activation date' and 'expiration date' of the key, the user must rotate the key manually.

Using Customer Managed Keys may also incur additional man-hour requirements to create, store, manage, and protect the keys as needed."
      solution       : "From Azure Console:

Go to Storage Accounts

For each storage account, go to Encryption

Set Customer Managed Keys

Select the Encryption key and enter the appropriate setting value

Click Save

Default Value:

By default, Encryption type is set to Microsoft Managed Keys"
      reference      : "800-171|3.13.11,800-53|SC-13.,CIS_Recommendation|3.9,CSCv7|14.8,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|2A,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listStorageAccounts"
      json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Encryption Type: \(.properties.encryption.keySource)"'
      regex          : "Encryption Type:"
      not_expect     : "Encryption Type: Microsoft\.Storage"
    </custom_item>

    <report type:"WARNING">
      description : "3.10 Ensure Storage logging is enabled for Blob service for read, write, and delete requests"
      info        : "The Storage Blob service provides scalable, cost-efficient objective storage in the cloud. Storage Logging happens server-side and allows details for both successful and failed requests to be recorded in the storage account. These logs allow users to see the details of read, write, and delete operations against the blobs. Storage Logging log entries contain the following information about individual requests: Timing information such as start time, end-to-end latency, and server latency, authentication details , concurrency information and the sizes of the request and response messages.

Rationale:

Storage Analytics logs contain detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis.

Impact:

Enabling storage account blob service logging does have a cost implication.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "From Azure Console:

Go to Storage Accounts.

Select the specific Storage Account.

Click the Diagnostics settings (classic) blade from Monitoring (classic) section.

Set the Status to On, if set to Off.

Select Blob properties.

Select Read, Write and Delete options under the Loggingsection to enable Storage Logging for Blob service.

Using Azure Command Line Interface:
Use the below command to enable the Storage Logging for Blob service.

az storage logging update --account-name <storageAccountName> --account-key <storageAccountKey> --services b --log rwd --retention 90

Default Value:

By default, storage account blob service logging is disabled for read, write, an delete operations"
      reference   : "CSCv7|6.3,LEVEL|2M,CIS_Recommendation|3.10"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"WARNING">
      description : "3.11 Ensure Storage logging is enabled for Table service for read, write, and delete requests"
      info        : "The Storage Table storage is a service that stores structure NoSQL data in the cloud, providing a key/attribute store with a schema less design. Storage Logging happens server-side and allows details for both successful and failed requests to be recorded in the storage account. These logs allow users to see the details of read, write, and delete operations against the tables. Storage Logging log entries contain the following information about individual requests: Timing information such as start time, end-to-end latency, and server latency, authentication details , concurrency information and the sizes of the request and response messages.

Rationale:

Storage Analytics logs contain detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis.

Impact:

Enabling storage account table service logging does have a cost implication.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "From Azure Console:

Go to Storage Accounts.

Select the specific Storage Account.

Click the Diagnostics settings (classic) blade from Monitoring (classic) section.

Set the Status to On, if set to Off.

Select Table properties.

Select Read, Write and Delete options under the Logging section to enable Storage Logging for Table service.

Using Azure Command Line Interface:
Use the below command to enable the Storage Logging for Table service.

az storage logging update --account-name <storageAccountName> --account-key <storageAccountKey> --services t --log rwd --retention 90

Default Value:

By default, storage account table service logging is disabled for read, write, an delete operations"
      reference   : "CSCv7|6.3,LEVEL|2M,CIS_Recommendation|3.11"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </then>

  <else>
    <report type:"PASSED">
      description : "3.3 Ensure Storage logging is enabled for Queue service for read, write, and delete requests"
      info        : "The Storage Queue service stores messages that may be read by any client who has access to the storage account. A queue can contain an unlimited number of messages, each of which can be up to 64KB in size using version 2011-08-18 or newer. Storage Logging happens server-side and allows details for both successful and failed requests to be recorded in the storage account. These logs allow users to see the details of read, write, and delete operations against the queues. Storage Logging log entries contain the following information about individual requests: Timing information such as start time, end-to-end latency, and server latency, authentication details , concurrency information and the sizes of the request and response messages.

Rationale:

Storage Analytics logs contain detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis.

Storage Analytics logging is not enabled by default for your storage account."
      solution    : "From Azure Console:

Go to Storage Accounts.

Select the specific Storage Account.

Click the Diagnostics settings (classic) blade from Monitoring (classic) section.

Set the Status to On, if set to Off.

Select Queue properties.

Select Read, Write and Delete options under the Logging section to enable Storage Logging for Queue service.

Using Azure Command Line Interface 2.0
Use the below command to enable the Storage Logging for Queue service.

az storage logging update --account-name <storageAccountName> --account-key <storageAccountKey> --services q --log rwd --retention 90"
      reference   : "CSCv7|6.3,LEVEL|2M,CIS_Recommendation|3.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "3.6 Ensure default network access rule for Storage Accounts is set to deny"
      info        : "Restricting default network access helps to provide a new layer of security, since storage accounts accept connections from clients on any network. To limit access to selected networks, the default action must be changed.

Rationale:

Storage accounts should be configured to deny access to traffic from all networks (including internet traffic). Access can be granted to traffic from specific Azure Virtual networks, allowing a secure network boundary for specific applications to be built. Access can also be granted to public internet IP address ranges, to enable connections from specific internet or on-premises clients. When network rules are configured, only applications from allowed networks can access a storage account. When calling from an allowed network, applications continue to require proper authorization (a valid access key or SAS token) to access the storage account."
      solution    : "From Azure Console

Go to Storage Accounts

For each storage account, Click on the settings menu called Firewalls and virtual networks.

Ensure that you have elected to allow access from Selected networks.

Add rules to allow traffic from specific network.

Click Save to apply your changes.

Using Azure Command Line Interface 2.0
Use the below command to update default-action to Deny.

    az storage account update --name <StorageAccountName> --resource-group <resourceGroupName> --default-action Deny"
      reference   : "800-171|3.13.1,800-53|SC-7(12),CIS_Recommendation|3.6,CN-L3|8.1.10.6(j),CSCv7|16,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2A,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "3.7 Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
      info        : "Some Microsoft services that interact with storage accounts operate from networks that can't be granted access through network rules. To help this type of service work as intended, allow the set of trusted Microsoft services to bypass the network rules. These services will then use strong authentication to access the storage account. If the Allow trusted Microsoft services exception is enabled, the following services: Azure Backup, Azure Site Recovery, Azure DevTest Labs, Azure Event Grid, Azure Event Hubs, Azure Networking, Azure Monitor and Azure SQL Data Warehouse (when registered in the subscription), are granted access to the storage account.

Rationale:

Turning on firewall rules for storage account will block access to incoming requests for data, including from other Azure services. This includes using the Portal, writing logs, etc. We can re-enable functionality. The customer can get access to services like Monitor, Networking, Hubs, and Event Grid by enabling 'Trusted Microsoft Services' through exceptions. Also, Backup and Restore of Virtual Machines using unmanaged disks in storage accounts with network rules applied is supported via creating an exception."
      solution    : "From Azure Console

Go to Storage Accounts

For each storage account, Click on the settings menu called Firewalls and virtual networks.

Ensure that you have elected to allow access from 'Selected networks'.

Enable check box for Allow trusted Microsoft services to access this storage account.

Click Save to apply your changes.

Using Azure Command Line Interface 2.0
Use the below command to update trusted Microsoft services.

    az storage account update --name <StorageAccountName> --resource-group <resourceGroupName> --bypass AzureServices"
      reference   : "800-171|3.13.1,800-53|SC-7(12),CIS_Recommendation|3.7,CN-L3|8.1.10.6(j),CSCv7|9.2,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2M,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "3.9 Ensure storage for critical data are encrypted with Customer Managed Key"
      info        : "Enable sensitive data encryption at rest using Customer Managed Keys rather than Microsoft Managed keys

Rationale:

By default, data in the storage account is encrypted using Microsoft Managed Keys at rest. All Azure Storage resources are encrypted, including blobs, disks, files, queues, and tables. All object metadata is also encrypted. However, if you want to control and manage this encryption key yourself, you can specify a customer-managed key, that key is used to protect and control access to the key that encrypts your data. You can also choose to automatically update the key version used for Azure Storage encryption whenever a new version is available in the associated Key Vault.

Impact:

If the key expires by setting the 'activation date' and 'expiration date' of the key, the user must rotate the key manually.

Using Customer Managed Keys may also incur additional man-hour requirements to create, store, manage, and protect the keys as needed."
      solution    : "From Azure Console:

Go to Storage Accounts

For each storage account, go to Encryption

Set Customer Managed Keys

Select the Encryption key and enter the appropriate setting value

Click Save

Default Value:

By default, Encryption type is set to Microsoft Managed Keys"
      reference   : "800-171|3.13.11,800-53|SC-13.,CIS_Recommendation|3.9,CSCv7|14.8,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|2A,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "3.10 Ensure Storage logging is enabled for Blob service for read, write, and delete requests"
      info        : "The Storage Blob service provides scalable, cost-efficient objective storage in the cloud. Storage Logging happens server-side and allows details for both successful and failed requests to be recorded in the storage account. These logs allow users to see the details of read, write, and delete operations against the blobs. Storage Logging log entries contain the following information about individual requests: Timing information such as start time, end-to-end latency, and server latency, authentication details , concurrency information and the sizes of the request and response messages.

Rationale:

Storage Analytics logs contain detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis.

Impact:

Enabling storage account blob service logging does have a cost implication."
      solution    : "From Azure Console:

Go to Storage Accounts.

Select the specific Storage Account.

Click the Diagnostics settings (classic) blade from Monitoring (classic) section.

Set the Status to On, if set to Off.

Select Blob properties.

Select Read, Write and Delete options under the Loggingsection to enable Storage Logging for Blob service.

Using Azure Command Line Interface:
Use the below command to enable the Storage Logging for Blob service.

az storage logging update --account-name <storageAccountName> --account-key <storageAccountKey> --services b --log rwd --retention 90

Default Value:

By default, storage account blob service logging is disabled for read, write, an delete operations"
      reference   : "CSCv7|6.3,LEVEL|2M,CIS_Recommendation|3.10"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "3.11 Ensure Storage logging is enabled for Table service for read, write, and delete requests"
      info        : "The Storage Table storage is a service that stores structure NoSQL data in the cloud, providing a key/attribute store with a schema less design. Storage Logging happens server-side and allows details for both successful and failed requests to be recorded in the storage account. These logs allow users to see the details of read, write, and delete operations against the tables. Storage Logging log entries contain the following information about individual requests: Timing information such as start time, end-to-end latency, and server latency, authentication details , concurrency information and the sizes of the request and response messages.

Rationale:

Storage Analytics logs contain detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis.

Impact:

Enabling storage account table service logging does have a cost implication."
      solution    : "From Azure Console:

Go to Storage Accounts.

Select the specific Storage Account.

Click the Diagnostics settings (classic) blade from Monitoring (classic) section.

Set the Status to On, if set to Off.

Select Table properties.

Select Read, Write and Delete options under the Logging section to enable Storage Logging for Table service.

Using Azure Command Line Interface:
Use the below command to enable the Storage Logging for Table service.

az storage logging update --account-name <storageAccountName> --account-key <storageAccountKey> --services t --log rwd --retention 90

Default Value:

By default, storage account table service logging is disabled for read, write, an delete operations"
      reference   : "CSCv7|6.3,LEVEL|2M,CIS_Recommendation|3.11"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Test if SQL Servers exist"
      request        : "listSQLServers"
      json_transform : '.[]|.subscriptionId as $id|.value[]|"SQL Server: \(.name)"'
      regex          : "SQL Server:"
      expect         : "SQL Server: .+"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "4.2.1 Ensure that Advanced Threat Protection (ATP) on a SQL server is set to 'Enabled'"
      info           : "Enable 'Azure Defender for SQL' on critical SQL Servers.

  Rationale:

  Azure Defender for SQL is a unified package for advanced SQL security capabilities. Azure Defender is available for Azure SQL Database, Azure SQL Managed Instance, and Azure Synapse Analytics. It includes functionality for discovering and classifying sensitive data, surfacing and mitigating potential database vulnerabilities, and detecting anomalous activities that could indicate a threat to your database. It provides a single go-to location for enabling and managing these capabilities.

  Impact:

  Azure Defender for SQL is a paid feature and will incur additional cost for each SQL server."
      solution       : "From Azure Console

  Go to SQL servers

  For each server instance

  Click on Azure Defender for SQL

  Set Azure Defender for SQL to On

  Using Azure PowerShell
  Enable Advanced Data Security for a SQL Server:

  Set-AzSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -EmailAdmins $True

  Note:

  Enabling 'Azure Defender for SQL' from the Azure portal enables Threat Detection

  Using Powershell command Set-AzSqlServerThreatDetectionPolicy enables Azure Defender for SQL for a SQL server

  Default Value:

  By default, Azure Defender for SQL is set to Off."
      reference      : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|4.2.1,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|3.1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "getSQLServerSecurityAlertPolicies"
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[].value| "Subscription ID: \($id)" + " Name: \($name)" + " Server Name: \(.name)"+" Azure Defender for SQL: \(.properties.state)"'
      regex          : "Azure Defender for SQL:"
      not_expect     : "Azure Defender for SQL: Disabled"
    </custom_item>

    <custom_item>
      description    : "4.2.2 Ensure that Vulnerability Assessment (VA) is enabled on a SQL server by setting a Storage Account"
      info           : "Enable Vulnerability Assessment (VA) service scans for critical SQL servers and corresponding SQL databases.

  Rationale:

  Enabling Azure Defender for SQL server does not enables Vulnerability Assessment capability for individual SQL databases unless storage account is set to store the scanning data and reports.

  The Vulnerability Assessment service scans databases for known security vulnerabilities and highlight deviations from best practices, such as misconfigurations, excessive permissions, and unprotected sensitive data. Results of the scan include actionable steps to resolve each issue and provide customized remediation scripts where applicable. Additionally an assessment report can be customized by setting an acceptable baseline for permission configurations, feature configurations, and database settings.

  Impact:

  Enabling the Azure Defender for SQL features will incur additional costs for each SQL server."
      solution       : "From Azure Console

  Go to SQL servers

  Select a server instance

  Click on Security Center



  Select Configure next to Enabled at subscription-level

  In Section Vulnerability Assessment Settings, Click Storage Account

  Choose Storage Account (Existing or Create New). Click Ok

  Click Save

  Using Azure PowerShell
  If not already, Enable Azure Defender for a SQL:

  Set-AZSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -EmailAdmins $True

  To enable ADS-VA service by setting Storage Account

  Update-AzSqlServerVulnerabilityAssessmentSetting '
              -ResourceGroupName '<resource group name>''
              -ServerName '<Server Name>''
              -StorageAccountName '<Storage Name from same subscription and same Location' '
              -ScanResultsContainerName 'vulnerability-assessment' '
              -RecurringScansInterval Weekly '
              -EmailSubscriptionAdmins $true '
              -NotificationEmail @('mail1@mail.com' , 'mail2@mail.com')

  Default Value:

  By default Azure Defender for SQL is not enabled for a SQL server. Enabling Azure Defender for SQL does not enable VA scanning by setting Storage Account automatically."
      reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CIS_Recommendation|4.2.2,CSCv7|3.1,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|2A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "getSQLDBAuditingPolicies"
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[]|.name as $servername|.SQLDBs[]|.name as $dbname|"Subscription ID: \($id)" + " ResrouceGroup Name: \($name)" + " Server Name: \($servername)" + " DB Name: \($dbname)" + " Storage Account: \(.properties.storageAccountName)"'
      regex          : "Storage Account:"
      not_expect     : "Storage Account: null"
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.2.3 Ensure that VA setting Periodic Recurring Scans is enabled on a SQL server"
      info           : "Enable Vulnerability Assessment (VA) Periodic recurring scans for critical SQL servers and corresponding SQL databases.

  Rationale:

  VA setting 'Periodic recurring scans' schedules periodic (weekly) vulnerability scanning for the SQL server and corresponding Databases. Periodic and regular vulnerability scanning provides risk visibility based on updated known vulnerability signatures and best practices.

  Impact:

  Enabling the Azure Defender for SQL feature will incur additional costs for each SQL server."
      solution       : "From Azure Console

  Go to SQL servers

  For each server instance

  Click on Security Center

  In Section Vulnerability Assessment Settings, set Storage Account if not already

  Toggle 'Periodic recurring scans' to ON.

  Click Save

  Using Azure PowerShell
  If not already, Enable Advanced Data Security for a SQL Server:

  Set-AZSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -EmailAdmins $True

  To enable ADS-VA service with 'Periodic recurring scans'

  Update-AzSqlServerVulnerabilityAssessmentSetting '
              -ResourceGroupName '<resource group name>''
              -ServerName '<Server Name>''
              -StorageAccountName '<Storage Name from same subscription and same Location' '
              -ScanResultsContainerName 'vulnerability-assessment' '
              -RecurringScansInterval Weekly '
              -EmailSubscriptionAdmins $true '
              -NotificationEmail @('mail1@mail.com' , 'mail2@mail.com')

  Default Value:

  Enabling Azure Defender for SQL enables 'Periodic recurring scans' by default but does not configure the Storage account."
      reference      : "800-171|3.11.2,800-171|3.11.3,800-53|RA-5b.1.,CIS_Recommendation|4.2.3,CSCv7|3.1,CSF|DE.CM-8,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.IP-12,CSF|RS.CO-3,CSF|RS.MI-3,ISO/IEC-27001|A.12.6.1,ITSG-33|RA-5b.a.,LEVEL|2A,NESA|M1.2.2,NESA|M5.4.1,NESA|T7.7.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|8.2.1,QCSC-v1|11.2,SWIFT-CSCv1|2.7"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "getDatabaseVulnerabilityAssessments"
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[]|.name as $servername|.SQLDBs[]|.name as $dbname|"Subscription ID: \($id)" + " ResrouceGroup Name: \($name)" + " Server Name: \($servername)" + " DB Name: \($dbname)" + " Recurring Scans: \(.value.properties.recurringScans.isEnabled)"'
      regex          : "Recurring Scans:"
      expect         : "Recurring Scans: true"
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.2.4 Ensure that VA setting Send scan reports to is configured for a SQL server"
      info           : "Configure 'Send scan reports to' with email ids of concerned data owners/stakeholders for a critical SQL servers.

  Rationale:

  Vulnerability Assessment (VA) scan reports and alerts will be sent to email ids configured at 'Send scan reports to'. This may help in reducing time required for identifying risks and taking corrective measures.

  Impact:

  Enabling the Azure Defender for SQL features will incur additional costs for each SQL server.

  NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "From Azure Console

  Go to SQL servers

  Select a server instance

  Click on Security Center

  Ensure that Azure Defender for SQL is set to Enabled

  Select Configure next to Enabled at subscription-level

  In Section Vulnerability Assessment Settings, configure Storage Accounts if not already

  Configure email ids for concerned data owners/stakeholders at 'Send scan reports to'

  Click Save

  Using Azure PowerShell
  If not already, Enable Advanced Data Security for a SQL Server:

  Set-AZSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -EmailAdmins $True

  To enable ADS-VA service and Set 'Send scan reports to'

  Update-AzSqlServerVulnerabilityAssessmentSetting '
              -ResourceGroupName '<resource group name>''
              -ServerName '<Server Name>''
              -StorageAccountName '<Storage Name from same subscription and same Location' '
              -ScanResultsContainerName 'vulnerability-assessment' '
              -RecurringScansInterval Weekly '
              -EmailSubscriptionAdmins $true '
              -NotificationEmail @('mail1@mail.com' , 'mail2@mail.com')

  Default Value:

  By default, 'Send reports to' is blank."
      reference      : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|4.2.4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|3.1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "getSQLServerSecurityAlertPolicies"
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[]|.name as $servername|"Subscription ID: \($id)" + " ResourceGroup Name: \($name)" + " Server Name: \($servername)"+" Email Addresses: \(.value.properties.emailAddresses[])"'
      regex          : ".+"
      not_expect     : ".+"
      severity       : MEDIUM
    </custom_item>

    <custom_item>
      description    : "4.2.5 Ensure that VA setting 'Also send email notifications to admins and subscription owners' is set for a SQL server"
      info           : "Enable Vulnerability Assessment (VA) setting 'Also send email notifications to admins and subscription owners'.

  Rationale:

  VA scan reports and alerts will be sent to admins and subscription owners by enabling setting 'Also send email notifications to admins and subscription owners'. This may help in reducing time required for identifying risks and taking corrective measures.

  Impact:

  Enabling the Azure Defender for SQL features will incur additional costs for each SQL server."
      solution       : "From Azure Console

  Go to SQL servers

  Select a server instance

  Click on Security Center



  Select Configure next to Enabled at subscription-level

  In Section Vulnerability Assessment Settings, configure Storage Accounts if not already

  Check/enable 'Also send email notifications to admins and subscription owners'

  Click Save

  Using Azure PowerShell
  If not already, Enable Advanced Data Security for a SQL Server:

  Set-AZSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -EmailAdmins $True

  To enable ADS-VA service and Set 'Also send email notifications to admins and subscription owners'

  Update-AzSqlServerVulnerabilityAssessmentSetting '
              -ResourceGroupName '<resource group name>''
              -ServerName '<Server Name>''
              -StorageAccountName '<Storage Name from same subscription and same Location' '
              -ScanResultsContainerName 'vulnerability-assessment' '
              -RecurringScansInterval Weekly '
              -EmailSubscriptionAdmins $true '
              -NotificationEmail @('mail1@mail.com' , 'mail2@mail.com')

  Default Value:

  By default, 'Also send email notifications to admins and subscription owners' is enabled."
      reference      : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|4.2.5,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|3.1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "getSQLServerSecurityAlertPolicies"
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[]|.name as $servername|.value|"Subscription ID: \($id)" + " ResrouceGroup Name: \($name)" + " Server Name: \($servername)"+" Email Admins: \(.properties.emailAccountAdmins)"'
      regex          : "Email Admins:"
      expect         : "Email Admins: true"
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.5 Ensure SQL server's TDE protector is encrypted with Customer-managed key"
      info           : "TDE with Customer-managed key support provides increased transparency and control over the TDE Protector, increased security with an HSM-backed external service, and promotion of separation of duties.

With TDE, data is encrypted at rest with a symmetric key (called the database encryption key) stored in the database or data warehouse distribution. To protect this data encryption key (DEK) in the past, only a certificate that the Azure SQL Service managed could be used. Now, with Customer-managed key support for TDE, the DEK can be protected with an asymmetric key that is stored in the Key Vault. Key Vault is a highly available and scalable cloud-based key store which offers central key management, leverages FIPS 140-2 Level 2 validated hardware security modules (HSMs), and allows separation of management of keys and data, for additional security.

Based on business needs or criticality of data/databases hosted a SQL server, it is recommended that the TDE protector is encrypted by a key that is managed by the data owner (Customer-managed key).

Rationale:

Customer-managed key support for Transparent Data Encryption (TDE) allows user control of TDE encryption keys and restricts who can access them and when. Azure Key Vault, Azure's cloud-based external key management system is the first key management service where TDE has integrated support for Customer-managed keys. With Customer-managed key support, the database encryption key is protected by an asymmetric key stored in the Key Vault. The asymmetric key is set at the server level and inherited by all databases under that server.

Impact:

Once TDE protector is encrypted with a Customer-managed key, it transfers entire responsibility of respective key management on to you and hence you should be more careful about doing any operations on the particular key in order to keep data from corresponding SQL server and Databases hosted accessible.

When deploying Customer Managed Keys it is also prudent to ensure that you also deploy an automated toolset for managing these keys (this should include discovery and key rotation), and Keys should be stored in an HSM or hardware backed keystore E.G. Azure Keyvault).

As far as toolsets go, check with your cryptographic key provider as they may well provide one as an add on to their service."
      solution       : "From Azure Console:
Go to SQL servers
For the desired server instance

Click On Transparent data encryption

Set Use your own key to YES

Browse through your key vaults to Select an existing key or create a new key in Key Vault.

Check Make selected key the default TDE protector

Using Azure CLI:
Use the below command to encrypt SQL server's TDE protector with a Customer-managed key

az sql server tde-key >> Set --resource-group <resourceName> --server <dbServerName> --server-key-type {AzureKeyVault} [--kid <keyIdentifier>]

Default Value:

By Default, Microsoft managed TDE protector is enabled for a SQL server. By default option 'Use your own key' is set to 'ON'."
      reference      : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|4.5,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|16.4,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|2A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "getSQLServerEncryptionProtector"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.SQLServers[]|.name as $sname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " SQLServer: \($sname)" + " Kind: \(.value[].kind)" + " Key Type: \(.value[].properties.serverKeyType)" + " URI: \(.value[].properties.uri)"'
      regex          : "Kind:"
      expect         : 'Kind: azurekeyvault Key Type: AzureKeyVault URI: .+'
      match_all      : YES
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "4.2.1 Ensure that Advanced Threat Protection (ATP) on a SQL server is set to 'Enabled'"
      info        : "Enable 'Azure Defender for SQL' on critical SQL Servers.

  Rationale:

  Azure Defender for SQL is a unified package for advanced SQL security capabilities. Azure Defender is available for Azure SQL Database, Azure SQL Managed Instance, and Azure Synapse Analytics. It includes functionality for discovering and classifying sensitive data, surfacing and mitigating potential database vulnerabilities, and detecting anomalous activities that could indicate a threat to your database. It provides a single go-to location for enabling and managing these capabilities.

  Impact:

  Azure Defender for SQL is a paid feature and will incur additional cost for each SQL server."
      solution    : "From Azure Console

  Go to SQL servers

  For each server instance

  Click on Azure Defender for SQL

  Set Azure Defender for SQL to On

  Using Azure PowerShell
  Enable Advanced Data Security for a SQL Server:

  Set-AzSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -EmailAdmins $True

  Note:

  Enabling 'Azure Defender for SQL' from the Azure portal enables Threat Detection

  Using Powershell command Set-AzSqlServerThreatDetectionPolicy enables Azure Defender for SQL for a SQL server

  Default Value:

  By default, Azure Defender for SQL is set to Off."
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|4.2.1,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|3.1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "4.2.3 Ensure that VA setting Periodic Recurring Scans is enabled on a SQL server"
      info        : "Enable Vulnerability Assessment (VA) Periodic recurring scans for critical SQL servers and corresponding SQL databases.

  Rationale:

  VA setting 'Periodic recurring scans' schedules periodic (weekly) vulnerability scanning for the SQL server and corresponding Databases. Periodic and regular vulnerability scanning provides risk visibility based on updated known vulnerability signatures and best practices.

  Impact:

  Enabling the Azure Defender for SQL feature will incur additional costs for each SQL server."
      solution    : "From Azure Console

  Go to SQL servers

  For each server instance

  Click on Security Center

  In Section Vulnerability Assessment Settings, set Storage Account if not already

  Toggle 'Periodic recurring scans' to ON.

  Click Save

  Using Azure PowerShell
  If not already, Enable Advanced Data Security for a SQL Server:

  Set-AZSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -EmailAdmins $True

  To enable ADS-VA service with 'Periodic recurring scans'

  Update-AzSqlServerVulnerabilityAssessmentSetting '
              -ResourceGroupName '<resource group name>''
              -ServerName '<Server Name>''
              -StorageAccountName '<Storage Name from same subscription and same Location' '
              -ScanResultsContainerName 'vulnerability-assessment' '
              -RecurringScansInterval Weekly '
              -EmailSubscriptionAdmins $true '
              -NotificationEmail @('mail1@mail.com' , 'mail2@mail.com')

  Default Value:

  Enabling Azure Defender for SQL enables 'Periodic recurring scans' by default but does not configure the Storage account."
      reference   : "800-171|3.11.2,800-171|3.11.3,800-53|RA-5b.1.,CIS_Recommendation|4.2.3,CSCv7|3.1,CSF|DE.CM-8,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.IP-12,CSF|RS.CO-3,CSF|RS.MI-3,ISO/IEC-27001|A.12.6.1,ITSG-33|RA-5b.a.,LEVEL|2A,NESA|M1.2.2,NESA|M5.4.1,NESA|T7.7.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|8.2.1,QCSC-v1|11.2,SWIFT-CSCv1|2.7"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "4.2.4 Ensure that VA setting Send scan reports to is configured for a SQL server"
      info        : "Configure 'Send scan reports to' with email ids of concerned data owners/stakeholders for a critical SQL servers.

  Rationale:

  Vulnerability Assessment (VA) scan reports and alerts will be sent to email ids configured at 'Send scan reports to'. This may help in reducing time required for identifying risks and taking corrective measures.

  Impact:

  Enabling the Azure Defender for SQL features will incur additional costs for each SQL server."
      solution    : "From Azure Console

  Go to SQL servers

  Select a server instance

  Click on Security Center

  Ensure that Azure Defender for SQL is set to Enabled

  Select Configure next to Enabled at subscription-level

  In Section Vulnerability Assessment Settings, configure Storage Accounts if not already

  Configure email ids for concerned data owners/stakeholders at 'Send scan reports to'

  Click Save

  Using Azure PowerShell
  If not already, Enable Advanced Data Security for a SQL Server:

  Set-AZSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -EmailAdmins $True

  To enable ADS-VA service and Set 'Send scan reports to'

  Update-AzSqlServerVulnerabilityAssessmentSetting '
              -ResourceGroupName '<resource group name>''
              -ServerName '<Server Name>''
              -StorageAccountName '<Storage Name from same subscription and same Location' '
              -ScanResultsContainerName 'vulnerability-assessment' '
              -RecurringScansInterval Weekly '
              -EmailSubscriptionAdmins $true '
              -NotificationEmail @('mail1@mail.com' , 'mail2@mail.com')

  Default Value:

  By default, 'Send reports to' is blank."
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|4.2.4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|3.1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "4.2.2 Ensure that Vulnerability Assessment (VA) is enabled on a SQL server by setting a Storage Account"
      info        : "Enable Vulnerability Assessment (VA) service scans for critical SQL servers and corresponding SQL databases.

    Rationale:

    Enabling Azure Defender for SQL server does not enables Vulnerability Assessment capability for individual SQL databases unless storage account is set to store the scanning data and reports.

    The Vulnerability Assessment service scans databases for known security vulnerabilities and highlight deviations from best practices, such as misconfigurations, excessive permissions, and unprotected sensitive data. Results of the scan include actionable steps to resolve each issue and provide customized remediation scripts where applicable. Additionally an assessment report can be customized by setting an acceptable baseline for permission configurations, feature configurations, and database settings.

    Impact:

    Enabling the Azure Defender for SQL features will incur additional costs for each SQL server."
      solution    : "From Azure Console

    Go to SQL servers

    Select a server instance

    Click on Security Center



    Select Configure next to Enabled at subscription-level

    In Section Vulnerability Assessment Settings, Click Storage Account

    Choose Storage Account (Existing or Create New). Click Ok

    Click Save

    Using Azure PowerShell
    If not already, Enable Azure Defender for a SQL:

    Set-AZSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -EmailAdmins $True

    To enable ADS-VA service by setting Storage Account

    Update-AzSqlServerVulnerabilityAssessmentSetting '
                -ResourceGroupName '<resource group name>''
                -ServerName '<Server Name>''
                -StorageAccountName '<Storage Name from same subscription and same Location' '
                -ScanResultsContainerName 'vulnerability-assessment' '
                -RecurringScansInterval Weekly '
                -EmailSubscriptionAdmins $true '
                -NotificationEmail @('mail1@mail.com' , 'mail2@mail.com')

    Default Value:

    By default Azure Defender for SQL is not enabled for a SQL server. Enabling Azure Defender for SQL does not enable VA scanning by setting Storage Account automatically."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CIS_Recommendation|4.2.2,CSCv7|3.1,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|2A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "4.2.5 Ensure that VA setting 'Also send email notifications to admins and subscription owners' is set for a SQL server"
      info        : "Enable Vulnerability Assessment (VA) setting 'Also send email notifications to admins and subscription owners'.

    Rationale:

    VA scan reports and alerts will be sent to admins and subscription owners by enabling setting 'Also send email notifications to admins and subscription owners'. This may help in reducing time required for identifying risks and taking corrective measures.

    Impact:

    Enabling the Azure Defender for SQL features will incur additional costs for each SQL server."
      solution    : "From Azure Console

    Go to SQL servers

    Select a server instance

    Click on Security Center



    Select Configure next to Enabled at subscription-level

    In Section Vulnerability Assessment Settings, configure Storage Accounts if not already

    Check/enable 'Also send email notifications to admins and subscription owners'

    Click Save

    Using Azure PowerShell
    If not already, Enable Advanced Data Security for a SQL Server:

    Set-AZSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -EmailAdmins $True

    To enable ADS-VA service and Set 'Also send email notifications to admins and subscription owners'

    Update-AzSqlServerVulnerabilityAssessmentSetting '
                -ResourceGroupName '<resource group name>''
                -ServerName '<Server Name>''
                -StorageAccountName '<Storage Name from same subscription and same Location' '
                -ScanResultsContainerName 'vulnerability-assessment' '
                -RecurringScansInterval Weekly '
                -EmailSubscriptionAdmins $true '
                -NotificationEmail @('mail1@mail.com' , 'mail2@mail.com')

    Default Value:

    By default, 'Also send email notifications to admins and subscription owners' is enabled."
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|4.2.5,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|3.1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "4.5 Ensure SQL server's TDE protector is encrypted with Customer-managed key"
      info        : "TDE with Customer-managed key support provides increased transparency and control over the TDE Protector, increased security with an HSM-backed external service, and promotion of separation of duties.

With TDE, data is encrypted at rest with a symmetric key (called the database encryption key) stored in the database or data warehouse distribution. To protect this data encryption key (DEK) in the past, only a certificate that the Azure SQL Service managed could be used. Now, with Customer-managed key support for TDE, the DEK can be protected with an asymmetric key that is stored in the Key Vault. Key Vault is a highly available and scalable cloud-based key store which offers central key management, leverages FIPS 140-2 Level 2 validated hardware security modules (HSMs), and allows separation of management of keys and data, for additional security.

Based on business needs or criticality of data/databases hosted a SQL server, it is recommended that the TDE protector is encrypted by a key that is managed by the data owner (Customer-managed key).

Rationale:

Customer-managed key support for Transparent Data Encryption (TDE) allows user control of TDE encryption keys and restricts who can access them and when. Azure Key Vault, Azure's cloud-based external key management system is the first key management service where TDE has integrated support for Customer-managed keys. With Customer-managed key support, the database encryption key is protected by an asymmetric key stored in the Key Vault. The asymmetric key is set at the server level and inherited by all databases under that server.

Impact:

Once TDE protector is encrypted with a Customer-managed key, it transfers entire responsibility of respective key management on to you and hence you should be more careful about doing any operations on the particular key in order to keep data from corresponding SQL server and Databases hosted accessible.

When deploying Customer Managed Keys it is also prudent to ensure that you also deploy an automated toolset for managing these keys (this should include discovery and key rotation), and Keys should be stored in an HSM or hardware backed keystore E.G. Azure Keyvault).

As far as toolsets go, check with your cryptographic key provider as they may well provide one as an add on to their service."
      solution    : "From Azure Console:
Go to SQL servers
For the desired server instance

Click On Transparent data encryption

Set Use your own key to YES

Browse through your key vaults to Select an existing key or create a new key in Key Vault.

Check Make selected key the default TDE protector

Using Azure CLI:
Use the below command to encrypt SQL server's TDE protector with a Customer-managed key

az sql server tde-key >> Set --resource-group <resourceName> --server <dbServerName> --server-key-type {AzureKeyVault} [--kid <keyIdentifier>]

Default Value:

By Default, Microsoft managed TDE protector is enabled for a SQL server. By default option 'Use your own key' is set to 'ON'."
      reference   : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|4.5,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|16.4,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|2A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

<custom_item>
  description    : "5.1.4 Ensure the storage account containing the container with activity logs is encrypted with BYOK (Use Your Own Key)"
  info           : "The storage account with the activity log export container is configured to use BYOK (Use Your Own Key).

Rationale:

Configuring the storage account with the activity log export container to use BYOK (Use Your Own Key) provides additional confidentiality controls on log data as a given user must have read permission on the corresponding storage account and must be granted decrypt permission by the CMK.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "From Azure Console

In right column, Click service Storage Accounts to access Storage account blade

Click on the storage account name

In Section SETTINGS click Encryption. It will show Storage service encryption configuration pane.

Check Use your own key which will expand Encryption Key Settings

Use option Enter key URI or Select from Key Vault to set up encryption with your own key

Using Azure Command Line Interface 2.0

az storage account update --name <name of the storage account> --resource-group <resource group for a storage account> --encryption-key-source=Microsoft.Keyvault --encryption-key-vault <Key Valut URI> --encryption-key-name <KeyName> --encryption-key-version <Key Version>

Default Value:

By default, for a storage account keySource is set to Microsoft.Storage allowing encryption with vendor Managed key and not the BYOK (Use Your Own Key)."
  reference      : "800-171|3.3.1,800-171|3.3.2,800-171|3.14.6,800-171|3.14.7,800-53|AU-12c.,800-53|SI-4(5),CIS_Recommendation|5.1.4,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|7.1.3.5(a),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|6,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-3,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,ITSG-33|SI-4(5),LEVEL|2A,NESA|M1.2.2,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listLogProfiles"
  json_transform : '.[]|.subscriptionId as $id| .value[].name as $name |"Subscription ID: \($id)" + " Profile Name: \($name)" +" Storage Account ID: \(.value[].properties.storageAccountId)"'
  regex          : "Storage Account ID: "
  expect         : "MANUAL_REVIEW"
  severity       : MEDIUM
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Security Group Rules are present"
      request        : "listNetworkSecurityGroups"
      json_transform : '.[]|.subscriptionId as $id|.value[]|.name as $name| .properties.securityRules[]|"Network Security Group Name: \($name)"+" Rule Name : \(.name)"  + " Access: \(.properties.access) " + " Destination Port Range: \(.properties.destinationPortRange)" + " Direction: \(.properties.direction)" + " Protocol: \(.properties.protocol)" + " Source Address Prefix: \(.properties.sourceAddressPrefix)"'
      regex          : "Access:"
      expect         : 'Access:'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "6.4 Ensure that Network Security Group Flow Log retention period is 'greater than 90 days'"
      info           : "Network Security Group Flow Logs should be enabled and the retention period is set to greater than or equal to 90 days.

Rationale:

Flow logs enable capturing information about IP traffic flowing in and out of network security groups. Logs can be used to check for anomalies and give insight into suspected breaches."
      solution       : "From Azure Console

Go to Network Watcher

Select NSG flow logs blade in the Logs section

Select each Network Security Group from the list

Ensure Status is set to On

Ensure Retention (days) setting greater than 90 days

Select your storage account in the Storage account field

Select Save

Using Azure Command Line Interface 2.0
Enable the NSG flow logs and set the Retention (days) to greater than or equal to 90 days.

az network watcher flow-log configure --nsg <NameorID of the Network Security Group> --enabled true --resource-group <resourceGroupName> --retention 91 --storage-account <NameorID of the storage account to save flow logs>

Default Value:

By default, Network Security Group Flow Logs are disabled."
      reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|6.4,CN-L3|8.1.10.6(d),CSCv7|6.4,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|2A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listNetworkWatcherFlowLogs"
      json_transform : '.[]|.subscriptionId as $id| .resourceGroups[]|.name as $name|.value[]|.name as $nwname|.value[]|.name as $flname|.properties.enabled as $enabled|"Subscription: \($id) " + "Resource Group: \($name)" + " Network Watcher: \($nwname)"+" Flow Logs Name: \($flname)"+" Enabled: \($enabled)"+" Retention Policy: \(.properties.retentionPolicy.days)"'
      regex          : "Enabled: true"
      expect         : 'Enabled: true Retention Policy: (9[1-9]|[1-9][0-9][0-9]+)'
      match_all      : YES
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "6.4 Ensure that Network Security Group Flow Log retention period is 'greater than 90 days'"
      info        : "Network Security Group Flow Logs should be enabled and the retention period is set to greater than or equal to 90 days.

Rationale:

Flow logs enable capturing information about IP traffic flowing in and out of network security groups. Logs can be used to check for anomalies and give insight into suspected breaches."
      solution    : "From Azure Console

Go to Network Watcher

Select NSG flow logs blade in the Logs section

Select each Network Security Group from the list

Ensure Status is set to On

Ensure Retention (days) setting greater than 90 days

Select your storage account in the Storage account field

Select Save

Using Azure Command Line Interface 2.0
Enable the NSG flow logs and set the Retention (days) to greater than or equal to 90 days.

az network watcher flow-log configure --nsg <NameorID of the Network Security Group> --enabled true --resource-group <resourceGroupName> --retention 91 --storage-account <NameorID of the storage account to save flow logs>

Default Value:

By default, Network Security Group Flow Logs are disabled."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|6.4,CN-L3|8.1.10.6(d),CSCv7|6.4,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|2A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Test if VMs exist"
      request        : "listVMs"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgn|.value[]|select(.properties != null)|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgn)"+" VM Name: \(.name)"'
      regex          : 'VM Name:'
      expect         : 'VM Name: .+'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "7.2 Ensure that 'OS and Data' disks are encrypted with CMK"
      info           : "Ensure that OS disks (boot volumes) and data disks (non-boot volumes) are encrypted with CMK.

Rationale:

Encrypting the IaaS VM's OS disk (boot volume), Data disks (non-boot volume) ensures that the entire content is fully unrecoverable without a key and thus protects the volume from unwarranted reads. CMK is superior encryption although requires additional planning.

Impact:

Using CMK/BYOK will entail additional management of keys.

NOTE: You must have your key vault setup to utilize this."
      solution       : "From Azure Console
Note: Disks must be detached from VMs to have encryption changed.

Go to Virtual machines

For each virtual machine, go to Settings

Click on Disks

Click the X to detach the disk from the VM

Now search for Disks and locate the unattached disk

Click the disk then select Encryption

Change your encryption type, then select your encryption set

Click Save

Go back to the VM and re-attach the disk

Using PowerShell

$KVRGname = 'MyKeyVaultResourceGroup';
 $VMRGName = 'MyVirtualMachineResourceGroup';
 $vmName = 'MySecureVM';
 $KeyVaultName = 'MySecureVault';
 $KeyVault = Get-AzKeyVault -VaultName $KeyVaultName -ResourceGroupName $KVRGname;
 $diskEncryptionKeyVaultUrl = $KeyVault.VaultUri;
 $KeyVaultResourceId = $KeyVault.ResourceId;

 Set-AzVMDiskEncryptionExtension -ResourceGroupName $VMRGname -VMName $vmName -DiskEncryptionKeyVaultUrl $diskEncryptionKeyVaultUrl -DiskEncryptionKeyVaultId $KeyVaultResourceId;

NOTE: During encryption it is likely that a reboot will be required, it may take up to 15 minutes to complete the process.
NOTE 2: This may differ for Linux Machines as you may need to set the -skipVmBackup parameter

Default Value:

By default, Azure disks are encrypted using SSE with PMK."
      reference      : "800-171|3.13.11,800-53|SC-13.,CIS_Recommendation|7.2,CSCv7|14.8,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|2A,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listDisksBySubscription"
      json_transform : '.[]|.subscriptionId as $subid|.value[]|.name as $diskname|"SubscriptionID: \($subid)"+" Disk Name: \($diskname)"+" Encryption: \(.properties.encryption.type)"'
      regex          : 'Encryption:'
      not_expect     : 'Encryption: EncryptionAtRestWithPlatformKey'
    </custom_item>

    <custom_item>
      description    : "7.3 Ensure that 'Unattached disks' are encrypted with CMK"
      info           : "Ensure that unattached disks in a subscription are encrypted with a Customer Managed Key (CMK).

Rationale:

Managed disks are encrypted by default with Platform-managed keys. Using Customer-managed keys may provide an additional level of security or meet an organization's regulatory requirements. Encrypting managed disks ensures that its entire content is fully unrecoverable without a key and thus protects the volume from unwarranted reads. Even if the disk is not attached to any of the VMs, there is always a risk where a compromised user account with administrative access to VM service can mount/attach these data disks which may lead to sensitive information disclosure and tampering.

Impact:

Encryption is available only on Standard tier VMs. This might cost you more.

Utilizing and maintaining Customer-managed keys will require additional work to created, protect, and rotate keys."
      solution       : "If data stored in the disk is no longer useful, refer to Azure documentation to delete unattached data disks at:

-https://docs.microsoft.com/en-us/rest/api/compute/disks/delete
-https://docs.microsoft.com/en-us/cli/azure/disk?view=azure-cli-latest#az-disk-delete

If data stored in the disk is important, To encrypt the disk refer azure documentation at:

-https://docs.microsoft.com/en-us/azure/virtual-machines/disks-enable-customer-managed-keys-portal
-https://docs.microsoft.com/en-us/rest/api/compute/disks/update#encryptionsettings

Default Value:

By default, managed disks are encrypted with a Platform-managed key."
      reference      : "800-171|3.13.11,800-53|SC-13.,CIS_Recommendation|7.3,CSCv7|14.8,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|2A,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listDisksBySubscription"
      json_transform : '.[]|.subscriptionId as $subid|.value[]|.name as $diskname|"SubscriptionID: \($subid)"+" Disk Name: \($diskname)"+" Disk State: \(.properties.diskState)"+" Encryption: \(.properties.encryption.type)"'
      not_expect     : 'Disk State: Unattached Encryption: EncryptionAtRestWithPlatformKey'
    </custom_item>

    <custom_item>
      description    : "7.7 Ensure that VHD's are encrypted"
      info           : "VHD (Virtual Hard Disks) are stored in BLOB storage and are the old style disks that were attached to Virtual Machines, and the BLOB VHD was then leased to the VM. By Default storage accounts are not encrypted, and Azure Defender(Security Centre) would then recommend that the OS disks should be encrypted. Storage accounts can be encrypted as a whole using PMK or CMK and this should be turned on for storage accounts containing VHD's.

    Rationale:

    With the changes that have been made that recommend using managed disks that are encrypted by default, we need to also have a recommendation that 'legacy' disk that may for a number of reasons need to be left as VHD's should also be encrypted to protect the data content.

    Impact:

    Depending on how the encryption is implemented will change the size of the impact, if provider managed keys(PMK) are utilised the impact is relatively low, but processes need to be put in place to regularly rotate the keys. If Customer managed keys(CMK) are utilised a key management process needs to be implemented to store and manage key rotation and thus the impact is medium to high depending on user maturity with key management."
      solution       : "From Azure Portal

    Navigate to the storage account that you wish to encrypt

    Select the encryption option

    Select the key type that you wish to use

    If you wish to use an azure managed key (the default), you can save at this point and encryption will be applied to the account.
    If you select customer managed key it will ask for the location of the key (The default is an Azure Keyvault) and the key name.
    Once these are captured, save the configuration and the account will be encrypted using the provided key.
    Using Azure Command Line Interface:
    Create the Keyvault

    az keyvault create --name 'myKV' --resource-group 'myResourceGroup' --location eastus --enabled-for-disk-encryption

    Encrypt the disk and store the key in keyvault

    az vm encryption enable -g MyResourceGroup --name MyVM --disk-encryption-keyvault myKV

    Using Azure Powershell
    This process uses a keyvault to store the keys
    Create the Keyvault

    New-AzKeyvault -name MyKV -ResourceGroupName myResourceGroup -Location EastUS -EnabledForDiskEncryption

    Encrypt the disk and store the key in keyvault

    $KeyVault = Get-AzKeyVault -VaultName MyKV -ResourceGroupName MyResourceGroup

    Set-AzVMDiskEncryptionExtension -ResourceGroupName MyResourceGroup -VMName MyVM -DiskEncryptionKeyVaultUrl $KeyVault.VaultUri -DiskEncryptionKeyVaultId $KeyVault.ResourceId

    Default Value:

    The default value for encryption is 'NO Encryption'"
      reference      : "800-171|3.13.11,800-53|SC-13.,CIS_Recommendation|7.7,CSCv7|13,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|2M,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listStorageAccounts"
      json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Encryption: \(.properties.encryption.services.file.enabled)"'
      regex          : "Encryption:"
      not_expect     : "Encryption: false"
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "7.2 Ensure that 'OS and Data' disks are encrypted with CMK"
      info        : "Ensure that OS disks (boot volumes) and data disks (non-boot volumes) are encrypted with CMK.

Rationale:

Encrypting the IaaS VM's OS disk (boot volume), Data disks (non-boot volume) ensures that the entire content is fully unrecoverable without a key and thus protects the volume from unwarranted reads. CMK is superior encryption although requires additional planning.

Impact:

Using CMK/BYOK will entail additional management of keys.

NOTE: You must have your key vault setup to utilize this."
      solution    : "From Azure Console
Note: Disks must be detached from VMs to have encryption changed.

Go to Virtual machines

For each virtual machine, go to Settings

Click on Disks

Click the X to detach the disk from the VM

Now search for Disks and locate the unattached disk

Click the disk then select Encryption

Change your encryption type, then select your encryption set

Click Save

Go back to the VM and re-attach the disk

Using PowerShell

$KVRGname = 'MyKeyVaultResourceGroup';
 $VMRGName = 'MyVirtualMachineResourceGroup';
 $vmName = 'MySecureVM';
 $KeyVaultName = 'MySecureVault';
 $KeyVault = Get-AzKeyVault -VaultName $KeyVaultName -ResourceGroupName $KVRGname;
 $diskEncryptionKeyVaultUrl = $KeyVault.VaultUri;
 $KeyVaultResourceId = $KeyVault.ResourceId;

 Set-AzVMDiskEncryptionExtension -ResourceGroupName $VMRGname -VMName $vmName -DiskEncryptionKeyVaultUrl $diskEncryptionKeyVaultUrl -DiskEncryptionKeyVaultId $KeyVaultResourceId;

NOTE: During encryption it is likely that a reboot will be required, it may take up to 15 minutes to complete the process.
NOTE 2: This may differ for Linux Machines as you may need to set the -skipVmBackup parameter

Default Value:

By default, Azure disks are encrypted using SSE with PMK."
      reference   : "800-171|3.13.11,800-53|SC-13.,CIS_Recommendation|7.2,CSCv7|14.8,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|2A,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "7.3 Ensure that 'Unattached disks' are encrypted with CMK"
      info        : "Ensure that unattached disks in a subscription are encrypted with a Customer Managed Key (CMK).

Rationale:

Managed disks are encrypted by default with Platform-managed keys. Using Customer-managed keys may provide an additional level of security or meet an organization's regulatory requirements. Encrypting managed disks ensures that its entire content is fully unrecoverable without a key and thus protects the volume from unwarranted reads. Even if the disk is not attached to any of the VMs, there is always a risk where a compromised user account with administrative access to VM service can mount/attach these data disks which may lead to sensitive information disclosure and tampering.

Impact:

Encryption is available only on Standard tier VMs. This might cost you more.

Utilizing and maintaining Customer-managed keys will require additional work to created, protect, and rotate keys."
      solution    : "If data stored in the disk is no longer useful, refer to Azure documentation to delete unattached data disks at:

-https://docs.microsoft.com/en-us/rest/api/compute/disks/delete
-https://docs.microsoft.com/en-us/cli/azure/disk?view=azure-cli-latest#az-disk-delete

If data stored in the disk is important, To encrypt the disk refer azure documentation at:

-https://docs.microsoft.com/en-us/azure/virtual-machines/disks-enable-customer-managed-keys-portal
-https://docs.microsoft.com/en-us/rest/api/compute/disks/update#encryptionsettings

Default Value:

By default, managed disks are encrypted with a Platform-managed key."
      reference   : "800-171|3.13.11,800-53|SC-13.,CIS_Recommendation|7.3,CSCv7|14.8,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|2A,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "7.7 Ensure that VHD's are encrypted"
      info        : "VHD (Virtual Hard Disks) are stored in BLOB storage and are the old style disks that were attached to Virtual Machines, and the BLOB VHD was then leased to the VM. By Default storage accounts are not encrypted, and Azure Defender(Security Centre) would then recommend that the OS disks should be encrypted. Storage accounts can be encrypted as a whole using PMK or CMK and this should be turned on for storage accounts containing VHD's.

    Rationale:

    With the changes that have been made that recommend using managed disks that are encrypted by default, we need to also have a recommendation that 'legacy' disk that may for a number of reasons need to be left as VHD's should also be encrypted to protect the data content.

    Impact:

    Depending on how the encryption is implemented will change the size of the impact, if provider managed keys(PMK) are utilised the impact is relatively low, but processes need to be put in place to regularly rotate the keys. If Customer managed keys(CMK) are utilised a key management process needs to be implemented to store and manage key rotation and thus the impact is medium to high depending on user maturity with key management."
      solution    : "From Azure Portal

    Navigate to the storage account that you wish to encrypt

    Select the encryption option

    Select the key type that you wish to use

    If you wish to use an azure managed key (the default), you can save at this point and encryption will be applied to the account.
    If you select customer managed key it will ask for the location of the key (The default is an Azure Keyvault) and the key name.
    Once these are captured, save the configuration and the account will be encrypted using the provided key.
    Using Azure Command Line Interface:
    Create the Keyvault

    az keyvault create --name 'myKV' --resource-group 'myResourceGroup' --location eastus --enabled-for-disk-encryption

    Encrypt the disk and store the key in keyvault

    az vm encryption enable -g MyResourceGroup --name MyVM --disk-encryption-keyvault myKV

    Using Azure Powershell
    This process uses a keyvault to store the keys
    Create the Keyvault

    New-AzKeyvault -name MyKV -ResourceGroupName myResourceGroup -Location EastUS -EnabledForDiskEncryption

    Encrypt the disk and store the key in keyvault

    $KeyVault = Get-AzKeyVault -VaultName MyKV -ResourceGroupName MyResourceGroup

    Set-AzVMDiskEncryptionExtension -ResourceGroupName MyResourceGroup -VMName MyVM -DiskEncryptionKeyVaultUrl $KeyVault.VaultUri -DiskEncryptionKeyVaultId $KeyVault.ResourceId

    Default Value:

    The default value for encryption is 'NO Encryption'"
      reference   : "800-171|3.13.11,800-53|SC-13.,CIS_Recommendation|7.7,CSCv7|13,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|2M,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

<custom_item>
  description    : "8.3 Ensure that Resource Locks are set for mission critical Azure resources"
  info           : "Resource Manager Locks provide a way for administrators to lock down Azure resources to prevent deletion of, or modifications to, a resource. These locks sit outside of the Role Based Access Controls (RBAC) hierarchy and, when applied, will place restrictions on the resource for all users. These locks are very useful when there is an important resource in a subscription that users should not be able to delete or change. Locks can help prevent accidental and malicious changes or deletion.

Rationale:

As an administrator, it may be necessary to lock a subscription, resource group, or resource to prevent other users in the organization from accidentally deleting or modifying critical resources. The lock level can be set to to CanNotDelete or ReadOnly to achieve this purpose.

CanNotDelete means authorized users can still read and modify a resource, but they can't delete the resource.

ReadOnly means authorized users can read a resource, but they can't delete or update the resource. Applying this lock is similar to restricting all authorized users to the permissions granted by the Reader role.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "From Azure Console

Navigate to the specific Azure Resource or Resource Group

For each of the mission critical resource, click on Locks

Click Add

Give the lock a name and a description, then select the type, CanNotDelete or ReadOnly as appropriate

Using Azure Command Line Interface 2.0
To lock a resource, provide the name of the resource, its resource type, and its resource group name.

az lock create --name <LockName> --lock-type <CanNotDelete/Read-only> --resource-group <resourceGroupName> --resource-name <resourceName> --resource-type <resourceType>

Default Value:

By default, no locks are set."
  reference      : "800-171|3.1.7,800-53|AC-6(10),CIS_Recommendation|8.3,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|14,CSF|PR.AC-4,ITSG-33|AC-6,LEVEL|2M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listManagementLocksByResourceGroup"
  json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.value[]|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+" Lock Name: \(.name)" + " Lock Type: \(.properties.level)"'
  regex          : ".+"
  not_expect     : ".+"
  severity       : MEDIUM
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Web Apps exist"
      request        : "listWebApps"
      json_transform : '.[].resourceGroups[].value[].name'
      regex          : ".*"
      expect         : ".+"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "9.1 Ensure App Service Authentication is set on Azure App Service"
      info           : "Azure App Service Authentication is a feature that can prevent anonymous HTTP requests from reaching the API app, or authenticate those that have tokens before they reach the API app. If an anonymous request is received from a browser, App Service will redirect to a logon page. To handle the logon process, a choice from a set of identity providers can be made, or a custom authentication mechanism can be implemented.

Rationale:

By Enabling App Service Authentication, every incoming HTTP request passes through it before being handled by the application code. It also handles authentication of users with the specified provider(Azure Active Directory, Facebook, Google, Microsoft Account, and Twitter), validation, storing and refreshing of tokens, managing the authenticated sessions and injecting identity information into request headers.

Impact:

This is only required for App Services which require authentication. Enabling on site like a marketing or support website will prevent unauthenticated access which would be undesirable.

Adding Authentication requirement will increase cost of App Service and require additional security components to facilitate the authentication."
      solution       : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to App Services

Click on each App

Under Setting section, Click on Authentication / Authorization

Set App Service Authentication to On

Choose other parameters as per your requirement and Click on Save

Using Azure Command Line Interface
To set App Service Authentication for an existing app, run the following command:

az webapp auth update --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --enabled true

Note
In order to access App Service Authentication settings for Web app using Microsoft API requires Website Contributor permission at subscription level. A custom role can be created in place of website contributor to provide more specific permission and maintain the principle of least privileged access.

Default Value:

By default, App Service Authentication is disabled when a new app is created using the command-line tool or Azure Portal console."
      reference      : "800-171|3.5.1,800-53|IA-2.,CIS_Recommendation|9.1,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|2A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listAppConfig"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $appname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($appname)"+ " App Service Auth: \(.value[].properties.siteAuthEnabled)" '
      regex          : "App Service Auth: "
      expect         : "App Service Auth: true"
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "9.4 Ensure the web app has 'Client Certificates (Incoming client certificates)' set to 'On'"
      info           : "Client certificates allow for the app to request a certificate for incoming requests. Only clients that have a valid certificate will be able to reach the app.

Rationale:

The TLS mutual authentication technique in enterprise environments ensures the authenticity of clients to the server. If incoming client certificates are enabled, then only an authenticated client who has valid certificates can access the app.

Impact:

Utilizing and maintaining client certificates will require additional work to obtain and managed replacement and key rotation."
      solution       : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to App Services

Click on each App

Under Setting section, Click on Configuration

Set the option Client certificate mode located under Incoming client certificates is set to Require

Using Azure Command Line Interface
To set Incoming client certificates value for an existing app, run the following command:

az webapp update --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --set clientCertEnabled=true

Default Value:

By default, incoming client certificates will be disabled when a new app is created using the command-line tool or Azure Portal console."
      reference      : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|9.4,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|2A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listWebApps"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.value[]|.name as $waname|.properties.clientCertEnabled as $ccenabled|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " Client Cert Enabled: \($ccenabled)" '
      regex          : "Client Cert Enabled: "
      expect         : "Client Cert Enabled: true"
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "9.11 Ensure Azure Keyvaults are used to store secrets"
      info           : "Encryption keys ,Certificate thumbprints and Managed Identity Credentials can be coded into the APP service, this renders them visible as part of the configuration, to maintain security of these keys it is better to store in an Azure Keyvault and reference them from the Keyvault.

Rationale:

App secrets control access to the application and thus need to be secured externally to the app configuration, storing the secrets externally and referencing them in the configuration also enables key rotation without having to redeploy the app service.

Impact:

Impact is primarily during the initial setup of the application or redeploying an old app to include this functionality. This will require configuration effort to setup the keyvault and then to configure the app service to use the keyvault."
      solution       : "Remediation has 2 steps

Setup the keyvault

setup the app service to use the keyvault

Set up the keyvault


Using Azure CLI
'az keyvault create --name 'myKV' --resource-group 'myResourceGroup' --location myLocation
Using Azure Powershell
'New-AzKeyvault -name MyKV -ResourceGroupName myResourceGroup -Location myLocation

Set up the App Service to use the keyvault


Sample JSON Template for App Service Configuration

{
    //...
    'resources': [
        {
            'type': 'Microsoft.Storage/storageAccounts',
            'name': '[variables('storageAccountName')]',
            //...
        },
        {
            'type': 'Microsoft.Insights/components',
            'name': '[variables('appInsightsName')]',
            //...
        },
        {
            'type': 'Microsoft.Web/sites',
            'name': '[variables('functionAppName')]',
            'identity': {
                'type': 'SystemAssigned'
            },
            //...
            'resources': [
                {
                    'type': 'config',
                    'name': 'appsettings',
                    //...
                    'dependsOn': [
                        '[resourceId('Microsoft.Web/sites', variables('functionAppName'))]',
                        '[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]',
                        '[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('storageConnectionStringName'))]',
                        '[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('appInsightsKeyName'))]'
                    ],
                    'properties': {
                        'AzureWebJobsStorage': '[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('storageConnectionStringResourceId')).secretUriWithVersion, ')')]',
                        'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING': '[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('storageConnectionStringResourceId')).secretUriWithVersion, ')')]',
                        'APPINSIGHTS_INSTRUMENTATIONKEY': '[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('appInsightsKeyResourceId')).secretUriWithVersion, ')')]',
                        'WEBSITE_ENABLE_SYNC_UPDATE_SITE': 'true'
                        //...
                    }
                },
                {
                    'type': 'sourcecontrols',
                    'name': 'web',
                    //...
                    'dependsOn': [
                        '[resourceId('Microsoft.Web/sites', variables('functionAppName'))]',
                        '[resourceId('Microsoft.Web/sites/config', variables('functionAppName'), 'appsettings')]'
                    ],
                }
            ]
        },
        {
            'type': 'Microsoft.KeyVault/vaults',
            'name': '[variables('keyVaultName')]',
            //...
            'dependsOn': [
                '[resourceId('Microsoft.Web/sites', variables('functionAppName'))]'
            ],
            'properties': {
                //...
                'accessPolicies': [
                    {
                        'tenantId': '[reference(concat('Microsoft.Web/sites/',  variables('functionAppName'), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').tenantId]',
                        'objectId': '[reference(concat('Microsoft.Web/sites/',  variables('functionAppName'), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').principalId]',
                        'permissions': {
                            'secrets': [ 'get' ]
                        }
                    }
                ]
            },
            'resources': [
                {
                    'type': 'secrets',
                    'name': '[variables('storageConnectionStringName')]',
                    //...
                    'dependsOn': [
                        '[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]',
                        '[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]'
                    ],
                    'properties': {
                        'value': '[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountResourceId'),'2015-05-01-preview').key1)]'
                    }
                },
                {
                    'type': 'secrets',
                    'name': '[variables('appInsightsKeyName')]',
                    //...
                    'dependsOn': [
                        '[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]',
                        '[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]'
                    ],
                    'properties': {
                        'value': '[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]'
                    }
                }
            ]
        }
    ]
}"
      reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|9.11,CN-L3|8.1.10.6(d),CSCv7|13,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listVaultsByResourceGroup"
      json_transform : '.[].resourceGroups[]|if ((.value | length) != 0) then "Key vaults exist" else "Key vaults do not exist" end'
      regex          : "Key vaults"
      expect         : "Key vaults exist"
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "9.1 Ensure App Service Authentication is set on Azure App Service"
      info        : "Azure App Service Authentication is a feature that can prevent anonymous HTTP requests from reaching the API app, or authenticate those that have tokens before they reach the API app. If an anonymous request is received from a browser, App Service will redirect to a logon page. To handle the logon process, a choice from a set of identity providers can be made, or a custom authentication mechanism can be implemented.

Rationale:

By Enabling App Service Authentication, every incoming HTTP request passes through it before being handled by the application code. It also handles authentication of users with the specified provider(Azure Active Directory, Facebook, Google, Microsoft Account, and Twitter), validation, storing and refreshing of tokens, managing the authenticated sessions and injecting identity information into request headers.

Impact:

This is only required for App Services which require authentication. Enabling on site like a marketing or support website will prevent unauthenticated access which would be undesirable.

Adding Authentication requirement will increase cost of App Service and require additional security components to facilitate the authentication."
      solution    : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to App Services

Click on each App

Under Setting section, Click on Authentication / Authorization

Set App Service Authentication to On

Choose other parameters as per your requirement and Click on Save

Using Azure Command Line Interface
To set App Service Authentication for an existing app, run the following command:

az webapp auth update --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --enabled true

Note
In order to access App Service Authentication settings for Web app using Microsoft API requires Website Contributor permission at subscription level. A custom role can be created in place of website contributor to provide more specific permission and maintain the principle of least privileged access.

Default Value:

By default, App Service Authentication is disabled when a new app is created using the command-line tool or Azure Portal console."
      reference   : "800-171|3.5.1,800-53|IA-2.,CIS_Recommendation|9.1,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|2A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "9.4 Ensure the web app has 'Client Certificates (Incoming client certificates)' set to 'On'"
      info        : "Client certificates allow for the app to request a certificate for incoming requests. Only clients that have a valid certificate will be able to reach the app.

Rationale:

The TLS mutual authentication technique in enterprise environments ensures the authenticity of clients to the server. If incoming client certificates are enabled, then only an authenticated client who has valid certificates can access the app.

Impact:

Utilizing and maintaining client certificates will require additional work to obtain and managed replacement and key rotation."
      solution    : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to App Services

Click on each App

Under Setting section, Click on Configuration

Set the option Client certificate mode located under Incoming client certificates is set to Require

Using Azure Command Line Interface
To set Incoming client certificates value for an existing app, run the following command:

az webapp update --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --set clientCertEnabled=true

Default Value:

By default, incoming client certificates will be disabled when a new app is created using the command-line tool or Azure Portal console."
      reference   : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|9.4,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|2A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "9.11 Ensure Azure Keyvaults are used to store secrets"
      info        : "Encryption keys ,Certificate thumbprints and Managed Identity Credentials can be coded into the APP service, this renders them visible as part of the configuration, to maintain security of these keys it is better to store in an Azure Keyvault and reference them from the Keyvault.

Rationale:

App secrets control access to the application and thus need to be secured externally to the app configuration, storing the secrets externally and referencing them in the configuration also enables key rotation without having to redeploy the app service.

Impact:

Impact is primarily during the initial setup of the application or redeploying an old app to include this functionality. This will require configuration effort to setup the keyvault and then to configure the app service to use the keyvault."
      solution    : "Remediation has 2 steps

Setup the keyvault

setup the app service to use the keyvault

Set up the keyvault


Using Azure CLI
'az keyvault create --name 'myKV' --resource-group 'myResourceGroup' --location myLocation
Using Azure Powershell
'New-AzKeyvault -name MyKV -ResourceGroupName myResourceGroup -Location myLocation

Set up the App Service to use the keyvault


Sample JSON Template for App Service Configuration

{
    //...
    'resources': [
        {
            'type': 'Microsoft.Storage/storageAccounts',
            'name': '[variables('storageAccountName')]',
            //...
        },
        {
            'type': 'Microsoft.Insights/components',
            'name': '[variables('appInsightsName')]',
            //...
        },
        {
            'type': 'Microsoft.Web/sites',
            'name': '[variables('functionAppName')]',
            'identity': {
                'type': 'SystemAssigned'
            },
            //...
            'resources': [
                {
                    'type': 'config',
                    'name': 'appsettings',
                    //...
                    'dependsOn': [
                        '[resourceId('Microsoft.Web/sites', variables('functionAppName'))]',
                        '[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]',
                        '[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('storageConnectionStringName'))]',
                        '[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('appInsightsKeyName'))]'
                    ],
                    'properties': {
                        'AzureWebJobsStorage': '[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('storageConnectionStringResourceId')).secretUriWithVersion, ')')]',
                        'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING': '[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('storageConnectionStringResourceId')).secretUriWithVersion, ')')]',
                        'APPINSIGHTS_INSTRUMENTATIONKEY': '[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('appInsightsKeyResourceId')).secretUriWithVersion, ')')]',
                        'WEBSITE_ENABLE_SYNC_UPDATE_SITE': 'true'
                        //...
                    }
                },
                {
                    'type': 'sourcecontrols',
                    'name': 'web',
                    //...
                    'dependsOn': [
                        '[resourceId('Microsoft.Web/sites', variables('functionAppName'))]',
                        '[resourceId('Microsoft.Web/sites/config', variables('functionAppName'), 'appsettings')]'
                    ],
                }
            ]
        },
        {
            'type': 'Microsoft.KeyVault/vaults',
            'name': '[variables('keyVaultName')]',
            //...
            'dependsOn': [
                '[resourceId('Microsoft.Web/sites', variables('functionAppName'))]'
            ],
            'properties': {
                //...
                'accessPolicies': [
                    {
                        'tenantId': '[reference(concat('Microsoft.Web/sites/',  variables('functionAppName'), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').tenantId]',
                        'objectId': '[reference(concat('Microsoft.Web/sites/',  variables('functionAppName'), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').principalId]',
                        'permissions': {
                            'secrets': [ 'get' ]
                        }
                    }
                ]
            },
            'resources': [
                {
                    'type': 'secrets',
                    'name': '[variables('storageConnectionStringName')]',
                    //...
                    'dependsOn': [
                        '[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]',
                        '[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]'
                    ],
                    'properties': {
                        'value': '[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountResourceId'),'2015-05-01-preview').key1)]'
                    }
                },
                {
                    'type': 'secrets',
                    'name': '[variables('appInsightsKeyName')]',
                    //...
                    'dependsOn': [
                        '[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]',
                        '[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]'
                    ],
                    'properties': {
                        'value': '[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]'
                    }
                }
            ]
        }
    ]
}"
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|9.11,CN-L3|8.1.10.6(d),CSCv7|13,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

</check_type>
