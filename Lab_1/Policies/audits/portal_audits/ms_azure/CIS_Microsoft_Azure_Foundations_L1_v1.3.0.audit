#
# This script is Copyright (C) 2004-2021 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
#
# $Revision: 1.2 $
# $Date: 2021/06/17 $
#
# description	: CIS Microsoft Azure Foundations v1.3.0 audit
#
#<ui_metadata>
#<display_name>CIS Microsoft Azure Foundations v1.3.0 L1</display_name>
#<spec>
#  <type>CIS</type>
#  <name>CIS Microsoft Azure Foundations v1.3.0 L1</name>
#  <version>1.3.0</version>
#  <link>https://workbench.cisecurity.org/files/3131</link>
#</spec>
#<labels>microsoft,azure,cloud</labels>
#<benchmark_refs>CSCv7,LEVEL,CIS_Recommendation</benchmark_refs>
#</ui_metadata>

<check_type:"microsoft_azure">

<report type:"WARNING">
  description : "1.1 Ensure that multi-factor authentication is enabled for all privileged users"
  info        : "Enable multi-factor authentication for all user credentials who have write access to Azure resources. These include roles like

Service Co-Administrators

Subscription Owners

Contributors

Rationale:

Multi-factor authentication requires an individual to present a minimum of two separate forms of authentication before access is granted. Multi-factor authentication provides additional assurance that the individual attempting to gain access is who they claim to be. With multi-factor authentication, an attacker would need to compromise at least two different authentication mechanisms, increasing the difficulty of compromise and thus reducing the risk.

Impact:

Users would require two forms of authentication before any action is granted. Also, this requires an overhead for managing dual forms of authentication.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Follow Microsoft Azure documentation and setup multi-factor authentication in your environment.
https://docs.microsoft.com/en-us/azure/active-directory/authentication/tutorial-enable-azure-mfa

Default Value:

By default, multi-factor authentication is disabled for all users."
  reference   : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|4.5,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1M,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,QCSC-v1|13.2,QCSC-v1|5.2.2,TBA-FIISB|35.1,TBA-FIISB|36.1,CIS_Recommendation|1.1"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<custom_item>
  description    : "1.3 Ensure guest users are reviewed on a monthly basis"
  info           : "Azure AD is extended to include Azure AD B2B collaboration, allowing you to invite people from outside your organization to be guest users in your cloud account and sign in with their own work, school, or social identities. Guest users allow you to share your company's applications and services with users from any other organization, while maintaining control over your own corporate data.

Work with external partners, large or small, even if they don't have Azure AD or an IT department. A simple invitation and redemption process lets partners use their own credentials to access your company's resources a a guest user.

Rationale:

Guest users in the Azure AD are generally required for collaboration purposes in Office 365, and may also be required for Azure functions in enterprises with multiple Azure tenants, Guest users should be reviewed on a regular basis, at least annually, Guest users should not be granted administrative roles where possible.

Guest users are typically added outside your employee on-boarding/off-boarding process and could potentially be overlooked indefinitely leading to a potential vulnerability.

Guest users should be review on a monthly basis to ensure that inactive and unneeded accounts are removed.

Impact:

Until you have a business need to provide guest access to any user, avoid creating guest users. If guest accounts are being used, they should be removed when no longer required.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "From Azure Console

Go to Azure Active Directory

Go to Users and group

Go to All Users

Click on Show drop down and select Guest users only

Delete all 'Guest' users that are no longer required or are inactive.

It is good practice to use a dynamic group to manage guest users.
To create the dynamic group:

Navigate to the Active Directory blade in the Azure Portal

Select the Groups item

Create new

Type of dynamic

Use the following dynamic selection rule. '(user.userType -eq 'Guest')'

Once the group has been created, select access reviews option and create a new access review with a period of monthly and send to relevant administrators for review."
  reference      : "800-171|3.1.1,800-53|AC-3,CIS_Recommendation|1.3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|16.8,CSF|PR.AC-4,CSF|PR.PT-3,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|1A,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "azuread"
  json_transform : '.[]|.tenantId as $id|.users[]| "Tenant ID: \($id)" + " DisplayName: \(.displayName)" + " UserPrincipalName: \(.userPrincipalName)" + " UserType: \(.userType)"'
  regex          : 'UserType:'
  not_expect     : 'UserType: Guest$'
  severity       : MEDIUM
</custom_item>

<report type:"WARNING">
  description : "1.5 Ensure that 'Number of methods required to reset' is set to '2'"
  info        : "Ensure that two alternate forms of identification are provided before allowing a password reset.

Rationale:

Like multi-factor authentication, setting up dual identification before allowing a password reset ensures that the user identity is confirmed via two separate forms of identification. With dual identification set, an attacker would require compromising both the identity forms before he/she could maliciously reset a user's password.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to Users

Go to Password reset

Go to Authentication methods

Set the Number of methods required to reset to 2



Default Value:

By default, the 'Number of methods required to reset' is set to '2'."
  reference   : "CSCv7|16.3,LEVEL|1M,CIS_Recommendation|1.5"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.6 Ensure that 'Number of days before users are asked to re-confirm their authentication information' is not set to '0' - 0"
  info        : "Ensure that the number of days before users are asked to re-confirm their authentication information is not set to 0.

Rationale:

If authentication re-confirmation is disabled, registered users will never be prompted to re-confirm their existing authentication information. If the authentication information for a user, such as a phone number or email changes, then the password reset information for that user reverts to the previously registered authentication information.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to Users

Go to Password reset

Go to Registration

Set the Number of days before users are asked to re-confirm their authentication information to your organization defined frequency

Default Value:

By default, the 'Number of days before users are asked to re-confirm their authentication information' is set to '180 days'."
  reference   : "CSCv7|16,LEVEL|1M,CIS_Recommendation|1.6"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.7 Ensure that 'Notify users on password resets?' is set to 'Yes'"
  info        : "Ensure that users are notified on their primary and secondary emails on password resets.

Rationale:

User notification on password reset is a passive way of confirming password reset activity. It helps the user to recognize unauthorized password reset activities.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to Users

Go to Password reset

Go to Notification

Set Notify users on password resets? to Yes

Default Value:

By default, 'Notify users on password resets?' is set to 'Yes'."
  reference   : "CSCv7|16,LEVEL|1M,CIS_Recommendation|1.7"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.15 Ensure that 'Restrict access to Azure AD administration portal' is set to 'Yes'"
  info        : "Restrict access to the Azure AD administration portal to administrators only.

Rationale:

The Azure AD administrative portal has sensitive data. All non-administrators should be prohibited from accessing any Azure AD data in the administration portal to avoid exposure.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to Users

Go to User settings

Set Restrict access to Azure AD administration portal to Yes

Default Value:

By default, Restrict access to Azure AD administration portal is set to No."
  reference   : "CSCv7|14,CSCv7|4,LEVEL|1M,CIS_Recommendation|1.15"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.20 Ensure that 'Require Multi-Factor Auth to join devices' is set to 'Yes'"
  info        : "Joining devices to the active directory should require Multi-factor authentication.

Rationale:

Multi-factor authentication is recommended when adding devices to Azure AD. When set to 'Yes', users who are adding devices from the internet must first use the second method of authentication before their device is successfully added to the directory. This ensures that rogue devices are not added to the directory for a compromised user account.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Active Directory

Go to Devices

Go to Device settings

Set Require Multi-Factor Auth to join devices to Yes

Default Value:

By default, Require Multi-Factor Auth to join devices is set to No."
  reference   : "CSCv7|16.3,LEVEL|1M,CIS_Recommendation|1.20"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "1.22 Ensure Security Defaults is enabled on Azure Active Directory"
  info        : "Security defaults in Azure Active Directory (Azure AD) make it easier to be secure and help protect your organization. Security defaults contain preconfigured security settings for common attacks.

Microsoft is making security defaults available to everyone. The goal is to ensure that all organizations have a basic level of security-enabled at no extra cost. You turn on security defaults in the Azure portal.

Rationale:

Security defaults provide secure default settings that we manage on behalf of organizations to keep customers safe until they are ready to manage their own identity security settings.

For example doing the following:

Requiring all users and admins to register for MFA.

Challenging users with MFA - mostly when they show up on a new device or app, but more often for critical roles and tasks.

Disabling authentication from legacy authentication clients, which can't do MFA.

Impact:

Enabling security defaults may negatively impact the functionality of other Microsoft services, such as MS365. This recommendation should be implemented initially and then may be overridden by other service/product specific CIS Benchmarks.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console
To enable security defaults in your directory:

Sign in to the Azure portal as a security administrator, Conditional Access administrator, or global administrator.

Browse to Azure Active Directory > Properties.

Select Manage security defaults.

Set the Enable security defaults toggle to Yes.

Select Save."
  reference   : "CSCv7|13,LEVEL|1A,CIS_Recommendation|1.22"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<custom_item>
  description    : "2.11 Ensure that 'Automatic provisioning of monitoring agent' is set to 'On'"
  info           : "Enable automatic provisioning of the monitoring agent to collect security data.

Rationale:

When Automatic provisioning of monitoring agent is turned on, Azure Security Center provisions the Microsoft Monitoring Agent on all existing supported Azure virtual machines and any new ones that are created. The Microsoft Monitoring Agent scans for various security-related configurations and events such as system updates, OS vulnerabilities, endpoint protection, and provides alerts."
  solution       : "From Azure Console

Go to Security Center

Click on Pricing & Settings

Click on a subscription

Click on Data Collection

Set Automatic provisioning to On

Click save

Repeat the above for any additional subscriptions.
Using Azure Command Line Interface 2.0
Use the below command to set Automatic provisioning of monitoring agent to On.

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/autoProvisioningSettings/default?api-version=2017-08-01-preview -d@'input.json''

Where input.json contains the Request body json data as mentioned below.

   {
  'id': '/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/autoProvisioningSettings/default',
  'name': 'default',
  'type': 'Microsoft.Security/autoProvisioningSettings',
  'properties': {
    'autoProvision': 'On'
  }
}

Default Value:

By default, Automatic provisioning of monitoring agent is set to On."
  reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|2.11,CN-L3|8.1.10.6(d),CSCv7|3.1,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listAutoProvisioningSettings"
  json_transform : '.[]|.value|.id as $id|.name as $name|.type as $type|"Name: \($name)\n"+"ID: \($id)\n"+"Type: \($type\n)\n"+"Auto Provisioning: \(.properties.autoProvision)"'
  regex          : "Auto Provisioning:"
  not_expect     : "Auto Provisioning: Off"
</custom_item>

<custom_item>
  description    : "2.12 Ensure any of the ASC Default policy setting is not set to 'Disabled'"
  info           : "None of the settings offered by ASC Default policy should be set to effect 'Disabled'.

Rationale:

A security policy defines the desired configuration of your workloads and helps ensure compliance with company or regulatory security requirements. ASC Default policy is associated with every subscription by default. ASC default policy assignment is set of security recommendations based on best practices. Enabling recommendations in ASC default policy ensures that Azure security center provides ability to monitor all of the supported recommendations and allow automated action optionally for few of the supported recommendations."
  solution       : "From Azure Console

Navigate to Azure Policy

On Policy 'Overview' blade, Click on Policy ASC Default (Subscription:Subscription_ID)

On 'ASC Default' blade, Click on Edit Assignments

In section PARAMETERS, configure the impacted setting to any other available value than Disabled or empty

Click Save"
  reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|2.12,CN-L3|8.1.10.6(d),CSCv7|14.8,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listSecurityCenterBuiltIns"
  json_transform : '.[]|.subscriptionId as $subid|.value.properties.parameters[]|.value as $parameter| "Subscription ID: \($subid)" + " Parameter: \($parameter)"'
  regex          : "Parameter: "
  not_expect     : "Parameter: Disabled"
  match_all      : YES
</custom_item>

<custom_item>
  description    : "2.13 Ensure 'Additional email addresses' is configured with a security contact email"
  info           : "Security Center emails the subscription owners whenever a high-severity alert is triggered for their subscription. You should provide a security contact email address as an additional email address.

Rationale:

Azure Security Center emails the Subscription Owner to notify them about security alerts. Adding your Security Contact's email address to the 'Additional email addresses' field ensures that your organization's Security Team is included in these alerts. This ensures that the proper people are aware of any potential compromise in order to mitigate the risk in a timely fashion.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "From Azure Console

Go to Security Center

Click on Pricing & settings

Click on the appropriate Management Group, Subscription, or Workspace

Click on Email notifications

Enter a valid security contact email address (or multiple addresses separated by commas) in the Additional email addresses field

Click Save

Using Azure Command Line Interface 2.0
Use the below command to set Security contact emails to On.

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts/default1?api-version=2017-08-01-preview -d@'input.json''

Where input.json contains the Request body json data as mentioned below. And replace validEmailAddress with email ids csv for multiple.

    {
      'id': '/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/securityContacts/default',
      'name': 'default',
      'type': 'Microsoft.Security/securityContacts',
      'properties': {
        'email': '<validEmailAddress>',
        'alertNotifications': 'On',
        'alertsToAdmins': 'On'
      }
    }

Default Value:

By default, there are no additional email addresses entered."
  reference      : "800-53|SI-7(2),CIS_Recommendation|2.13,CSCv7|3,CSF|PR.DS-6,ITSG-33|SI-7(2),LEVEL|1A,NESA|T3.4.1,NESA|T7.3.2,NESA|T7.3.3,QCSC-v1|3.2"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listSecurityContacts"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Security Contacts: \(.properties.email)"'
  regex          : "Security Contacts:"
  expect         : "MANUAL_REVIEW"
  severity       : MEDIUM
</custom_item>

<custom_item>
  description    : "2.14 Ensure that 'Notify about alerts with the following severity' is set to 'High'"
  info           : "Enables emailing security alerts to the subscription owner or other designated security contact.

Rationale:

Enabling security alert emails ensures that security alert emails are received from Microsoft. This ensures that the right people are aware of any potential security issues and are able to mitigate the risk."
  solution       : "From Azure Console

Go to 'Security Center

Click on Pricing & settings

Click on the appropriate Management Group, Subscription, or Workspace

Click on Email notifications

Under 'Notification types', check the check box next to Notify about alerts with the following severity (or higher): and select High from the drop down menu

Click Save

Using Azure Command Line Interface 2.0
Use the below command to set Send email notification for high severity alerts to On.

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts/default1?api-version=2017-08-01-preview -d@'input.json''

Where input.json contains the Request body json data as mentioned below.
And replace validEmailAddress with email ids csv for multiple.

       {
      'id': '/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/securityContacts/default1',
      'name': 'default1',
      'type': 'Microsoft.Security/securityContacts',
      'properties': {
        'email': '<validEmailAddress>',
        'alertNotifications': 'On',
        'alertsToAdmins': 'On'
      }
    }

Default Value:

By default, Send email notification for high severity alerts is not set."
  reference      : "800-53|SI-7(2),CIS_Recommendation|2.14,CSCv7|3,CSF|PR.DS-6,ITSG-33|SI-7(2),LEVEL|1A,NESA|T3.4.1,NESA|T7.3.2,NESA|T7.3.3,QCSC-v1|3.2"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listSecurityContacts"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Alert Notifications: \(.properties.alertNotifications)"'
  regex          : "Alert Notifications:"
  not_expect     : "Alert Notifications: off"
</custom_item>

<custom_item>
  description    : "2.15 Ensure that 'All users with the following roles' is set to 'Owner'"
  info           : "Enable security alert emails to subscription owners.

Rationale:

Enabling security alert emails to subscription owners ensures that they receive security alert emails from Microsoft. This ensures that they are aware of any potential security issues and can mitigate the risk in a timely fashion."
  solution       : "From Azure Console

Go to Security Center

Click on Pricing & settings

Click on the appropriate Management Group, Subscription, or Workspace

Click on Email notifications

In the drop down of the All users with the following roles field select Owner

Click Save

Using Azure Command Line Interface 2.0
Use the below command to set Send email also to subscription owners to On.

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts/default1?api-version=2017-08-01-preview -d@'input.json''

Where input.json contains the Request body json data as mentioned below.
And replace validEmailAddress with email ids csv for multiple.

    {
      'id': '/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/securityContacts/default1',
      'name': 'default1',
      'type': 'Microsoft.Security/securityContacts',
      'properties': {
        'email': '<validEmailAddress>',
        'alertNotifications': 'On',
        'alertsToAdmins': 'On'
      }
    }

Default Value:

By default, Owner is selected"
  reference      : "800-53|SI-7(2),CIS_Recommendation|2.15,CSCv7|3,CSF|PR.DS-6,ITSG-33|SI-7(2),LEVEL|1A,NESA|T3.4.1,NESA|T7.3.2,NESA|T7.3.3,QCSC-v1|3.2"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listSecurityContacts"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Alert to Admins: \(.properties.alertsToAdmins)"'
  regex          : "Alert to Admins:"
  not_expect     : "Alert to Admins: off"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Storage Accounts Exist"
      request        : "listStorageAccounts"
      json_transform : '.[].value[].name'
      regex          : ".*"
      expect         : ".+"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "3.1 Ensure that 'Secure transfer required' is set to 'Enabled'"
      info           : "Enable data encryption in transit.

Rationale:

The secure transfer option enhances the security of a storage account by only allowing requests to the storage account by a secure connection. For example, when calling REST APIs to access storage accounts, the connection must use HTTPS. Any requests using HTTP will be rejected when 'secure transfer required' is enabled. When using the Azure files service, connection without encryption will fail, including scenarios using SMB 2.1, SMB 3.0 without encryption, and some flavors of the Linux SMB client. Because Azure storage doesn't support HTTPS for custom domain names, this option is not applied when using a custom domain name."
      solution       : "From Azure Console

Go to Storage Accounts

For each storage account, go to Configuration

Set Secure transfer required to Enabled

Using Azure Command Line Interface 2.0
Use the below command to enable Secure transfer required for a Storage Account

az storage account update --name <storageAccountName> --resource-group <resourceGroupName> --https-only true

Default Value:

By default, Secure transfer required is set to Disabled."
      reference      : "800-171|3.13.11,800-53|SC-13.,CIS_Recommendation|3.1,CSCv7|14.4,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|1A,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listStorageAccounts"
      json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Secure Transfer Required: \(.properties.supportsHttpsTrafficOnly)"'
      regex          : "Secure Transfer Required:"
      not_expect     : "Secure Transfer Required: false"
    </custom_item>

    <report type:"WARNING">
      description : "3.2 Ensure that storage account access keys are periodically regenerated"
      info        : "Regenerate storage account access keys periodically.

Rationale:

When a storage account is created, Azure generates two 512-bit storage access keys, which are used for authentication when the storage account is accessed. Rotating these keys periodically ensures that any inadvertent access or exposure does not result in these keys being compromised.

Impact:

Regenerating access keys can affect services in Azure as well as the organization's applications that are dependent on the storage account. All clients that use the access key to access the storage account must be updated to use the new key.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Follow Microsoft Azure documentation for regenerating storage account access keys.

Default Value:

By default, access keys are not regenerated periodically."
      reference   : "CSCv7|16,LEVEL|1M,CIS_Recommendation|3.2"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"WARNING">
      description : "3.4 Ensure that shared access signature tokens expire within an hour"
      info        : "Expire shared access signature tokens within an hour.

Rationale:

A shared access signature (SAS) is a URI that grants restricted access rights to Azure Storage resources. A shared access signature can be provided to clients who should not be trusted with the storage account key but for whom it may be necessary to delegate access to certain storage account resources. Providing a shared access signature URI to these clients allows them access to a resource for a specified period of time. This time should be set as low as possible and preferably no longer than an hour.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "When generating shared access signature tokens, use start and end time such that it falls within an hour.
From Azure Console

Go to Storage Accounts

For each storage account, go to Shared access signature

Set Start and expiry date/time within an hour

note At this point of time, there is no API/CLI mechanism available to programmatically conduct security assessment for this recommendation.

Default Value:

By default, expiration for shared access signature is set to 8 hours."
      reference   : "CSCv7|16.10,LEVEL|1M,CIS_Recommendation|3.4"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"WARNING">
      description : "3.5 Ensure that 'Public access level' is set to Private for blob containers"
      info        : "Disable anonymous access to blob containers and disallow blob public access on storage account.

Rationale:

Anonymous, public read access to a container and its blobs can be enabled in Azure Blob storage. It grants read-only access to these resources without sharing the account key, and without requiring a shared access signature. It is recommended not to provide anonymous access to blob containers until, and unless, it is strongly desired. A shared access signature token should be used for providing controlled and timed access to blob containers. If no anonymous access is needed on the storage account, it's recommended to set allowBlobPublicAccess false.

Impact:

Access using shared access signatures will have to be managed.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "From Azure Console
First, follow Microsoft documentation and created shared access signature tokens for your blob containers. Then,

Go to Storage Accounts

For each storage account, go to Containers under BLOB SERVICE

For each container, click Access policy

Set Public access level to Private (no anonymous access)

For each storage account, go to Allow Blob public access in Configuration

Set Disabled if no anonymous access is needed on the storage account

Using Azure Command Line Interface 2.0

Identify the container name from the audit command

Set the permission for public access to private(off) for the above container name, using the below command

az storage container set-permission --name <containerName> --public-access off --account-name <accountName> --account-key <accountKey>

Set Disabled if no anonymous access is wanted on the storage account

az storage account update --name <storage-account> --resource-group <resource-group> --allow-blob-public-access false

Default Value:

By default, Public access level is set to Private (no anonymous access) for blob containers. By default, AllowBlobPublicAccess is set to Null (allow in effect) for storage account."
      reference   : "CSCv7|16,LEVEL|1A,CIS_Recommendation|3.5"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"WARNING">
      description : "3.8 Ensure soft delete is enabled for Azure Storage"
      info        : "The Azure Storage blobs contain data like ePHI, Financial, secret or personal. Erroneously modified or deleted accidentally by an application or other storage account user cause data loss or data unavailability.

It is recommended the Azure Storage be made recoverable by enabling soft delete configuration. This is to save and recover data when blobs or blob snapshots are deleted.

Rationale:

There could be scenarios where users accidentally run delete commands on Azure Storage blobs or blob snapshot or attacker/malicious user does it deliberately to cause disruption. Deleting an Azure Storage blob leads to immediate data loss / non-accessible data.

There is a property of Azure Storage blob service to make recoverable blobs.

Soft Delete

Enabling this configuration for azure storage ensures that even if blobs/data were deleted from the storage account, Blobs/data objects remain recoverable for a particular time which set in the 'Retention policies' [Retention policies can be 7 days to 365 days].

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "From Azure Console:

Go to Storage Account

For each Storage Account, navigate to Data Protection

Select set soft delete enabled and enter a number of days you want to retain soft deleted data.

Using Azure Command-Line Interface 2.0:
Update retention days in below command

az storage blob service-properties delete-policy update --days-retained <RetentionDaysValue> --account-name <StorageAccountName> --enable true

Default Value:

When new storage account is created, soft delete is by default disabled."
      reference   : "CSCv7|10,LEVEL|1A,CIS_Recommendation|3.8"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </then>

  <else>
    <report type:"PASSED">
      description : "3.1 Ensure that 'Secure transfer required' is set to 'Enabled'"
      info        : "Enable data encryption in transit.

Rationale:

The secure transfer option enhances the security of a storage account by only allowing requests to the storage account by a secure connection. For example, when calling REST APIs to access storage accounts, the connection must use HTTPS. Any requests using HTTP will be rejected when 'secure transfer required' is enabled. When using the Azure files service, connection without encryption will fail, including scenarios using SMB 2.1, SMB 3.0 without encryption, and some flavors of the Linux SMB client. Because Azure storage doesn't support HTTPS for custom domain names, this option is not applied when using a custom domain name."
      solution    : "From Azure Console

Go to Storage Accounts

For each storage account, go to Configuration

Set Secure transfer required to Enabled

Using Azure Command Line Interface 2.0
Use the below command to enable Secure transfer required for a Storage Account

az storage account update --name <storageAccountName> --resource-group <resourceGroupName> --https-only true

Default Value:

By default, Secure transfer required is set to Disabled."
      reference   : "800-171|3.13.11,800-53|SC-13.,CIS_Recommendation|3.1,CSCv7|14.4,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|1A,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "3.2 Ensure that storage account access keys are periodically regenerated"
      info        : "Regenerate storage account access keys periodically.

Rationale:

When a storage account is created, Azure generates two 512-bit storage access keys, which are used for authentication when the storage account is accessed. Rotating these keys periodically ensures that any inadvertent access or exposure does not result in these keys being compromised.

Impact:

Regenerating access keys can affect services in Azure as well as the organization's applications that are dependent on the storage account. All clients that use the access key to access the storage account must be updated to use the new key."
      solution    : "Follow Microsoft Azure documentation for regenerating storage account access keys.

Default Value:

By default, access keys are not regenerated periodically."
      reference   : "CSCv7|16,LEVEL|1M,CIS_Recommendation|3.2"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "3.4 Ensure that shared access signature tokens expire within an hour"
      info        : "Expire shared access signature tokens within an hour.

Rationale:

A shared access signature (SAS) is a URI that grants restricted access rights to Azure Storage resources. A shared access signature can be provided to clients who should not be trusted with the storage account key but for whom it may be necessary to delegate access to certain storage account resources. Providing a shared access signature URI to these clients allows them access to a resource for a specified period of time. This time should be set as low as possible and preferably no longer than an hour."
      solution    : "When generating shared access signature tokens, use start and end time such that it falls within an hour.
From Azure Console

Go to Storage Accounts

For each storage account, go to Shared access signature

Set Start and expiry date/time within an hour

note At this point of time, there is no API/CLI mechanism available to programmatically conduct security assessment for this recommendation.

Default Value:

By default, expiration for shared access signature is set to 8 hours."
      reference   : "CSCv7|16.10,LEVEL|1M,CIS_Recommendation|3.4"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "3.5 Ensure that 'Public access level' is set to Private for blob containers"
      info        : "Disable anonymous access to blob containers and disallow blob public access on storage account.

Rationale:

Anonymous, public read access to a container and its blobs can be enabled in Azure Blob storage. It grants read-only access to these resources without sharing the account key, and without requiring a shared access signature. It is recommended not to provide anonymous access to blob containers until, and unless, it is strongly desired. A shared access signature token should be used for providing controlled and timed access to blob containers. If no anonymous access is needed on the storage account, it's recommended to set allowBlobPublicAccess false.

Impact:

Access using shared access signatures will have to be managed."
      solution    : "From Azure Console
First, follow Microsoft documentation and created shared access signature tokens for your blob containers. Then,

Go to Storage Accounts

For each storage account, go to Containers under BLOB SERVICE

For each container, click Access policy

Set Public access level to Private (no anonymous access)

For each storage account, go to Allow Blob public access in Configuration

Set Disabled if no anonymous access is needed on the storage account

Using Azure Command Line Interface 2.0

Identify the container name from the audit command

Set the permission for public access to private(off) for the above container name, using the below command

az storage container set-permission --name <containerName> --public-access off --account-name <accountName> --account-key <accountKey>

Set Disabled if no anonymous access is wanted on the storage account

az storage account update --name <storage-account> --resource-group <resource-group> --allow-blob-public-access false

Default Value:

By default, Public access level is set to Private (no anonymous access) for blob containers. By default, AllowBlobPublicAccess is set to Null (allow in effect) for storage account."
      reference   : "CSCv7|16,LEVEL|1A,CIS_Recommendation|3.5"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "3.8 Ensure soft delete is enabled for Azure Storage"
      info        : "The Azure Storage blobs contain data like ePHI, Financial, secret or personal. Erroneously modified or deleted accidentally by an application or other storage account user cause data loss or data unavailability.

It is recommended the Azure Storage be made recoverable by enabling soft delete configuration. This is to save and recover data when blobs or blob snapshots are deleted.

Rationale:

There could be scenarios where users accidentally run delete commands on Azure Storage blobs or blob snapshot or attacker/malicious user does it deliberately to cause disruption. Deleting an Azure Storage blob leads to immediate data loss / non-accessible data.

There is a property of Azure Storage blob service to make recoverable blobs.

Soft Delete

Enabling this configuration for azure storage ensures that even if blobs/data were deleted from the storage account, Blobs/data objects remain recoverable for a particular time which set in the 'Retention policies' [Retention policies can be 7 days to 365 days]."
      solution    : "From Azure Console:

Go to Storage Account

For each Storage Account, navigate to Data Protection

Select set soft delete enabled and enter a number of days you want to retain soft deleted data.

Using Azure Command-Line Interface 2.0:
Update retention days in below command

az storage blob service-properties delete-policy update --days-retained <RetentionDaysValue> --account-name <StorageAccountName> --enable true

Default Value:

When new storage account is created, soft delete is by default disabled."
      reference   : "CSCv7|10,LEVEL|1A,CIS_Recommendation|3.8"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Test if SQL Servers exist"
      request        : "listSQLServers"
      json_transform : '.[]|.subscriptionId as $id|.value[]|"SQL Server: \(.name)"'
      regex          : "SQL Server:"
      expect         : "SQL Server: .+"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "4.1.1 Ensure that 'Auditing' is set to 'On'"
      info           : "Enable auditing on SQL Servers.

Rationale:

The Azure platform allows a SQL server to be created as a service. Enabling auditing at the server level ensures that all existing and newly created databases on the SQL server instance are audited. Auditing policy applied on the SQL database does not override auditing policy and settings applied on the particular SQL server where the database is hosted.

Auditing tracks database events and writes them to an audit log in the Azure storage account. It also helps to maintain regulatory compliance, understand database activity, and gain insight into discrepancies and anomalies that could indicate business concerns or suspected security violations."
      solution       : "From Azure Console

Go to SQL servers

For each server instance

Click on Auditing

Set Auditing to On

Using Azure PowerShell
Get the list of all SQL Servers

Get-AzureRmSqlServer

For each Server, enable auditing.

Set-AzureRmSqlServerAuditingPolicy -ResourceGroupName <resource group name> -ServerName <server name> -AuditType <audit type> -StorageAccountName <storage account name>

Default Value:

By default, Auditing is set to Off."
      reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CIS_Recommendation|4.1.1,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "getSQLServerBlobAuditingPolicies"
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[]|.name as $sqlServerName|.SQLDBs[]|"Subscription ID: \($id)" + " ResourceGroup: \($name)" + " SQL Server: \($sqlServerName)"+" DB Name \(.name)"+" Auditing State: \(.value.properties.state)"'
      regex          : "Auditing State:"
      not_expect     : "Auditing State: Disabled"
    </custom_item>

    <custom_item>
      description    : "4.1.2 Ensure that 'Data encryption' is set to 'On' on a SQL Database"
      info           : "Enable Transparent Data Encryption on every SQL server.

Rationale:

Azure SQL Database transparent data encryption helps protect against the threat of malicious activity by performing real-time encryption and decryption of the database, associated backups, and transaction log files at rest without requiring changes to the application."
      solution       : "From Azure Console

Go to SQL databases

For each DB instance

Click on Transparent data encryption

Set Data encryption to On

Using Azure Command Line Interface 2.0
Use the below command to enable Transparent data encryption for SQL DB instance.

az sql db tde set --resource-group <resourceGroup> --server <dbServerName> --database <dbName> --status Enabled

Note:

TDE cannot be used to encrypt the logical master database in SQL Database. The master database contains objects that are needed to perform the TDE operations on the user databases.

Azure Portal does not show master databases per SQL server. However, CLI/API responses will show master databases.

Default Value:

By default, Data encryption is set to On."
      reference      : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|4.1.2,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.8,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "getSQLDBTransparentDataEncryptions"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.SQLServers[]|.name as $sname|.SQLDBs[]|.name as $sdbname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " SQLServer: \($sname)" + " SQLDBs: \($sdbname)"+ " Data Encryption Status: \(if ($sdbname) == "master" then "Not Applicable" else .value.properties.status end)"'
      regex          : "Data Encryption Status:"
      expect         : 'Data Encryption Status: (Enabled|Not Applicable)'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.1.3 Ensure that 'Auditing' Retention is 'greater than 90 days'"
      info           : "SQL Server Audit Retention should be configured to be greater than 90 days.

Rationale:

Audit Logs can be used to check for anomalies and give insight into suspected breaches or misuse of information and access."
      solution       : "From Azure Console

Go to SQL servers

For each server instance

Click on Auditing

Select Storage Details

Set Retention (days) setting greater than 90 days

Select OK

Select Save

Using Azure PowerShell
For each Server, set retention policy for more than or equal to 90 days

set-AzureRmSqlServerAuditing -ResourceGroupName <resource group name> -ServerName <server name> -RetentionInDays <Number of Days to retain the audit logs, should be 90days minimum>

Default Value:

By default, SQL Server audit storage is disabled."
      reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CIS_Recommendation|4.1.3,CSCv7|6.4,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "getSQLServerAuditingPolicies"
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[]|.name as $sqlServerName|"Subscription ID: \($id)" + " ResourceGroup: \($name)" + " Server Name: \($sqlServerName)"+" Retention: \(.value.properties.retentionDays)"'
      regex          : "Retention:"
      not_expect     : 'Retention: ([0-9]|[1-8][0-9]|90)$'
    </custom_item>

    <custom_item>
      description    : "4.4 Ensure that Azure Active Directory Admin is configured"
      info           : "Use Azure Active Directory Authentication for authentication with SQL Database.

Rationale:

Azure Active Directory authentication is a mechanism to connect to Microsoft Azure SQL Database and SQL Data Warehouse by using identities in Azure Active Directory (Azure AD). With Azure AD authentication, identities of database users and other Microsoft services can be managed in one central location. Central ID management provides a single place to manage database users and simplifies permission management.

It provides an alternative to SQL Server authentication.

Helps stop the proliferation of user identities across database servers.

Allows password rotation in a single place.

Customers can manage database permissions using external (AAD) groups.

It can eliminate storing passwords by enabling integrated Windows authentication and other forms of authentication supported by Azure Active Directory.

Azure AD authentication uses contained database users to authenticate identities at the database level.

Azure AD supports token-based authentication for applications connecting to SQL Database.

Azure AD authentication supports ADFS (domain federation) or native user/password authentication for a local Azure Active Directory without domain synchronization.

Azure AD supports connections from SQL Server Management Studio that use Active Directory Universal Authentication, which includes Multi-Factor Authentication (MFA). MFA includes strong authentication with a range of easy verification options - phone call, text message, smart cards with pin, or mobile app notification."
      solution       : "From Azure Console

Go to SQL servers

For each SQL server, click on Active Directory admin

Click on Set admin

Select an admin

Click Save

Using Azure PowerShell
For each Server, set AD Admin

Set-AzureRmSqlServerActiveDirectoryAdministrator -ResourceGroupName <resource group name> -ServerName <server name> -DisplayName '<Display name of AD account to set as DB administrator>'

From Azure Command Line Interface 2.0
Get ObjectID of user

az ad user list --query '[?mail==<emailId of user>].{mail:mail, userPrincipalName:userPrincipalName, objectId:objectId}'

For each Server, set AD Admin

az sql server ad-admin create --resource-group <resource group name> --server <server name> --display-name <display name> --object-id <object id of user>

Default Value:

Azure Active Directory Authentication for SQL Database/Server is not enabled by default"
      reference      : "800-171|3.5.1,800-53|IA-2.,CIS_Recommendation|4.4,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.2,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listSQLServerAdmins"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.SQLServers[]|if (.value|length == 0) then "SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " SQLServer: \(.name) does not have an AD Admin" else "SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " Server Name: \(.name) - has an AD Admin set" end'
      regex          : "AD Admin"
      expect         : 'has an AD Admin set'
      match_all      : YES
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "4.1.1 Ensure that 'Auditing' is set to 'On'"
      info        : "Enable auditing on SQL Servers.

Rationale:

The Azure platform allows a SQL server to be created as a service. Enabling auditing at the server level ensures that all existing and newly created databases on the SQL server instance are audited. Auditing policy applied on the SQL database does not override auditing policy and settings applied on the particular SQL server where the database is hosted.

Auditing tracks database events and writes them to an audit log in the Azure storage account. It also helps to maintain regulatory compliance, understand database activity, and gain insight into discrepancies and anomalies that could indicate business concerns or suspected security violations."
      solution    : "From Azure Console

Go to SQL servers

For each server instance

Click on Auditing

Set Auditing to On

Using Azure PowerShell
Get the list of all SQL Servers

Get-AzureRmSqlServer

For each Server, enable auditing.

Set-AzureRmSqlServerAuditingPolicy -ResourceGroupName <resource group name> -ServerName <server name> -AuditType <audit type> -StorageAccountName <storage account name>

Default Value:

By default, Auditing is set to Off."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CIS_Recommendation|4.1.1,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "4.1.2 Ensure that 'Data encryption' is set to 'On' on a SQL Database"
      info        : "Enable Transparent Data Encryption on every SQL server.

Rationale:

Azure SQL Database transparent data encryption helps protect against the threat of malicious activity by performing real-time encryption and decryption of the database, associated backups, and transaction log files at rest without requiring changes to the application."
      solution    : "From Azure Console

Go to SQL databases

For each DB instance

Click on Transparent data encryption

Set Data encryption to On

Using Azure Command Line Interface 2.0
Use the below command to enable Transparent data encryption for SQL DB instance.

az sql db tde set --resource-group <resourceGroup> --server <dbServerName> --database <dbName> --status Enabled

Note:

TDE cannot be used to encrypt the logical master database in SQL Database. The master database contains objects that are needed to perform the TDE operations on the user databases.

Azure Portal does not show master databases per SQL server. However, CLI/API responses will show master databases.

Default Value:

By default, Data encryption is set to On."
      reference   : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|4.1.2,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.8,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "4.1.3 Ensure that 'Auditing' Retention is 'greater than 90 days'"
      info        : "SQL Server Audit Retention should be configured to be greater than 90 days.

Rationale:

Audit Logs can be used to check for anomalies and give insight into suspected breaches or misuse of information and access."
      solution    : "From Azure Console

Go to SQL servers

For each server instance

Click on Auditing

Select Storage Details

Set Retention (days) setting greater than 90 days

Select OK

Select Save

Using Azure PowerShell
For each Server, set retention policy for more than or equal to 90 days

set-AzureRmSqlServerAuditing -ResourceGroupName <resource group name> -ServerName <server name> -RetentionInDays <Number of Days to retain the audit logs, should be 90days minimum>

Default Value:

By default, SQL Server audit storage is disabled."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CIS_Recommendation|4.1.3,CSCv7|6.4,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "4.4 Ensure that Azure Active Directory Admin is configured"
      info        : "Use Azure Active Directory Authentication for authentication with SQL Database.

Rationale:

Azure Active Directory authentication is a mechanism to connect to Microsoft Azure SQL Database and SQL Data Warehouse by using identities in Azure Active Directory (Azure AD). With Azure AD authentication, identities of database users and other Microsoft services can be managed in one central location. Central ID management provides a single place to manage database users and simplifies permission management.

It provides an alternative to SQL Server authentication.

Helps stop the proliferation of user identities across database servers.

Allows password rotation in a single place.

Customers can manage database permissions using external (AAD) groups.

It can eliminate storing passwords by enabling integrated Windows authentication and other forms of authentication supported by Azure Active Directory.

Azure AD authentication uses contained database users to authenticate identities at the database level.

Azure AD supports token-based authentication for applications connecting to SQL Database.

Azure AD authentication supports ADFS (domain federation) or native user/password authentication for a local Azure Active Directory without domain synchronization.

Azure AD supports connections from SQL Server Management Studio that use Active Directory Universal Authentication, which includes Multi-Factor Authentication (MFA). MFA includes strong authentication with a range of easy verification options - phone call, text message, smart cards with pin, or mobile app notification."
      solution    : "From Azure Console

Go to SQL servers

For each SQL server, click on Active Directory admin

Click on Set admin

Select an admin

Click Save

Using Azure PowerShell
For each Server, set AD Admin

Set-AzureRmSqlServerActiveDirectoryAdministrator -ResourceGroupName <resource group name> -ServerName <server name> -DisplayName '<Display name of AD account to set as DB administrator>'

From Azure Command Line Interface 2.0
Get ObjectID of user

az ad user list --query '[?mail==<emailId of user>].{mail:mail, userPrincipalName:userPrincipalName, objectId:objectId}'

For each Server, set AD Admin

az sql server ad-admin create --resource-group <resource group name> --server <server name> --display-name <display name> --object-id <object id of user>

Default Value:

Azure Active Directory Authentication for SQL Database/Server is not enabled by default"
      reference   : "800-171|3.5.1,800-53|IA-2.,CIS_Recommendation|4.4,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.2,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "MySQL Database Server exists"
      request        : "listMYSQLServersByResourceGroup"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " MySQLServer: \(.value[].name)"'
      regex          : ".+"
      expect         : 'MySQLServer: .+'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "4.3.2 Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server"
      info           : "Enable SSL connection on MYSQL Servers.

Rationale:

SSL connectivity helps to provide a new layer of security, by connecting database server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between database server and client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and application."
      solution       : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to Azure Database for MySQL server

For each database, click on Connection security

In SSL settings

Click on ENABLED for Enforce SSL connection

Using Azure Command Line Interface 2.0
Use the below command to set MYSQL Databases to Enforce SSL connection.

    az mysql server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled"
      reference      : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|4.3.2,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.4,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listMYSQLServersByResourceGroup"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " MySQLServer: \(.value[].name)" + " SSLEnforcement: \(.value[].properties.sslEnforcement)"'
      regex          : "SSLEnforcement: "
      expect         : 'SSLEnforcement: Enabled'
      match_all      : YES
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "4.3.2 Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server"
      info        : "Enable SSL connection on MYSQL Servers.

Rationale:

SSL connectivity helps to provide a new layer of security, by connecting database server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between database server and client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and application."
      solution    : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to Azure Database for MySQL server

For each database, click on Connection security

In SSL settings

Click on ENABLED for Enforce SSL connection

Using Azure Command Line Interface 2.0
Use the below command to set MYSQL Databases to Enforce SSL connection.

    az mysql server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled"
      reference   : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|4.3.2,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.4,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "PostgreSQL Servers exist"
      request        : "listPostgreSQLServersByResourceGroup"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQL: \(.value[].name)"'
      regex          : ".+"
      expect         : 'PostgreSQL: .+'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "4.3.1 Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
      info           : "Enable SSL connection on PostgreSQL Servers.

Rationale:

SSL connectivity helps to provide a new layer of security, by connecting database server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between database server and client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and application."
      solution       : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to Azure Database for PostgreSQL server

For each database, click on Connection security

In SSL settings.

Click on ENABLED to Enforce SSL connection

Using Azure Command Line Interface 2.0
Use the below command to enforce ssl connection for PostgreSQL Database.

    az postgres server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled"
      reference      : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|4.3.1,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.4,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listPostgreSQLServersByResourceGroup"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQLServer: \(.value[].name)" + " SSLEnforcement: \(.value[].properties.sslEnforcement)"'
      regex          : "SSLEnforcement: "
      expect         : 'SSLEnforcement: Enabled'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.3.3 Ensure server parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server"
      info           : "Enable log_checkpoints on PostgreSQL Servers.

Rationale:

Enabling log_checkpoints helps the PostgreSQL Database to Log each checkpoint in turn generates query and error logs. However, access to transaction logs is not supported. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution       : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to Azure Database for PostgreSQL server

For each database, click on Server parameters

Search for log_checkpoints.

Click ON and save.

Using Azure Command Line Interface 2.0
Use the below command to update log_checkpoints configuration.

    az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_checkpoints --value on"
      reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.3.3,CN-L3|8.1.10.6(d),CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listPostgreSQLServerConfigurations"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.PostgreSQLServers[]|.name as $pgname|.value[]|select(.name == "log_checkpoints")|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQLServer: \($pgname)" + " Enabled: \(.properties.value)"'
      regex          : "Enabled:"
      expect         : 'Enabled: on'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.3.4 Ensure server parameter 'log_connections' is set to 'ON' for PostgreSQL Database Server"
      info           : "Enable log_connections on PostgreSQL Servers.

Rationale:

Enabling log_connections helps PostgreSQL Database to log attempted connection to the server, as well as successful completion of client authentication. Log data can be used to identify, troubleshoot, and repair configuration errors and suboptimal performance."
      solution       : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to Azure Database for PostgreSQL server

For each database, click on Server parameters

Search for log_connections.

Click ON and save.

Using Azure Command Line Interface 2.0
Use the below command to update log_connections configuration.

    az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_connections --value on

Default Value:

By default log_connections is disabled (set to off)."
      reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.3.4,CN-L3|8.1.10.6(d),CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listPostgreSQLServerConfigurations"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.PostgreSQLServers[]|.name as $pgname|.value[]|select(.name == "log_connections")|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQLServer: \($pgname)" + " Enabled: \(.properties.value)"'
      regex          : "Enabled:"
      expect         : 'Enabled: on'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.3.5 Ensure server parameter 'log_disconnections' is set to 'ON' for PostgreSQL Database Server"
      info           : "Enable log_disconnections on PostgreSQL Servers.

Rationale:

Enabling log_disconnections helps PostgreSQL Database to Logs end of a session, including duration, which in turn generates query and error logs. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution       : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to Azure Database for PostgreSQL server

For each database, click on Server parameters

Search for log_disconnections.

Click ON and save.

Using Azure Command Line Interface 2.0
Use the below command to update log_disconnections configuration.

    az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_disconnections --value on"
      reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.3.5,CN-L3|8.1.10.6(d),CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listPostgreSQLServerConfigurations"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.PostgreSQLServers[]|.name as $pgname|.value[]|select(.name == "log_disconnections")|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQLServer: \($pgname)" + " Enabled: \(.properties.value)"'
      regex          : "Enabled:"
      expect         : 'Enabled: on'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.3.6 Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server"
      info           : "Enable connection_throttling on PostgreSQL Servers.

    Rationale:

    Enabling connection_throttling helps the PostgreSQL Database to Set the verbosity of logged messages which in turn generates query and error logs with respect to concurrent connections, that could lead to a successful Denial of Service (DoS) attack by exhausting connection resources. A system can also fail or be degraded by an overload of legitimate users. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution       : "From Azure Console

    Login to Azure Portal using https://portal.azure.com

    Go to Azure Database for PostgreSQL server

    For each database, click on Server parameters

    Search for connection_throttling.

    Click ON and save.

    Using Azure Command Line Interface 2.0
    Use the below command to update connection_throttling configuration.

        az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name connection_throttling --value on"
      reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.3.6,CN-L3|8.1.10.6(d),CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listPostgreSQLServerConfigurations"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.PostgreSQLServers[]|.name as $pgname|.value[]|select(.name == "connection_throttling")|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQLServer: \($pgname)" + " Enabled: \(.properties.value)"'
      regex          : "Enabled:"
      expect         : 'Enabled: on'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.3.7 Ensure server parameter 'log_retention_days' is greater than 3 days for PostgreSQL Database Server"
      info           : "Enable log_retention_days on PostgreSQL Servers.

    Rationale:

    Enabling log_retention_days helps PostgreSQL Database to Sets number of days a log file is retained which in turn generates query and error logs. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution       : "From Azure Console

    Login to Azure Portal using https://portal.azure.com

    Go to Azure Database for PostgreSQL server

    For each database, click on Server parameters

    Search for log_retention_days.

    Enter value in range 4-7 (inclusive) and save.

    Using Azure Command Line Interface 2.0
    Use the below command to update log_retention_days configuration.

         az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_retention_days --value <4-7>"
      reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.3.7,CN-L3|8.1.10.6(d),CSCv7|6.4,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listPostgreSQLServerConfigurations"
      regex          : "Days:"
      expect         : 'Days: [4-7]'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.PostgreSQLServers[]|.name as $pgname|.value[]|select(.name == "log_retention_days")|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQLServer: \($pgname)" + " Days: \(.properties.value)"'
      match_all      : YES
    </custom_item>

    <report type:"WARNING">
      description : "4.3.8 Ensure 'Allow access to Azure services' for PostgreSQL Database Server is disabled"
      info        : "Disable access from Azure services to PostgreSQL Database Server

    Rationale:

    If access from Azure services is enabled, the server's firewall will accept connections from all Azure resources, including resources not in your subscription. This is usually not a desired configuration. Instead, setup firewall rules to allow access from specific network ranges or VNET rules to allow access from specific virtual networks.

    NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "From Azure Console

    Login to Azure Portal using https://portal.azure.com

    Go to Azure Database for PostgreSQL server

    For each database, click on Connection security

    In Firewall rules

    Ensure Allow access to Azure services is set to OFF.

    Click Save to apply the changed rule.

    Using Azure Command Line Interface 2.0
    Use the below command to delete the AllowAllAzureIps rule for PostgreSQL Database.

    az postgres server firewall-rule delete --name AllowAllAzureIps  --resource-group <resourceGroupName> --server-name <serverName>"
      reference   : "CSCv7|14.2,CSCv7|9.4,CSCv7|9.5,LEVEL|1M,CIS_Recommendation|4.3.8"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </then>

  <else>
    <report type:"PASSED">
      description : "4.3.1 Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
      info        : "Enable SSL connection on PostgreSQL Servers.

Rationale:

SSL connectivity helps to provide a new layer of security, by connecting database server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between database server and client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and application."
      solution    : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to Azure Database for PostgreSQL server

For each database, click on Connection security

In SSL settings.

Click on ENABLED to Enforce SSL connection

Using Azure Command Line Interface 2.0
Use the below command to enforce ssl connection for PostgreSQL Database.

    az postgres server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled"
      reference   : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|4.3.1,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.4,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "4.3.3 Ensure server parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server"
      info        : "Enable log_checkpoints on PostgreSQL Servers.

Rationale:

Enabling log_checkpoints helps the PostgreSQL Database to Log each checkpoint in turn generates query and error logs. However, access to transaction logs is not supported. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution    : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to Azure Database for PostgreSQL server

For each database, click on Server parameters

Search for log_checkpoints.

Click ON and save.

Using Azure Command Line Interface 2.0
Use the below command to update log_checkpoints configuration.

    az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_checkpoints --value on"
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.3.3,CN-L3|8.1.10.6(d),CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "4.3.4 Ensure server parameter 'log_connections' is set to 'ON' for PostgreSQL Database Server"
      info        : "Enable log_connections on PostgreSQL Servers.

Rationale:

Enabling log_connections helps PostgreSQL Database to log attempted connection to the server, as well as successful completion of client authentication. Log data can be used to identify, troubleshoot, and repair configuration errors and suboptimal performance."
      solution    : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to Azure Database for PostgreSQL server

For each database, click on Server parameters

Search for log_connections.

Click ON and save.

Using Azure Command Line Interface 2.0
Use the below command to update log_connections configuration.

    az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_connections --value on

Default Value:

By default log_connections is disabled (set to off)."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.3.4,CN-L3|8.1.10.6(d),CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "4.3.5 Ensure server parameter 'log_disconnections' is set to 'ON' for PostgreSQL Database Server"
      info        : "Enable log_disconnections on PostgreSQL Servers.

Rationale:

Enabling log_disconnections helps PostgreSQL Database to Logs end of a session, including duration, which in turn generates query and error logs. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution    : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to Azure Database for PostgreSQL server

For each database, click on Server parameters

Search for log_disconnections.

Click ON and save.

Using Azure Command Line Interface 2.0
Use the below command to update log_disconnections configuration.

    az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_disconnections --value on"
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.3.5,CN-L3|8.1.10.6(d),CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "4.3.6 Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server"
      info        : "Enable connection_throttling on PostgreSQL Servers.

    Rationale:

    Enabling connection_throttling helps the PostgreSQL Database to Set the verbosity of logged messages which in turn generates query and error logs with respect to concurrent connections, that could lead to a successful Denial of Service (DoS) attack by exhausting connection resources. A system can also fail or be degraded by an overload of legitimate users. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution    : "From Azure Console

    Login to Azure Portal using https://portal.azure.com

    Go to Azure Database for PostgreSQL server

    For each database, click on Server parameters

    Search for connection_throttling.

    Click ON and save.

    Using Azure Command Line Interface 2.0
    Use the below command to update connection_throttling configuration.

        az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name connection_throttling --value on"
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.3.6,CN-L3|8.1.10.6(d),CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "4.3.7 Ensure server parameter 'log_retention_days' is greater than 3 days for PostgreSQL Database Server"
      info        : "Enable log_retention_days on PostgreSQL Servers.

    Rationale:

    Enabling log_retention_days helps PostgreSQL Database to Sets number of days a log file is retained which in turn generates query and error logs. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution    : "From Azure Console

    Login to Azure Portal using https://portal.azure.com

    Go to Azure Database for PostgreSQL server

    For each database, click on Server parameters

    Search for log_retention_days.

    Enter value in range 4-7 (inclusive) and save.

    Using Azure Command Line Interface 2.0
    Use the below command to update log_retention_days configuration.

         az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_retention_days --value <4-7>"
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|4.3.7,CN-L3|8.1.10.6(d),CSCv7|6.4,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "4.3.8 Ensure 'Allow access to Azure services' for PostgreSQL Database Server is disabled"
      info        : "Disable access from Azure services to PostgreSQL Database Server

    Rationale:

    If access from Azure services is enabled, the server's firewall will accept connections from all Azure resources, including resources not in your subscription. This is usually not a desired configuration. Instead, setup firewall rules to allow access from specific network ranges or VNET rules to allow access from specific virtual networks."
      solution    : "From Azure Console

    Login to Azure Portal using https://portal.azure.com

    Go to Azure Database for PostgreSQL server

    For each database, click on Connection security

    In Firewall rules

    Ensure Allow access to Azure services is set to OFF.

    Click Save to apply the changed rule.

    Using Azure Command Line Interface 2.0
    Use the below command to delete the AllowAllAzureIps rule for PostgreSQL Database.

    az postgres server firewall-rule delete --name AllowAllAzureIps  --resource-group <resourceGroupName> --server-name <serverName>"
      reference   : "CSCv7|14.2,CSCv7|9.4,CSCv7|9.5,LEVEL|1M,CIS_Recommendation|4.3.8"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

<report type:"WARNING">
  description : "5.1.1 Ensure that a 'Diagnostics Setting' exists"
  info        : "Enable Diagnostic settings for exporting activity logs. Diagnostic setting are available for each individual resources within a subscription. Settings should be configured for all appropriate resources for your environment.

Rationale:

A diagnostic setting controls how a diagnostic log is exported. By default, logs are retained only for 90 days. Diagnostic settings should be defined so that logs can be exported and stored for a longer duration in order to analyze security activities within an Azure subscription.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Click on the resource that has a diagnostic status of disabled

Select Add Diagnostic Settings

Enter a Diagnostic setting name

Select the appropriate log, metric, and destination. (This may be Log Analytics/Storage account or Event Hub)

Click save

Repeat these step for all resources as needed.

Default Value:

By default, diagnostic setting is not set."
  reference   : "CSCv7|6.5,LEVEL|1A,CIS_Recommendation|5.1.1"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<report type:"WARNING">
  description : "5.1.2 Ensure Diagnostic Setting captures appropriate categories"
  info        : "The diagnostic setting should be configured to log the appropriate activities from the control/management plane.

Rationale:

A diagnostic setting controls how the diagnostic log is exported. Capturing the diagnostic setting categories for appropriate control/management plane activities allows proper alerting.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Azure Console

Go to Azure Monitor

Click Activity log

Click on Diagnostic settings

Click on Edit Settings for the diagnostic settings entry

Ensure that the following categories are checked: Administrative, Alert, Policy, and Security

Using ARM Template via AZ PowerShell cmdlets
Create a file to hold the JSON

{
    '$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#',
    'contentVersion': '1.0.0.0',
    'parameters': {
      'settingName': {
          'type': 'String'
      },
      'workspaceId': {
          'type': 'String'
      }
    },
    'resources': [
      {
        'type': 'Microsoft.Insights/diagnosticSettings',
        'apiVersion': '2017-05-01-preview',
        'name': '[parameters('settingName')]',
        'dependsOn': [],
        'properties': {
          'workspaceId': '[parameters('workspaceId')]',
          'logs': [
            {
            'category': 'Administrative',
            'enabled': true
            },
            {
            'category': 'Alert',
            'enabled': true
            },
            {
            'category': 'Autoscale',
            'enabled': false
            },
            {
            'category': 'Policy',
            'enabled': true
            },
            {
            'category': 'Recommendation',
            'enabled': false
            },
            {
            'category': 'ResourceHealth',
            'enabled': false
            },
            {
            'category': 'Security',
            'enabled': true
            },
            {
            'category': 'ServiceHealth',
            'enabled': false
            }
          ]
        }
      }
    ]
}

Reference the JSON in the New-AzSubscriptionDeployment call

$OMSWorkspace = Get-AzResource  -ResourceType 'Microsoft.OperationalInsights/workspaces' -Name  <Workspace Name>
New-AzSubscriptionDeployment -Name CreateDiagnosticSetting -location eastus -TemplateFile CreateDiagnosticSetting.jsonc -settingName 'Send Activity log to workspace' -workspaceId $OMSWorkspace.ResourceId

Default Value:

When the diagnostic setting is created using Azure Portal, by default no categories are selected."
  reference   : "CSCv7|6.3,LEVEL|1A,CIS_Recommendation|5.1.2"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<custom_item>
  description    : "5.1.3 Ensure the storage container storing the activity logs is not publicly accessible"
  info           : "The storage account container containing the activity log export should not be publicly accessible.

Rationale:

Allowing public access to activity log content may aid an adversary in identifying weaknesses in the affected account's use or configuration.

Impact:

Configuring container Access policy to private will remove access from the container for everyone except owners of the storage account. Access policy needs to be set explicitly in order to allow access to other desired users.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "From Azure Console

Search for Storage Accounts to access Storage account blade

Click on the storage account name

In Section Blob Service click Containers. It will list all the containers in next blade

Look for a record with container named as insight-operational-logs. Click ... from right most column to open Context menu

Click Access Policy from Context Menu and set Public Access Level to Private (no anonymous access)

Using Azure Command Line Interface 2.0

az storage container set-permission --name insights-operational-logs --account-name <Storage Account Name> --public-access off

Default Value:

By default, public access is set to null (allowing only private access) for a container with activity log export."
  reference      : "800-171|3.3.1,800-171|3.3.2,800-171|3.14.6,800-171|3.14.7,800-53|AU-12c.,800-53|SI-4(5),CIS_Recommendation|5.1.3,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|7.1.3.5(a),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|6,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-3,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,ITSG-33|SI-4(5),LEVEL|1A,NESA|M1.2.2,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listLogProfiles"
  json_transform : '.[]|.subscriptionId as $id| .value[].name as $name |"Subscription ID: \($id)" + " Profile Name: \($name)" +" Storage Account ID: \(.value[].properties.storageAccountId)"'
  regex          : "Storage Account ID: "
  expect         : "MANUAL_REVIEW"
  severity       : MEDIUM
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Key Vault Exists"
      request        : "listVaultsByResourceGroup"
      json_transform : '.[].resourceGroups[]|if ((.value | length) != 0) then "Key vaults exist" else "Key vaults do not exist" end'
      regex          : "Key vaults"
      expect         : "Key vaults exist"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "5.1.5 Ensure that logging for Azure KeyVault is 'Enabled'"
      info           : "Enable AuditEvent logging for key vault instances to ensure interactions with key vaults are logged and available.

Rationale:

Monitoring how and when key vaults are accessed, and by whom enables an audit trail of interactions with confidential information, keys and certificates managed by Azure Keyvault. Enabling logging for Key Vault saves information in an Azure storage account that the user provides. This creates a new container named insights-logs-auditevent automatically for the specified storage account, and this same storage account can be used for collecting logs for multiple key vaults."
      solution       : "Follow Microsoft Azure documentation and setup Azure Key Vault Logging.

Default Value:

By default, Diagnostic AuditEvent logging is not enabled for Key Vault instances."
      reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,CIS_Recommendation|5.1.5,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1A,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listVaultDiagnosticSetting"
      json_transform : '.[]  |.subscriptionId as $id|.resourceGroups[]|.name as $rgn|"Sub ID: \($id)"+ " ResourceGroup: \($rgn)" + " Vault: \(.value[].name)"+ " Vault Diag: \(.value[].value[].name)" + " Logs enabled: \(.value[].value[].properties.logs[].enabled)"'
      regex          : "Logs enabled:"
      not_expect     : "Logs enabled: false"
    </custom_item>

    <custom_item>
      description    : "8.1 Ensure that the expiration date is set on all keys"
      info           : "Ensure that all keys in Azure Key Vault have an expiration time set.

Rationale:

Azure Key Vault enables users to store and use cryptographic keys within the Microsoft Azure environment. The exp (expiration time) attribute identifies the expiration time on or after which the key MUST NOT be used for a cryptographic operation. By default, keys never expire. It is thus recommended that keys be rotated in the key vault and set an explicit expiration time for all keys. This ensures that the keys cannot be used beyond their assigned lifetimes.

Impact:

Keys cannot be used beyond their assigned expiration times respectively. Keys need to be rotated periodically wherever they are used.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "From Azure Console

Go to Key vaults

For each Key vault, click on Keys.

Under the Settings section, Make sure Enabled? is set to Yes

Set an appropriate EXPIRATION DATE on all keys.

Using Azure Command Line Interface 2.0
Update the EXPIRATION DATE for the key using below command.

az keyvault key set-attributes --name <keyName> --vault-name <vaultName> --expires Y-m-d'T'H:M:S'Z'

Note:
In order to access expiration time on all keys in Azure Key Vault using Microsoft API requires 'List' Key permission.
To provide required access follow below steps,

Go to Key vaults

For each Key vault, click on Access Policy.

Add access policy with Key permission as List

Default Value:

By default, keys do not expire."
      reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|8.1,CN-L3|8.1.10.6(d),CSCv7|13,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listVaultsByResourceGroup"
      json_transform : '.[]|.subscriptionId as $subid|select(.resourceGroups[].value[].properties != null).resourceGroups[]|"SubscriptionID: \($subid)"+" ResourceGroup: \(.name)"+" Vault Name: \(.value[].name)"'
      regex          : ".+"
      not_expect     : ".+"
      severity       : MEDIUM
    </custom_item>

    <custom_item>
      description    : "8.2 Ensure that the expiration date is set on all Secrets"
      info           : "Ensure that all Secrets in the Azure Key Vault have an expiration time set.

Rationale:

The Azure Key Vault enables users to store and keep secrets within the Microsoft Azure environment. Secrets in the Azure Key Vault are octet sequences with a maximum size of 25k bytes each. The exp (expiration time) attribute identifies the expiration time on or after which the secret MUST NOT be used. By default, secrets never expire. It is thus recommended to rotate secrets in the key vault and set an explicit expiration time for all secrets. This ensures that the secrets cannot be used beyond their assigned lifetimes.

Impact:

Secrets cannot be used beyond their assigned expiry times respectively. Secrets need to be rotated periodically wherever they are used.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "From Azure Console

Go to Key vaults

For each Key vault, click on Secrets.

Under the Settings section, Make sure Enabled? is set to Yes

Set an appropriate EXPIRATION DATE on all secrets.

Using Azure Command Line Interface 2.0
Use the below command to set EXPIRATION DATE on the all secrets.

az keyvault secret set-attributes --name <secretName> --vault-name <vaultName> --expires Y-m-d'T'H:M:S'Z'

Default Value:

By default, secrets do not expire."
      reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|8.2,CN-L3|8.1.10.6(d),CSCv7|16,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listVaultsByResourceGroup"
      json_transform : '.[]|.subscriptionId as $subid|select(.resourceGroups[].value[].properties != null).resourceGroups[]|"SubscriptionID: \($subid)"+" ResourceGroup: \(.name)"+" Vault Name: \(.value[].name)"'
      regex          : ".+"
      not_expect     : ".+"
      severity       : MEDIUM
    </custom_item>

    <custom_item>
      description    : "8.4 Ensure the key vault is recoverable"
      info           : "The key vault contains object keys, secrets and certificates. Accidental unavailability of a key vault can cause immediate data loss or loss of security functions (authentication, validation, verification, non-repudiation, etc.) supported by the key vault objects.

It is recommended the key vault be made recoverable by enabling the 'Do Not Purge' and 'Soft Delete' functions. This is in order to prevent loss of encrypted data including storage accounts, SQL databases, and/or dependent services provided by key vault objects (Keys, Secrets, Certificates) etc., as may happen in the case of accidental deletion by a user or from disruptive activity by a malicious user.

Rationale:

There could be scenarios where users accidently run delete/purge commands on key vault or attacker/malicious user does it deliberately to cause disruption. Deleting or purging a key vault leads to immediate data loss as keys encrypting data and secrets/certificates allowing access/services will become non-accessible. There are 2 key vault properties that plays role in permanent unavailability of a key vault.

enableSoftDelete:

Setting this parameter to true for a key vault ensures that even if key vault is deleted, Key vault itself or its objects remain recoverable for next 90days. In this span of 90 days either key vault/objects can be recovered or purged (permanent deletion). If no action is taken, after 90 days key vault and its objects will be purged.

enablePurgeProtection:

enableSoftDelete only ensures that key vault is not deleted permanently and will be recoverable for 90 days from date of deletion. However, there are chances that the key vault and/or its objects are accidentally purged and hence will not be recoverable. Setting enablePurgeProtection to 'true' ensures that the key vault and its objects cannot be purged.

Enabling both the parameters on key vaults ensures that key vaults and their objects cannot be deleted/purged permanently.

Impact:

Once purge-protection and soft-delete is enabled for a key vault, the action is irreversible."
      solution       : "To enable 'Do Not Purge' and 'Soft Delete' for a Key Vault:
From Azure Portal
Azure Portal does not have provision to update the respective configurations
Using Azure CLI 2.0

az resource update --id /subscriptions/xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/<resourceGroupName>/providers/Microsoft.KeyVault
/vaults/<keyVaultName> --set properties.enablePurgeProtection=true properties.enableSoftDelete=true

Default Value:

When a new keyvault is created, both the parameters enableSoftDelete and enablePurgeProtection are set to null disabling both the features."
      reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|8.4,CN-L3|8.1.10.6(d),CSCv7|10,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listVaultsByResourceGroup"
      json_transform : '.[]|.subscriptionId as $subid|select(.resourceGroups[].value[].properties != null).resourceGroups[]|"SubscriptionID: \($subid)"+" ResourceGroup: \(.name)"+" Vault Name: \(.value[].name)" + " Enable Soft Delete: \(.value[].properties.enableSoftDelete)" + " Enable Purge Protection: \(.value[].properties.enablePurgeProtection)"'
      regex          : "Enable Soft Delete:"
      expect         : "Enable Soft Delete: true Enable Purge Protection: true"
      match_all      : YES
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "5.1.5 Ensure that logging for Azure KeyVault is 'Enabled'"
      info        : "Enable AuditEvent logging for key vault instances to ensure interactions with key vaults are logged and available.

Rationale:

Monitoring how and when key vaults are accessed, and by whom enables an audit trail of interactions with confidential information, keys and certificates managed by Azure Keyvault. Enabling logging for Key Vault saves information in an Azure storage account that the user provides. This creates a new container named insights-logs-auditevent automatically for the specified storage account, and this same storage account can be used for collecting logs for multiple key vaults."
      solution    : "Follow Microsoft Azure documentation and setup Azure Key Vault Logging.

Default Value:

By default, Diagnostic AuditEvent logging is not enabled for Key Vault instances."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,CIS_Recommendation|5.1.5,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1A,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "8.1 Ensure that the expiration date is set on all keys"
      info        : "Ensure that all keys in Azure Key Vault have an expiration time set.

Rationale:

Azure Key Vault enables users to store and use cryptographic keys within the Microsoft Azure environment. The exp (expiration time) attribute identifies the expiration time on or after which the key MUST NOT be used for a cryptographic operation. By default, keys never expire. It is thus recommended that keys be rotated in the key vault and set an explicit expiration time for all keys. This ensures that the keys cannot be used beyond their assigned lifetimes.

Impact:

Keys cannot be used beyond their assigned expiration times respectively. Keys need to be rotated periodically wherever they are used."
      solution    : "From Azure Console

Go to Key vaults

For each Key vault, click on Keys.

Under the Settings section, Make sure Enabled? is set to Yes

Set an appropriate EXPIRATION DATE on all keys.

Using Azure Command Line Interface 2.0
Update the EXPIRATION DATE for the key using below command.

az keyvault key set-attributes --name <keyName> --vault-name <vaultName> --expires Y-m-d'T'H:M:S'Z'

Note:
In order to access expiration time on all keys in Azure Key Vault using Microsoft API requires 'List' Key permission.
To provide required access follow below steps,

Go to Key vaults

For each Key vault, click on Access Policy.

Add access policy with Key permission as List

Default Value:

By default, keys do not expire."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|8.1,CN-L3|8.1.10.6(d),CSCv7|13,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "8.2 Ensure that the expiration date is set on all Secrets"
      info        : "Ensure that all Secrets in the Azure Key Vault have an expiration time set.

Rationale:

The Azure Key Vault enables users to store and keep secrets within the Microsoft Azure environment. Secrets in the Azure Key Vault are octet sequences with a maximum size of 25k bytes each. The exp (expiration time) attribute identifies the expiration time on or after which the secret MUST NOT be used. By default, secrets never expire. It is thus recommended to rotate secrets in the key vault and set an explicit expiration time for all secrets. This ensures that the secrets cannot be used beyond their assigned lifetimes.

Impact:

Secrets cannot be used beyond their assigned expiry times respectively. Secrets need to be rotated periodically wherever they are used."
      solution    : "From Azure Console

Go to Key vaults

For each Key vault, click on Secrets.

Under the Settings section, Make sure Enabled? is set to Yes

Set an appropriate EXPIRATION DATE on all secrets.

Using Azure Command Line Interface 2.0
Use the below command to set EXPIRATION DATE on the all secrets.

az keyvault secret set-attributes --name <secretName> --vault-name <vaultName> --expires Y-m-d'T'H:M:S'Z'

Default Value:

By default, secrets do not expire."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|8.2,CN-L3|8.1.10.6(d),CSCv7|16,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "8.4 Ensure the key vault is recoverable"
      info        : "The key vault contains object keys, secrets and certificates. Accidental unavailability of a key vault can cause immediate data loss or loss of security functions (authentication, validation, verification, non-repudiation, etc.) supported by the key vault objects.

It is recommended the key vault be made recoverable by enabling the 'Do Not Purge' and 'Soft Delete' functions. This is in order to prevent loss of encrypted data including storage accounts, SQL databases, and/or dependent services provided by key vault objects (Keys, Secrets, Certificates) etc., as may happen in the case of accidental deletion by a user or from disruptive activity by a malicious user.

Rationale:

There could be scenarios where users accidently run delete/purge commands on key vault or attacker/malicious user does it deliberately to cause disruption. Deleting or purging a key vault leads to immediate data loss as keys encrypting data and secrets/certificates allowing access/services will become non-accessible. There are 2 key vault properties that plays role in permanent unavailability of a key vault.

enableSoftDelete:

Setting this parameter to true for a key vault ensures that even if key vault is deleted, Key vault itself or its objects remain recoverable for next 90days. In this span of 90 days either key vault/objects can be recovered or purged (permanent deletion). If no action is taken, after 90 days key vault and its objects will be purged.

enablePurgeProtection:

enableSoftDelete only ensures that key vault is not deleted permanently and will be recoverable for 90 days from date of deletion. However, there are chances that the key vault and/or its objects are accidentally purged and hence will not be recoverable. Setting enablePurgeProtection to 'true' ensures that the key vault and its objects cannot be purged.

Enabling both the parameters on key vaults ensures that key vaults and their objects cannot be deleted/purged permanently.

Impact:

Once purge-protection and soft-delete is enabled for a key vault, the action is irreversible."
      solution    : "To enable 'Do Not Purge' and 'Soft Delete' for a Key Vault:
From Azure Portal
Azure Portal does not have provision to update the respective configurations
Using Azure CLI 2.0

az resource update --id /subscriptions/xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/<resourceGroupName>/providers/Microsoft.KeyVault
/vaults/<keyVaultName> --set properties.enablePurgeProtection=true properties.enableSoftDelete=true

Default Value:

When a new keyvault is created, both the parameters enableSoftDelete and enablePurgeProtection are set to null disabling both the features."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|8.4,CN-L3|8.1.10.6(d),CSCv7|10,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

<custom_item>
  description    : "5.2.1 Ensure that Activity Log Alert exists for Create Policy Assignment"
  info           : "Create an activity log alert for the Create Policy Assignment event.

Rationale:

Monitoring for create policy assignment events gives insight into changes done in 'azure policy - assignments' and can reduce the time it takes to detect unsolicited changes."
  solution       : "From Azure Console

Go to Monitor

Select Alerts

Click On New Alert Rule

Under Scope, click Select resource

Select the appropriate subscription under Filter by subscription

Select Policy Assignment under Filter by resource type

Select All for Filter by location

Click on the subscription resource from the entries populated under Resource

Verify Selection preview shows All Policy assignment (policyAssignments) and your selected subscription name

Click Done

Under Condition click Add Condition

Select Create policy assignment signal

Click Done

Under Action group, select Add action groups and complete creation process or select appropriate action group

Under Alert rule details, enter Alert rule name and Description

Select appropriate resource group to save the alert to

Check Enable alert rule upon creation checkbox

Click Create alert rule

Using Azure Command Line Interface
Use the below command to create an Activity Log Alert for Create policy assignment

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@'input.json''

Where input.json contains the Request body JSON data as mentioned below.

{
  'location': 'Global',
  'tags': {},
  'properties': {
    'scopes': [
      '/subscriptions/<Subscription_ID>'
    ],
    'enabled': true,
  'condition': {
    'allOf': [
      {
        'containsAny': null,
        'equals': 'Administrative',
        'field': 'category'
      },
      {
        'containsAny': null,
        'equals': 'Microsoft.Authorization/policyAssignments/write',
        'field': 'operationName'
      }
    ]
  },
    'actions': {
    'actionGroups': [
      {
        'actionGroupId': '/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>',
        'webhookProperties': null
      }
    ]
  },
  }
}

Configurable Parameters for command line:

<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>

Configurable Parameters for input.json:

<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId

Default Value:

By default, no monitoring alerts are created."
  reference      : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|5.2.1,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listActivityLogAlertBySubscription"
  json_transform : '.[]  |.subscriptionId as $id | if (((select(.value[]?.properties.condition.allOf[].equals == "Microsoft.Authorization/policyAssignments/write").value[].name)|length) == 0) and (((select(.value[]?.location == "Global").value[].name)|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
</custom_item>

<custom_item>
  description    : "5.2.2 Ensure that Activity Log Alert exists for Delete Policy Assignment"
  info           : "Create an activity log alert for the Delete Policy Assignment event.

Rationale:

Monitoring for delete policy assignment events gives insight into changes done in 'azure policy - assignments' and can reduce the time it takes to detect unsolicited changes."
  solution       : "From Azure Console

Go to Monitor

Select Alerts

Click On New Alert Rule

Under Scope, click Select resource

Select the appropriate subscription under Filter by subscription

Select Policy Assignment under Filter by resource type

Select All for Filter by location

Click on the subscription from the entries populated under Resource

Verify Selection preview shows All Policy assignment (policyAssignments) and your selected subscription name

Click Done

Under Condition click Add Condition

Select Delete policy assignment signal

Click Done

Under Action group, select Add action groups and complete creation process or select appropriate action group

Under Alert rule details, enter Alert rule name and Description

Select appropriate resource group to save the alert to

Check Enable alert rule upon creation checkbox

Click Create alert rule

Using Azure Command Line Interface
Use the below command to create an Activity Log Alert for Delete policy assignment

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@'input.json''

Where input.json contains the Request body JSON data as mentioned below.

{
  'location': 'Global',
  'tags': {},
  'properties': {
    'scopes': [
      '/subscriptions/<Subscription_ID>'
    ],
    'enabled': true,
  'condition': {
    'allOf': [
      {
        'containsAny': null,
        'equals': 'Administrative',
        'field': 'category'
      },
      {
        'containsAny': null,
        'equals': 'Microsoft.Authorization/policyAssignments/delete',
        'field': 'operationName'
      }
    ]
  },
    'actions': {
    'actionGroups': [
      {
        'actionGroupId': '/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>',
        'webhookProperties': null
      }
    ]
  },
  }
}

Configurable Parameters for command line:

<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>

Configurable Parameters for input.json:

<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId

Using PowerShell AZ cmdlets
Use the below command to create an Activity Log Alert for Delete policy assignment

$ComplianceName = 'Delete Policy Assignment'
$Signal = 'Microsoft.Authorization/policyAssignments/delete'
$Category = 'Administrative'
$ResourceGroupName = 'MyResourceGroup'
$actiongroup = (Get-AzActionGroup -Name corenotifications -ResourceGroupName $ResourceGroupName)
$ActionGroupId = (New-Object Microsoft.Azure.Management.Monitor.Models.ActivityLogAlertActionGroup $ActionGroup.Id)
$Subscription = (Get-AzContext).Subscription
$location = 'Global'
$scope = '/subscriptions/$($Subscription.Id)'
$alertName = '$($Subscription.Name) - $($ComplianceName)'
$conditions = @(
    New-AzActivityLogAlertCondition -Field 'category' -Equal $Category
    New-AzActivityLogAlertCondition -Field 'operationName' -Equal $Signal
)
Set-AzActivityLogAlert -Location $location -Name $alertName -ResourceGroupName $ResourceGroupName -Scope $scope -Action $ActionGroupId -Condition $conditions

Default Value:

By default, no monitoring alerts are created."
  reference      : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|5.2.2,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listActivityLogAlertBySubscription"
  json_transform : '.[]  |.subscriptionId as $id | if (((select(.value[]?.properties.condition.allOf[].equals == "Microsoft.Authorization/policyAssignments/delete").value[].name)|length) == 0) and (((select(.value[]?.location == "Global").value[].name)|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
</custom_item>

<custom_item>
  description    : "5.2.3 Ensure that Activity Log Alert exists for Create or Update Network Security Group"
  info           : "Create an Activity Log Alert for the 'Create' or 'Update Network Security Group' event.

Rationale:

Monitoring for 'Create' or 'Update Network Security Group' events gives insight into network access changes and may reduce the time it takes to detect suspicious activity."
  solution       : "From Azure Console

Go to Monitor

Select Alerts

Click On New Alert Rule

Under Scope, click Select resource

Select the appropriate subscription under Filter by subscription

Select Network Security Groups under Filter by resource type

Select All for Filter by location

Click on the subscription resource from the entries populated under Resource

Verify Selection preview shows All Network Security Groups and your selected subscription name

Click Done

Under Condition click Add Condition

Select Create or Update Network Security Group signal

Click Done

Under Action group, select Add action groups and complete creation process or select appropriate action group

Under Alert rule details, enter Alert rule name and Description

Select appropriate resource group to save the alert to

Check Enable alert rule upon creation checkbox

Click Create alert rule

Using Azure Command Line Interface
Use the below command to create an Activity Log Alert for Create or Update Network Security Groups

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@'input.json''

Where input.json contains the Request body JSON data as mentioned below.

{
  'location': 'Global',
  'tags': {},
  'properties': {
    'scopes': [
      '/subscriptions/<Subscription_ID>'
    ],
    'enabled': true,
  'condition': {
    'allOf': [
      {
        'containsAny': null,
        'equals': 'Administrative',
        'field': 'category'
      },
      {
        'containsAny': null,
        'equals': 'Microsoft.Network/networkSecurityGroups/write',
        'field': 'operationName'
      }
    ]
  },
    'actions': {
    'actionGroups': [
      {
        'actionGroupId': '/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>',
        'webhookProperties': null
      }
    ]
  },
  }
}

Configurable Parameters for command line:

<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>

Configurable Parameters for input.json:

<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId

}

Default Value:

By default, no monitoring alerts are created."
  reference      : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|5.2.3,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listActivityLogAlertBySubscription"
  json_transform : '.[]  |.subscriptionId as $id | if (((select(.value[]?.properties.condition.allOf[].equals == "Microsoft.Network/networkSecurityGroups/write").value[].name)|length) == 0) and (((select(.value[]?.location == "Global").value[].name)|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
</custom_item>

<custom_item>
  description    : "5.2.4 Ensure that Activity Log Alert exists for Delete Network Security Group"
  info           : "Create an activity log alert for the Delete Network Security Group event.

Rationale:

Monitoring for 'Delete Network Security Group' events gives insight into network access changes and may reduce the time it takes to detect suspicious activity."
  solution       : "From Azure Console

Go to Monitor

Select Alerts

Click On New Alert Rule

Under Scope, click Select resource

Select the appropriate subscription under Filter by subscription

Select Network Security Groups under Filter by resource type

Select All for Filter by location

Click on the subscription resource from the entries populated under Resource

Click Done

Verify Selection preview shows Network Security Groups and your selected subscription name

Under Condition click Add Condition

Select Delete Network Security Group signal

Click Done

Under Action group, select Add action groups and complete creation process or select appropriate action group

Under Alert rule details, enter Alert rule name and Description

Select appropriate resource group to save the alert to

Check Enable alert rule upon creation checkbox

Click Create alert rule

Using Azure Command Line Interface
Use the below command to create an Activity Log Alert for Delete Network Security Groups

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@'input.json''

Where input.json contains the Request body JSON data as mentioned below.

{
  'location': 'Global',
  'tags': {},
  'properties': {
    'scopes': [
      '/subscriptions/<Subscription_ID>'
    ],
    'enabled': true,
  'condition': {
    'allOf': [
      {
        'containsAny': null,
        'equals': 'Administrative',
        'field': 'category'
      },
      {
        'containsAny': null,
        'equals': 'Microsoft.Network/networkSecurityGroups/delete',
        'field': 'operationName'
      }
    ]
  },
    'actions': {
    'actionGroups': [
      {
        'actionGroupId': '/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>',
        'webhookProperties': null
      }
    ]
  },
  }
}

Configurable Parameters for command line:

<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>

Configurable Parameters for input.json:

<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId



Default Value:

By default, no monitoring alerts are created."
  reference      : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|5.2.4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listActivityLogAlertBySubscription"
  json_transform : '.[]  |.subscriptionId as $id | if (((select(.value[]?.properties.condition.allOf[].equals == "Microsoft.Network/networkSecurityGroups/delete").value[].name)|length) == 0) and (((select(.value[]?.location == "Global").value[].name)|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
</custom_item>

<custom_item>
  description    : "5.2.5 Ensure that Activity Log Alert exists for Create or Update Network Security Group Rule"
  info           : "Create an activity log alert for the Create or Update Network Security Group Rule event.

Rationale:

Monitoring for Create or Update Network Security Group Rule events gives insight into network access changes and may reduce the time it takes to detect suspicious activity."
  solution       : "From Azure Console

Go to Monitor

Select Alerts

Click On New Alert Rule

Under Scope, click Select resource

Select the appropriate subscription under Filter by subscription

Select Network Security Group Rules under Filter by resource type

Select All for Filter by location

Click on the subscription resource from the entries populated under Resource

Click Done

Verify Selection preview shows Network Security Group Rules and your selected subscription name

Under Condition click Add Condition

Select Create or Update Network Security Group Rule signal

Click Done

Under Action group, select Add action groups and complete creation process or select appropriate action group

Under Alert rule details, enter Alert rule name and Description

Select appropriate resource group to save the alert to

Check Enable alert rule upon creation checkbox

Click Create alert rule

Using Azure Command Line Interface
Use the below command to create an Activity Log Alert for Create or Update Network Security Groups rule

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@'input.json''

Where input.json contains the Request body JSON data as mentioned below.

{
  'location': 'Global',
  'tags': {},
  'properties': {
    'scopes': [
      '/subscriptions/<Subscription_ID>'
    ],
    'enabled': true,
  'condition': {
    'allOf': [
      {
        'containsAny': null,
        'equals': 'Administrative',
        'field': 'category'
      },
      {
        'containsAny': null,
        'equals': 'Microsoft.Network/networkSecurityGroups/securityRules/write',
        'field': 'operationName'
      }
    ]
  },
    'actions': {
    'actionGroups': [
      {
        'actionGroupId': '/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>',
        'webhookProperties': null
      }
    ]
  },
  }
}

Configurable Parameters for command line:

<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>

Configurable Parameters for input.json:

<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId

Default Value:

By default, no monitoring alerts are created."
  reference      : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|5.2.5,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listActivityLogAlertBySubscription"
  json_transform : '.[]  |.subscriptionId as $id | if (((select(.value[]?.properties.condition.allOf[].equals == "Microsoft.Network/networkSecurityGroups/securityRules/write").value[].name)|length) == 0) and (((select(.value[]?.location == "Global").value[].name)|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
</custom_item>

<custom_item>
  description    : "5.2.6 Ensure that activity log alert exists for the Delete Network Security Group Rule"
  info           : "Create an activity log alert for the Delete Network Security Group Rule event.

Rationale:

Monitoring for Delete Network Security Group Rule events gives insight into network access changes and may reduce the time it takes to detect suspicious activity."
  solution       : "From Azure Console

Go to Monitor

Select Alerts

Click On New Alert Rule

Under Scope, click Select resource

Select the appropriate subscription under Filter by subscription

Select Network Security Group Rules under Filter by resource type

Select All for Filter by location

Click on the subscription resource from the entries populated under Resource

Click Done

Verify Selection preview shows Network Security Group Rules and your selected subscription name

Under Condition click Add Condition

Select Delete Network Security Group Rule signal

Click Done

Under Action group, select Add action groups and complete creation process or select appropriate action group

Under Alert rule details, enter Alert rule name and Description

Select appropriate resource group to save the alert to

Check Enable alert rule upon creation checkbox

Click Create alert rule

Using Azure Command Line Interface
Use the below command to create an Activity Log Alert for Delete Network Security Groups rule

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@'input.json''

Where input.json contains the Request body JSON data as mentioned below.

{
  'location': 'Global',
  'tags': {},
  'properties': {
    'scopes': [
      '/subscriptions/<Subscription_ID>'
    ],
    'enabled': true,
  'condition': {
    'allOf': [
      {
        'containsAny': null,
        'equals': 'Administrative',
        'field': 'category'
      },
      {
        'containsAny': null,
        'equals': 'Microsoft.Network/networkSecurityGroups/securityRules/delete',
        'field': 'operationName'
      }
    ]
  },
    'actions': {
    'actionGroups': [
      {
        'actionGroupId': '/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>',
        'webhookProperties': null
      }
    ]
  },
  }
}

Configurable Parameters for command line:

<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>

Configurable Parameters for input.json:

<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId

Default Value:

By default, no monitoring alerts are created."
  reference      : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|5.2.6,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listActivityLogAlertBySubscription"
  json_transform : '.[]  |.subscriptionId as $id | if (((select(.value[]?.properties.condition.allOf[].equals == "Microsoft.Network/networkSecurityGroups/securityRules/delete").value[].name)|length) == 0) and (((select(.value[]?.location == "Global").value[].name)|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
</custom_item>

<custom_item>
  description    : "5.2.7 Ensure that Activity Log Alert exists for Create or Update Security Solution"
  info           : "Create an activity log alert for the Create or Update Security Solution event.

Rationale:

Monitoring for Create or Update Security Solution events gives insight into changes to the active security solutions and may reduce the time it takes to detect suspicious activity."
  solution       : "From Azure Console

Go to Monitor

Select Alerts

Click On New Alert Rule

Under Scope, click Select resource

Select the appropriate subscription under Filter by subscription

Select Security Solutions under Filter by resource type

Select All for Filter by location

Click on the subscription resource from the entries populated under Resource

Click Done

Verify Selection preview shows Security Solutions and your selected subscription name

Under Condition click Add Condition

Select Create or Update Security Solutions signal

Click Done

Under Action group, select Add action groups and complete creation process or select appropriate action group

Under Alert rule details, enter Alert rule name and Description

Select appropriate resource group to save the alert to

Check Enable alert rule upon creation checkbox

Click Create alert rule

Using Azure Command Line Interface
Use the below command to create an Activity Log Alert for Create or Update Security Solutions

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@'input.json''

Where input.json contains the Request body JSON data as mentioned below.

{
  'location': 'Global',
  'tags': {},
  'properties': {
    'scopes': [
      '/subscriptions/<Subscription_ID>'
    ],
    'enabled': true,
  'condition': {
    'allOf': [
      {
        'containsAny': null,
        'equals': 'Security',
        'field': 'category'
      },
      {
        'containsAny': null,
        'equals': 'Microsoft.Security/securitySolutions/write',
        'field': 'operationName'
      }
    ]
  },
    'actions': {
    'actionGroups': [
      {
        'actionGroupId': '/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>',
        'webhookProperties': null
      }
    ]
  },
  }
}

Configurable Parameters for command line:

<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>

Configurable Parameters for input.json:

<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId



Default Value:

By default, no monitoring alerts are created."
  reference      : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|5.2.7,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listActivityLogAlertBySubscription"
  json_transform : '.[]  |.subscriptionId as $id | if (((select(.value[]?.properties.condition.allOf[].equals == "Microsoft.Security/securitySolutions/write").value[].name)|length) == 0) and (((select(.value[]?.location == "Global").value[].name)|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
</custom_item>

<custom_item>
  description    : "5.2.8 Ensure that Activity Log Alert exists for Delete Security Solution"
  info           : "Create an activity log alert for the Delete Security Solution event.

Rationale:

Monitoring for Delete Security Solution events gives insight into changes to the active security solutions and may reduce the time it takes to detect suspicious activity."
  solution       : "From Azure Console

Go to Monitor

Select Alerts

Click On New Alert Rule

Under Scope, click Select resource

Select the appropriate subscription under Filter by subscription

Select Security Solutions under Filter by resource type

Select All for Filter by location

Click on the subscription resource from the entries populated under Resource

Click Done

Verify Selection preview shows Security Solutions and your selected subscription name

Under Condition click Add Condition

Select Delete Security Solutions signal

Click Done

Under Action group, select Add action groups and complete creation process or select appropriate action group

Under Alert rule details, enter Alert rule name and Description

Select appropriate resource group to save the alert to

Check Enable alert rule upon creation checkbox

Click Create alert rule

Using Azure Command Line Interface
Use the below command to create an Activity Log Alert for Delete Security Solutions

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@'input.json''

Where input.json contains the Request body JSON data as mentioned below.

{
  'location': 'Global',
  'tags': {},
  'properties': {
    'scopes': [
      '/subscriptions/<Subscription_ID>'
    ],
    'enabled': true,
  'condition': {
    'allOf': [
      {
        'containsAny': null,
        'equals': 'Security',
        'field': 'category'
      },
      {
        'containsAny': null,
        'equals': 'Microsoft.Security/securitySolutions/delete',
        'field': 'operationName'
      }
    ]
  },
    'actions': {
    'actionGroups': [
      {
        'actionGroupId': '/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>',
        'webhookProperties': null
      }
    ]
  },
  }
}

Configurable Parameters for command line:

<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>

Configurable Parameters for input.json:

<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId

Default Value:

By default, no monitoring alerts are created."
  reference      : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|5.2.8,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listActivityLogAlertBySubscription"
  json_transform : '.[]  |.subscriptionId as $id | if (((select(.value[]?.properties.condition.allOf[].equals == "Microsoft.Security/securitySolutions/delete").value[].name)|length) == 0) and (((select(.value[]?.location == "Global").value[].name)|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
</custom_item>

<custom_item>
  description    : "5.2.9 Ensure that Activity Log Alert exists for Create or Update or Delete SQL Server Firewall Rule - delete"
  info           : "Create an activity log alert for the Create or Update or Delete SQL Server Firewall Rule event.

Rationale:

Monitoring for Create or Update or Delete SQL Server Firewall Rule events gives insight into network access changes and may reduce the time it takes to detect suspicious activity."
  solution       : "From Azure Console

Go to Monitor

Select Alerts

Click On New Alert Rule

Under Scope, click Select resource

Select the appropriate subscription under Filter by subscription

Select SQL servers under Filter by resource type

Select All for Filter by location

Click on the subscription from the entries populated under Resource

Verify Selection preview shows SQL servers and your selected subscription name

Under Condition click Add Condition

Select All Administrative operations signal

Click Done

Under Action group, select Add action groups and complete creation process or select appropriate action group

Under Alert rule details, enter Alert rule name and Description

Select appropriate resource group to save the alert to

Check Enable alert rule upon creation checkbox

Click Create alert rule

Using Azure Command Line Interface
Use the below command to create an Activity Log Alert for Create or Update or Delete SQL Firewall Rule

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@'input.json''

Where input.json contains the Request body JSON data as mentioned below.

{
  'location': 'Global',
  'tags': {},
  'properties': {
    'scopes': [
      '/subscriptions/<Subscription_ID>'
    ],
    'enabled': true,
  'condition': {
    'allOf': [
      {
        'containsAny': null,
        'equals': 'Administrative',
        'field': 'category'
      },
      {
        'containsAny': null,
        'equals': 'Microsoft.Sql/servers/firewallRules/write',
        'field': 'operationName'
      }
    ]
  },
    'actions': {
    'actionGroups': [
      {
        'actionGroupId': '/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>',
        'webhookProperties': null
      }
    ]
  },
  }
}

Configurable Parameters for command line:

<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>

Configurable Parameters for input.json:

<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId



Default Value:

By default, no monitoring alerts are created."
  reference      : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|5.2.9,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listActivityLogAlertBySubscription"
  json_transform : '.[]  |.subscriptionId as $id | if (((select(.value[]?.properties.condition.allOf[].equals == "Microsoft.Sql/servers/firewallRules/delete").value[].name)|length) == 0) and (((select(.value[]?.location == "Global").value[].name)|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
</custom_item>

<custom_item>
  description    : "5.2.9 Ensure that Activity Log Alert exists for Create or Update or Delete SQL Server Firewall Rule - create/update"
  info           : "Create an activity log alert for the Create or Update or Delete SQL Server Firewall Rule event.

Rationale:

Monitoring for Create or Update or Delete SQL Server Firewall Rule events gives insight into network access changes and may reduce the time it takes to detect suspicious activity."
  solution       : "From Azure Console

Go to Monitor

Select Alerts

Click On New Alert Rule

Under Scope, click Select resource

Select the appropriate subscription under Filter by subscription

Select SQL servers under Filter by resource type

Select All for Filter by location

Click on the subscription from the entries populated under Resource

Verify Selection preview shows SQL servers and your selected subscription name

Under Condition click Add Condition

Select All Administrative operations signal

Click Done

Under Action group, select Add action groups and complete creation process or select appropriate action group

Under Alert rule details, enter Alert rule name and Description

Select appropriate resource group to save the alert to

Check Enable alert rule upon creation checkbox

Click Create alert rule

Using Azure Command Line Interface
Use the below command to create an Activity Log Alert for Create or Update or Delete SQL Firewall Rule

az account get-access-token --query '{subscription:subscription,accessToken:accessToken}' --out tsv | xargs -L1 bash -c 'curl -X PUT -H 'Authorization: Bearer $1' -H 'Content-Type: application/json' https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@'input.json''

Where input.json contains the Request body JSON data as mentioned below.

{
  'location': 'Global',
  'tags': {},
  'properties': {
    'scopes': [
      '/subscriptions/<Subscription_ID>'
    ],
    'enabled': true,
  'condition': {
    'allOf': [
      {
        'containsAny': null,
        'equals': 'Administrative',
        'field': 'category'
      },
      {
        'containsAny': null,
        'equals': 'Microsoft.Sql/servers/firewallRules/write',
        'field': 'operationName'
      }
    ]
  },
    'actions': {
    'actionGroups': [
      {
        'actionGroupId': '/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>',
        'webhookProperties': null
      }
    ]
  },
  }
}

Configurable Parameters for command line:

<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>

Configurable Parameters for input.json:

<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId



Default Value:

By default, no monitoring alerts are created."
  reference      : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4(5),CIS_Recommendation|5.2.9,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listActivityLogAlertBySubscription"
  json_transform : '.[]  |.subscriptionId as $id | if (((select(.value[]?.properties.condition.allOf[].equals == "Microsoft.Sql/servers/firewallRules/write").value[].name)|length) == 0) and (((select(.value[]?.location == "Global").value[].name)|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
</custom_item>

<report type:"WARNING">
  description : "5.3 Ensure that Diagnostic Logs are enabled for all services which support it."
  info        : "Diagnostic Logs capture activity to the data access plane while the Activity log is a subscription-level log for the control plane. Resource-level diagnostic logs provide insight into operations that were performed within that resource itself, for example, getting a secret from a Key Vault. Currently, 32 Azure resources support Diagnostic Logging (See the references section for a complete list), including Network Security Groups, Load Balancers, Key Vault, AD, Logic Apps and CosmosDB. The content of these logs varies by resource type. For example, Windows event system logs are a category of diagnostics logs for VMs, and blob, table, and queue logs are categories of diagnostics logs for storage accounts.

A number of back-end services were not configured to log and store Diagnostic Logs for certain activities or for a sufficient length. It is crucial that logging systems are correctly configured to log all relevant activities and retain those logs for a sufficient length of time. By default, Diagnostic Logs are not enabled. Given that the mean time to detection in an enterprise is 240 days, a minimum retention period of two years is recommended.

Note: The CIS Benchmark covers some specific Diagnostic Logs separately.

   3.3 - Ensure Storage logging is enabled for Queue service for read, write, and delete requests



   6.4 Ensure that Network Security Group Flow Log retention period is 'greater than 90 days'

Rationale:

A lack of Diagnostic Logs reduces the visibility into the data plane and therefore an organization's ability to detect reconnaissance, authorization attempts or other malicious activity. Unlike Activity Logs, Diagnostic Logs are not enabled by default. Specifically, without Diagnostic Logs it would be impossible to tell which entities had accessed a data store that which was breached. In addition, alerts for failed attempts to access APIs for Web Services or Databases are only possible when Diagnostic Logging is enabled.



Impact:

Costs for Log Analytics Workspaces varies with Log Volume.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Subscriptions should log every access and operation for all resources. Logs should be sent to Storage and a Log Analytics Workspace or equivalent third-party system. Logs should be kept in readily accessible storage for a minimum of one year, and then moved to inexpensive cold storage for a duration of time as necessary. If retention policies are set but storing logs in a Storage Account is disabled (for example, if only Event Hubs or Log Analytics options are selected), the retention policies have no effect. Enable all logging at first, and then be more aggressive moving data to cold storage if the volume of data becomes a cost concern.


From Azure Console

The specific steps for configuring resources within the Azure console vary depending on resource, but typically the steps are:

Go to the resource

Click on Diagnostic settings

In the blade that appears, click 'Add diagnostic setting'

Configure the diagnostic settings

Click on Save

Using Azure Command Line Interface

Enable logging for all resources which support Diagnostic Logs to ensure interactions within the resource are logged and available. The skeleton command for creating
logs and metrics with unlimited retention on a generic resource are shown below.

az monitor diagnostic-settings create --resource {ID} -n {name}
                           --event-hub-rule {eventHubRuleID} --storage-account {storageAccount}
                           --logs '[
                             {
                               'category': 'WorkflowRuntime',
                               'enabled': true,
                               'retentionPolicy': {
                                 'enabled': false,
                                 'days': 0
                               }
                             }
                           ]'
                           --metrics '[
                             {
                               'category': 'WorkflowRuntime',
                               'enabled': true,
                               'retentionPolicy': {
                                 'enabled': false,
                                 'days': 0
                               }
                             }
                           ]'

Default Value:

Disabled"
  reference   : "CSCv7|6.3,CSCv7|6.5,CSCv7|6.6,CSCv7|7.6,LEVEL|1A,CIS_Recommendation|5.3"
  see_also    : "https://workbench.cisecurity.org/files/3131"
</report>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Security Group Rules are present"
      request        : "listNetworkSecurityGroups"
      json_transform : '.[]|.subscriptionId as $id|.value[]|.name as $name| .properties.securityRules[]|"Network Security Group Name: \($name)"+" Rule Name : \(.name)"  + " Access: \(.properties.access) " + " Destination Port Range: \(.properties.destinationPortRange)" + " Direction: \(.properties.direction)" + " Protocol: \(.properties.protocol)" + " Source Address Prefix: \(.properties.sourceAddressPrefix)"'
      regex          : "Access:"
      expect         : 'Access:'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "6.1 Ensure that RDP access is restricted from the internet"
      info           : "Disable RDP access on network security groups from the Internet.

Rationale:

The potential security problem with using RDP over the Internet is that attackers can use various brute force techniques to gain access to Azure Virtual Machines. Once the attackers gain access, they can use a virtual machine as a launch point for compromising other machines on an Azure Virtual Network or even attack networked devices outside of Azure."
      solution       : "Disable direct RDP access to your Azure Virtual Machines from the Internet. After direct RDP access from the Internet is disabled, you have other options you can use to access these virtual machines for remote management:

Point-to-site VPN

Site-to-site VPN

ExpressRoute

Default Value:

By default, RDP access from internet is not enabled."
      reference      : "800-171|3.13.1,800-53|SC-7(12),CIS_Recommendation|6.1,CN-L3|8.1.10.6(j),CSCv7|9.2,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|1A,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listNetworkSecurityGroups"
      json_transform : '.[]|.subscriptionId as $id|.value[]|.name as $name| .properties.securityRules[]|"Network Security Group Name: \($name)"+" Rule Name : \(.name)"  + " Access: \(.properties.access) " + " Destination Port Range: \(.properties.destinationPortRange)" + " Direction: \(.properties.direction)" + " Protocol: \(.properties.protocol)" + " Source Address Prefix: \(.properties.sourceAddressPrefix)"'
      regex          : "Access:"
      not_expect     : 'Access: Allow  Destination Port Range: (3389|\*|(([0-9]|[0-9][0-9]|[0-9][0-9][0-9]|[1-2][0-9][0-9][0-9]|3[0-2][0-9][0-9]|33[0-8][0-9])-(3389|339[0-9]|3[4-9][0-9][0-9]|[4-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]))) Direction: Inbound Protocol: (TCP|\*) Source Address Prefix: (\*|0\.0\.0\.0|<nw>/0|/0|internet|any)'
    </custom_item>

    <custom_item>
      description    : "6.2 Ensure that SSH access is restricted from the internet"
      info           : "Disable SSH access on network security groups from the Internet.

Rationale:

The potential security problem with using SSH over the Internet is that attackers can use various brute force techniques to gain access to Azure Virtual Machines. Once the attackers gain access, they can use a virtual machine as a launch point for compromising other machines on the Azure Virtual Network or even attack networked devices outside of Azure."
      solution       : "Disable direct SSH access to your Azure Virtual Machines from the Internet. After direct SSH access from the Internet is disabled, you have other options you can use to access these virtual machines for remote management:

Point-to-site VPN

Site-to-site VPN

ExpressRoute

Default Value:

By default, SSH access from internet is not enabled."
      reference      : "800-171|3.13.1,800-53|SC-7(12),CIS_Recommendation|6.2,CN-L3|8.1.10.6(j),CSCv7|9.2,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|1A,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listNetworkSecurityGroups"
      json_transform : '.[]|.subscriptionId as $id|.value[]|.name as $name| .properties.securityRules[]|"Name : \(.name)"  + " Access: \(.properties.access) " + " Destination Port Range: \(.properties.destinationPortRange)" + " Direction: \(.properties.direction)" + " Protocol: \(.properties.protocol)" + " Source Address Prefix: \(.properties.sourceAddressPrefix)"'
      regex          : "Access:"
      not_expect     : 'Access: Allow  Destination Port Range: (22|\*|(([0-9]|1[0-9]|2[0-2])-(2[2-9][3-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-6][0-9][0-9][0-9][0-9]))) Direction: Inbound Protocol: (TCP|\*) Source Address Prefix: (\*|0\.0\.0\.0|<nw>/0|/0|internet|any)'
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "6.1 Ensure that RDP access is restricted from the internet"
      info        : "Disable RDP access on network security groups from the Internet.

Rationale:

The potential security problem with using RDP over the Internet is that attackers can use various brute force techniques to gain access to Azure Virtual Machines. Once the attackers gain access, they can use a virtual machine as a launch point for compromising other machines on an Azure Virtual Network or even attack networked devices outside of Azure."
      solution    : "Disable direct RDP access to your Azure Virtual Machines from the Internet. After direct RDP access from the Internet is disabled, you have other options you can use to access these virtual machines for remote management:

Point-to-site VPN

Site-to-site VPN

ExpressRoute

Default Value:

By default, RDP access from internet is not enabled."
      reference   : "800-171|3.13.1,800-53|SC-7(12),CIS_Recommendation|6.1,CN-L3|8.1.10.6(j),CSCv7|9.2,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|1A,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "6.2 Ensure that SSH access is restricted from the internet"
      info        : "Disable SSH access on network security groups from the Internet.

Rationale:

The potential security problem with using SSH over the Internet is that attackers can use various brute force techniques to gain access to Azure Virtual Machines. Once the attackers gain access, they can use a virtual machine as a launch point for compromising other machines on the Azure Virtual Network or even attack networked devices outside of Azure."
      solution    : "Disable direct SSH access to your Azure Virtual Machines from the Internet. After direct SSH access from the Internet is disabled, you have other options you can use to access these virtual machines for remote management:

Point-to-site VPN

Site-to-site VPN

ExpressRoute

Default Value:

By default, SSH access from internet is not enabled."
      reference   : "800-171|3.13.1,800-53|SC-7(12),CIS_Recommendation|6.2,CN-L3|8.1.10.6(j),CSCv7|9.2,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|1A,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Firewall Rules exist"
      request        : "listSQLServerFirewallRules"
      json_transform : '.[]|.subscriptionId as $id| .resourceGroups[]|.name as $name|.SQLServers[]|.name as $servername|.value[]|.name as $fwrname| "Subscription ID: : \($id)" + " Resource Group Name: \($name)" + " Server Name: \($servername)"+"   Firewall Rule Name: \($fwrname)" + "   -- Start Address: \(.properties.startIpAddress)" + "   -- End IP Address: \(.properties.endIpAddress)"'
      regex          : "-- Start Address:"
      expect         : '-- Start Address:'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "6.3 Ensure no SQL Databases allow ingress 0.0.0.0/0 (ANY IP)"
      info           : "Ensure that no SQL Databases allow ingress from 0.0.0.0/0 (ANY IP).

Rationale:

SQL Server includes a firewall to block access to unauthorized connections. More granular IP addresses can be defined by referencing the range of addresses available from specific datacenters.

By default, for a SQL server, a Firewall exists with StartIp of 0.0.0.0 and EndIP of 0.0.0.0 allowing access to all the Azure services.

Additionally, a custom rule can be set up with StartIp of 0.0.0.0 and EndIP of 255.255.255.255 allowing access from ANY IP over the Internet.

In order to reduce the potential attack surface for a SQL server, firewall rules should be defined with more granular IP addresses by referencing the range of addresses available from specific datacenters.

Impact:

Impact: Disabling Allow access to Azure Services will break all connections to SQL server and Hosted Databases unless custom IP specific rules are not added in Firewall Policy."
      solution       : "From Azure Console

Go to SQL servers

For each SQL server

Click on Firewall / Virtual Networks

Set Allow access to Azure services to 'OFF'

Set firewall rules to limit access to only authorized connections

Using Azure PowerShell
Disable Default Firewall Rule Allow access to Azure services :
Remove-AzureRmSqlServerFirewallRule -FirewallRuleName 'AllowAllWindowsAzureIps' -ResourceGroupName <resource group name> -ServerName <server name>
Remove custom Firewall rule:
Remove-AzureRmSqlServerFirewallRule -FirewallRuleName '<firewallRuleName>' -ResourceGroupName <resource group name> -ServerName <server name>
Set the appropriate firewall rules:

Set-AzureRmSqlServerFirewallRule -ResourceGroupName <resource group name> -ServerName <server name> -FirewallRuleName '<Fw rule Name>' -StartIpAddress '<IP Address other than 0.0.0.0>' -EndIpAddress '<IP Address other than 0.0.0.0 or 255.255.255.255>'

Default Value:

By default, setting Allow access to Azure Services is set to ON allowing access to all Windows Azure IP ranges."
      reference      : "800-171|3.13.1,800-53|SC-7(12),CIS_Recommendation|6.3,CN-L3|8.1.10.6(j),CSCv7|12,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|1A,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listSQLServerFirewallRules"
      json_transform : '.[]|.subscriptionId as $id| .resourceGroups[]|.name as $name|.SQLServers[]|.name as $servername|.value[]|.name as $fwrname| "Subscription ID: : \($id)" + " Resource Group Name: \($name)" + " Server Name: \($servername)"+"   Firewall Rule Name: \($fwrname)" + "   -- Start Address: \(.properties.startIpAddress)" + "   -- End IP Address: \(.properties.endIpAddress)"'
      regex          : "-- Start Address:"
      not_expect     : '(-- Start Address: 0\.0\.0\.0|-- End IP Address: 0\.0\.0\.0)'
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "6.3 Ensure no SQL Databases allow ingress 0.0.0.0/0 (ANY IP)"
      info        : "Ensure that no SQL Databases allow ingress from 0.0.0.0/0 (ANY IP).

Rationale:

SQL Server includes a firewall to block access to unauthorized connections. More granular IP addresses can be defined by referencing the range of addresses available from specific datacenters.

By default, for a SQL server, a Firewall exists with StartIp of 0.0.0.0 and EndIP of 0.0.0.0 allowing access to all the Azure services.

Additionally, a custom rule can be set up with StartIp of 0.0.0.0 and EndIP of 255.255.255.255 allowing access from ANY IP over the Internet.

In order to reduce the potential attack surface for a SQL server, firewall rules should be defined with more granular IP addresses by referencing the range of addresses available from specific datacenters.

Impact:

Impact: Disabling Allow access to Azure Services will break all connections to SQL server and Hosted Databases unless custom IP specific rules are not added in Firewall Policy."
      solution    : "From Azure Console

Go to SQL servers

For each SQL server

Click on Firewall / Virtual Networks

Set Allow access to Azure services to 'OFF'

Set firewall rules to limit access to only authorized connections

Using Azure PowerShell
Disable Default Firewall Rule Allow access to Azure services :
Remove-AzureRmSqlServerFirewallRule -FirewallRuleName 'AllowAllWindowsAzureIps' -ResourceGroupName <resource group name> -ServerName <server name>
Remove custom Firewall rule:
Remove-AzureRmSqlServerFirewallRule -FirewallRuleName '<firewallRuleName>' -ResourceGroupName <resource group name> -ServerName <server name>
Set the appropriate firewall rules:

Set-AzureRmSqlServerFirewallRule -ResourceGroupName <resource group name> -ServerName <server name> -FirewallRuleName '<Fw rule Name>' -StartIpAddress '<IP Address other than 0.0.0.0>' -EndIpAddress '<IP Address other than 0.0.0.0 or 255.255.255.255>'

Default Value:

By default, setting Allow access to Azure Services is set to ON allowing access to all Windows Azure IP ranges."
      reference   : "800-171|3.13.1,800-53|SC-7(12),CIS_Recommendation|6.3,CN-L3|8.1.10.6(j),CSCv7|12,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|1A,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

<custom_item>
  description    : "6.5 Ensure that Network Watcher is 'Enabled'"
  info           : "Enable Network Watcher for Azure subscriptions.

Rationale:

Network diagnostic and visualization tools available with Network Watcher help users understand, diagnose, and gain insights to the network in Azure.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Opting-out of Network Watcher automatic enablement is a permanent change. Once you opt-out you cannot opt-in without contacting support.

Default Value:

Network Watcher is automatically enabled. When you create or update a virtual network in your subscription, Network Watcher will be enabled automatically in your Virtual Network's region. There is no impact to your resources or associated charge for automatically enabling Network Watcher."
  reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|6.5,CN-L3|8.1.10.6(d),CSCv7|11.2,CSCv7|12.1,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listNetworkWatcher"
  json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.value[]|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+" Network Watcher Name: \(.name)" + " Provisioning State: \(.properties.provisioningState)"'
  regex          : ".+"
  not_expect     : ".+"
  severity       : MEDIUM
</custom_item>

<custom_item>
  description    : "6.6 Ensure that UDP Services are restricted from the Internet"
  info           : "Disable Internet exposed UDP ports on network security groups.

Rationale:

The potential security problem with broadly exposing UDP services over the Internet is that attackers can use DDoS amplification techniques to reflect spoofed UDP traffic from Azure Virtual Machines. The most common types of these attacks use exposed DNS, NTP, SSDP, SNMP, CLDAP and other UDP-based services as amplification source for disrupting services of other machines on the Azure Virtual Network or even attack networked devices outside of Azure."
  solution       : "Disable direct UDP access to your Azure Virtual Machines from the Internet. After direct UDP access from the Internet is disabled, you have other options you can use to access UDP based services running on these virtual machines:
Point-to-site VPN
Site-to-site VPN
ExpressRoute

Default Value:

By default, UDP access from internet is not enabled."
  reference      : "800-171|3.13.1,800-53|SC-7(12),CIS_Recommendation|6.6,CN-L3|8.1.10.6(j),CSCv7|9.2,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|1A,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
  see_also       : "https://workbench.cisecurity.org/files/3131"
  request        : "listNetworkSecurityGroups"
  json_transform : '.[]|.subscriptionId as $id|.value[]|.name as $name| .properties.securityRules[]|"Name : \(.name)"  + " Protocol: \(.properties.protocol)" + " Direction: \(.properties.direction)" + " Access: \(.properties.access)" + " Source Address Prefix: \(.properties.sourceAddressPrefix)"'
  regex          : "Protocol:"
  not_expect     : 'Protocol: (UDP|\*) Direction: Inbound Access: Allow Source Address Prefix: (\*|0\.0\.0\.0|<nw>/0|/0|internet|any)'
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Test if VMs exist"
      request        : "listVMs"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgn|.value[]|select(.properties != null)|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgn)"+" VM Name: \(.name)"'
      regex          : 'VM Name:'
      expect         : 'VM Name: .+'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "7.1 Ensure Virtual Machines are utilizing Managed Disks"
      info           : "Migrate BLOB based VHD's to Managed Disks on Virtual Machines to exploit the default features of this configuration. The features include

Default Disk Encryption

Resilience as Microsoft will managed the disk storage and move around if underlying hardware goes faulty

Reduction of costs over storage accounts

Rationale:

Managed disks are by default encrypted on the underlying hardware so no additional encryption is required for basic protection, it is available if additional encryption is required. Managed disks are by design more resilient that storage accounts.

For ARM deployed Virtual Machines, Azure Adviser will at some point recommend moving VHD's to managed disks both from a security and cost management perspective.

Impact:

There is no operational impact of migrating to managed disks other than the benefits mentioned above.

NOTE When converting to managed disks VMs will be powered off and back on."
      solution       : "From Azure Console

Using the search feature, go to Virtual Machines

Select the virtual machine you would like to convert

Select Disks in the menu for the VM

At the top select Migrate to managed disks

You may follow the prompts to convert the disk and finish by selecting 'Migrate' to start the process

NOTE VMs will be stopped and restarted after migration is complete.
Using Powershell

Stop-AzVM -ResourceGroupName $rgName -Name $vmName -Force
ConvertTo-AzVMManagedDisk -ResourceGroupName $rgName -VMName $vmName
Start-AzVM -ResourceGroupName $rgName -Name $vmName"
      reference      : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|7.1,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|13,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1M,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listVMs"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgn|.value[]|select((.properties.storageProfile.osDisk.managedDisk == null) or (.properties.storageProfile.osDisk.managedDisk != null))|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgn)"+" VM Name: \(.name)" + " Managed Disks: \(.properties.storageProfile.osDisk.managedDisk)"'
      regex          : 'Managed Disks:'
      not_expect     : 'Managed Disks: null'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "7.4 Ensure that only approved extensions are installed"
      info           : "Only install organization-approved extensions on VMs.

Rationale:

Azure virtual machine extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. These extensions run with administrative privileges and could potentially access anything on a virtual machine. The Azure Portal and community provide several such extensions. Each organization should carefully evaluate these extensions and ensure that only those that are approved for use are actually implemented.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "From Azure Console

Go to Virtual machines

For each virtual machine, go to Settings

Click on Extensions

If there are unapproved extensions, uninstall them.

From Azure Command Line Interface 2.0
From the audit command identify the unapproved extensions, and use the below CLI command to remove an unapproved extension attached to VM.

az vm extension delete --resource-group <resourceGroupName> --vm-name <vmName> --name <extensionName>

Default Value:

By default, no extensions are added to the virtual machines."
      reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|7.4,CN-L3|8.1.10.6(d),CSCv7|2.1,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listVMInstanceView"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.VMs[]|.name as $vmname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+" VM Name: \($vmname)" + " Extension Name: \(.value.extensions[].name)"'
      regex          : ".+"
      not_expect     : ".+"
      severity       : MEDIUM
    </custom_item>

    <report type:"WARNING">
      description : "7.5 Ensure that the latest OS Patches for all Virtual Machines are applied"
      info        : "Ensure that the latest OS patches for all virtual machines are applied.

Rationale:

Windows and Linux virtual machines should be kept updated to:

Address a specific bug or flaw

Improve an OS or application's general stability

Fix a security vulnerability

The Azure Security Center retrieves a list of available security and critical updates from Windows Update or Windows Server Update Services (WSUS), depending on which service is configured on a Windows VM. The security center also checks for the latest updates in Linux systems. If a VM is missing a system update, the security center will recommend system updates be applied.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Follow Microsoft Azure documentation to apply security patches from the security center. Alternatively, you can employ your own patch assessment and management tool to periodically assess, report and install the required security patches for your OS.



Default Value:

By default, patches are not automatically deployed."
      reference   : "CSCv7|3.4,LEVEL|1M,CIS_Recommendation|7.5"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <custom_item>
      description    : "7.6 Ensure that the endpoint protection for all Virtual Machines is installed"
      info           : "Install endpoint protection for all virtual machines.

Rationale:

Installing endpoint protection systems (like Antimalware for Azure) provides for real-time protection capability that helps identify and remove viruses, spyware, and other malicious software, with configurable alerts when known malicious or unwanted software attempts to install itself or run on Azure systems.

Impact:

Endpoint protection will incur an additional cost to you.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "Follow Microsoft Azure documentation to install endpoint protection from the security center. Alternatively, you can employ your own endpoint protection tool for your OS."
      reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|7.6,CN-L3|8.1.10.6(d),CSCv7|8.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listVMInstanceView"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.VMs[]|.name as $vmname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+" VM Name: \($vmname)" + " Extension Name: \(.value.extensions[].name)"'
      regex          : ".+"
      not_expect     : ".+"
      severity       : MEDIUM
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "7.1 Ensure Virtual Machines are utilizing Managed Disks"
      info        : "Migrate BLOB based VHD's to Managed Disks on Virtual Machines to exploit the default features of this configuration. The features include

Default Disk Encryption

Resilience as Microsoft will managed the disk storage and move around if underlying hardware goes faulty

Reduction of costs over storage accounts

Rationale:

Managed disks are by default encrypted on the underlying hardware so no additional encryption is required for basic protection, it is available if additional encryption is required. Managed disks are by design more resilient that storage accounts.

For ARM deployed Virtual Machines, Azure Adviser will at some point recommend moving VHD's to managed disks both from a security and cost management perspective.

Impact:

There is no operational impact of migrating to managed disks other than the benefits mentioned above.

NOTE When converting to managed disks VMs will be powered off and back on."
      solution    : "From Azure Console

Using the search feature, go to Virtual Machines

Select the virtual machine you would like to convert

Select Disks in the menu for the VM

At the top select Migrate to managed disks

You may follow the prompts to convert the disk and finish by selecting 'Migrate' to start the process

NOTE VMs will be stopped and restarted after migration is complete.
Using Powershell

Stop-AzVM -ResourceGroupName $rgName -Name $vmName -Force
ConvertTo-AzVMManagedDisk -ResourceGroupName $rgName -VMName $vmName
Start-AzVM -ResourceGroupName $rgName -Name $vmName"
      reference   : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|7.1,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|13,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1M,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "7.4 Ensure that only approved extensions are installed"
      info        : "Only install organization-approved extensions on VMs.

Rationale:

Azure virtual machine extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. These extensions run with administrative privileges and could potentially access anything on a virtual machine. The Azure Portal and community provide several such extensions. Each organization should carefully evaluate these extensions and ensure that only those that are approved for use are actually implemented."
      solution    : "From Azure Console

Go to Virtual machines

For each virtual machine, go to Settings

Click on Extensions

If there are unapproved extensions, uninstall them.

From Azure Command Line Interface 2.0
From the audit command identify the unapproved extensions, and use the below CLI command to remove an unapproved extension attached to VM.

az vm extension delete --resource-group <resourceGroupName> --vm-name <vmName> --name <extensionName>

Default Value:

By default, no extensions are added to the virtual machines."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|7.4,CN-L3|8.1.10.6(d),CSCv7|2.1,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "7.5 Ensure that the latest OS Patches for all Virtual Machines are applied"
      info        : "Ensure that the latest OS patches for all virtual machines are applied.

Rationale:

Windows and Linux virtual machines should be kept updated to:

Address a specific bug or flaw

Improve an OS or application's general stability

Fix a security vulnerability

The Azure Security Center retrieves a list of available security and critical updates from Windows Update or Windows Server Update Services (WSUS), depending on which service is configured on a Windows VM. The security center also checks for the latest updates in Linux systems. If a VM is missing a system update, the security center will recommend system updates be applied."
      solution    : "Follow Microsoft Azure documentation to apply security patches from the security center. Alternatively, you can employ your own patch assessment and management tool to periodically assess, report and install the required security patches for your OS.



Default Value:

By default, patches are not automatically deployed."
      reference   : "CSCv7|3.4,LEVEL|1M,CIS_Recommendation|7.5"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "7.6 Ensure that the endpoint protection for all Virtual Machines is installed"
      info        : "Install endpoint protection for all virtual machines.

Rationale:

Installing endpoint protection systems (like Antimalware for Azure) provides for real-time protection capability that helps identify and remove viruses, spyware, and other malicious software, with configurable alerts when known malicious or unwanted software attempts to install itself or run on Azure systems.

Impact:

Endpoint protection will incur an additional cost to you."
      solution    : "Follow Microsoft Azure documentation to install endpoint protection from the security center. Alternatively, you can employ your own endpoint protection tool for your OS."
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|7.6,CN-L3|8.1.10.6(d),CSCv7|8.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Kubernetes Services exist?"
      request        : "listAksManagedClusters"
      json_transform : '.[]|.subscriptionId as $subid|select(.resourceGroups[].value[] != null).resourceGroups[]|"SubscriptionID: \($subid)"+" ResourceGroup: \(.name)" + " Name: \(.value[].name)" '
      regex          : "Name: "
      expect         : " Name: .+"
      match_all      : YES
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "8.5 Enable role-based access control (RBAC) within Azure Kubernetes Services"
      info           : "Ensure that RBAC is enabled on all Azure Kubernetes Services Instances

Rationale:

Azure Kubernetes Services has the capability to integrate Azure Active Directory users and groups into Kubernetes RBAC controls within the AKS Kubernetes API Server. This should be utilized to enable granular access to Kubernetes resources within the AKS clusters supporting RBAC controls not just of the overarching AKS instance but also the individual resources managed within Kubernetes.

Impact:

If RBAC is not enabled, the granularity of permissions granted to Kubernetes resources is diminished presenting more permissions than needed to users requiring access to Kubernetes resources in AKS."
      solution       : "WARNING: This setting cannot be changed after AKS deployment, cluster will require recreation.

Default Value:

By default, RBAC is enabled."
      reference      : "800-171|3.5.1,800-53|IA-2.,CIS_Recommendation|8.5,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|14,CSCv7|4,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listAksManagedClusters"
      json_transform : '.[]|.subscriptionId as $subid|select(.resourceGroups[].value[] != null).resourceGroups[]|"SubscriptionID: \($subid)"+" ResourceGroup: \(.name)" + " Enable RBAC: \(.value[].properties.enableRBAC)" '
      regex          : "Enable RBAC:"
      expect         : "Enable RBAC: true"
      match_all      : YES
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "8.5 Enable role-based access control (RBAC) within Azure Kubernetes Services"
      info        : "Ensure that RBAC is enabled on all Azure Kubernetes Services Instances

Rationale:

Azure Kubernetes Services has the capability to integrate Azure Active Directory users and groups into Kubernetes RBAC controls within the AKS Kubernetes API Server. This should be utilized to enable granular access to Kubernetes resources within the AKS clusters supporting RBAC controls not just of the overarching AKS instance but also the individual resources managed within Kubernetes.

Impact:

If RBAC is not enabled, the granularity of permissions granted to Kubernetes resources is diminished presenting more permissions than needed to users requiring access to Kubernetes resources in AKS."
      solution    : "WARNING: This setting cannot be changed after AKS deployment, cluster will require recreation.

Default Value:

By default, RBAC is enabled."
      reference   : "800-171|3.5.1,800-53|IA-2.,CIS_Recommendation|8.5,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|14,CSCv7|4,CSF|PR.AC-1,ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Web Apps exist"
      request        : "listWebApps"
      json_transform : '.[].resourceGroups[].value[].name'
      regex          : ".*"
      expect         : ".+"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "9.2 Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
      info           : "Azure Web Apps allows sites to run under both HTTP and HTTPS by default. Web apps can be accessed by anyone using non-secure HTTP links by default. Non-secure HTTP requests can be restricted and all HTTP requests redirected to the secure HTTPS port. It is recommended to enforce HTTPS-only traffic.

Rationale:

Enabling HTTPS-only traffic will redirect all non-secure HTTP request to HTTPS ports. HTTPS uses the SSL/TLS protocol to provide a secure connection, which is both encrypted and authenticated. So it is important to support HTTPS for the security benefits.

Impact:

When it is enabled, every incoming HTTP requests are redirected to the HTTPS port. It means an extra level of security will be added to the HTTP requests made to the app."
      solution       : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to App Services

Click on each App

Under Setting section, Click on SSL settings

Set HTTPS Only to On under Protocol Settings section

Using Azure Command Line Interface
To set HTTPS-only traffic value for an existing app, run the following command:

az webapp update --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --set httpsOnly=true

Default Value:

By default, HTTPS-only feature will be disabled when a new app is created using the command-line tool or Azure Portal console."
      reference      : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|9.2,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|7,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listWebApps"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.value[]|.name as $appname|.properties|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($appname)"+ " HTTPS Only: \(.httpsOnly)" '
      regex          : "HTTPS Only: "
      expect         : "HTTPS Only: true"
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "9.3 Ensure web app is using the latest version of TLS encryption"
      info           : "The TLS(Transport Layer Security) protocol secures transmission of data over the internet using standard encryption technology. Encryption should be set with the latest version of TLS. App service allows TLS 1.2 by default, which is the recommended TLS level by industry standards, such as PCI DSS.

Rationale:

App service currently allows the web app to set TLS versions 1.0, 1.1 and 1.2. It is highly recommended to use the latest TLS 1.2 version for web app secure connections."
      solution       : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to App Services

Click on each App

Under Setting section, Click on SSL settings

Set Minimum TLS Version to 1.2 under Protocol Settings section

Using Azure Command Line Interface
To set TLS Version for an existing app, run the following command:

az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --min-tls-version 1.2

Default Value:

By default, TLS Version feature will be set to 1.2 when a new app is created using the command-line tool or Azure Portal console."
      reference      : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|9.3,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|7,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listAppConfig"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $waname|.value[].properties.minTlsVersion as $tlsversion|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " TLS Min Version: \($tlsversion)" '
      regex          : "TLS Min Version: "
      expect         : "TLS Min Version: 1\.2"
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "9.5 Ensure that Register with Azure Active Directory is enabled on App Service"
      info           : "Managed service identity in App Service makes the app more secure by eliminating secrets from the app, such as credentials in the connection strings. When registering with Azure Active Directory in the app service, the app will connect to other Azure services securely without the need of username and passwords.

Rationale:

App Service provides a highly scalable, self-patching web hosting service in Azure. It also provides a managed identity for apps, which is a turn-key solution for securing access to Azure SQL Database and other Azure services."
      solution       : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to App Services

Click on each App

Under Setting section, Click on Identity

Set Status to On

Using Azure Command Line Interface
To set Register with Azure Active Directory feature for an existing app, run the following command:

az webapp identity assign --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME>"
      reference      : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|9.5,CN-L3|8.1.10.6(d),CSCv7|16.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listAppConfig"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $waname|.value[].properties.managedServiceIdentityId as $managedIdent|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " Managed Identity: \($managedIdent)" '
      regex          : "Managed Identity: "
      not_expect     : "Managed Identity: null"
    </custom_item>

    <custom_item>
      description    : "9.6 Ensure that 'PHP version' is the latest, if used to run the web app"
      info           : "Periodically newer versions are released for PHP software either due to security flaws or to include additional functionality. Using the latest PHP version for web apps is recommended in order to take advantage of security fixes, if any, and/or additional functionalities of the newer version.

    Rationale:

    Newer versions may contain security enhancements and additional functionality. Using the latest software version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected.

    NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "From Azure Console

    Login to Azure Portal using https://portal.azure.com

    Go to App Services

    Click on each App

    Under Setting section, Click on Configuration

    Set PHP version to latest version available under General settings

    NOTE: No action is required If PHP version is set to Off as PHP is not used by your web app.
    Using Azure Command Line Interface
    To see the list of supported runtimes:

    az webapp list-runtimes | grep php

    To set latest PHP version for an existing app, run the following command:

    az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --php-version <VERSION>

    Default Value:

    By default, PHP 5.6 version will be used when creating a new app using the command-line tool or the Azure Portal console."
      reference      : "800-171|3.14.1,800-53|SI-2c.,CIS_Recommendation|9.6,CN-L3|8.1.4.4(e),CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1M,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|SS14b,QCSC-v1|11.2,SWIFT-CSCv1|2.2"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listAppConfig"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $waname|.value[].properties.phpVersion as $phpversion|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " PHP Version: \($phpversion)" '
      regex          : "PHP Version: "
      expect         : "PHP Version: MANUAL_REVIEW"
      match_all      : YES
      severity       : MEDIUM
    </custom_item>

    <custom_item>
      description    : "9.7 Ensure that 'Python version' is the latest, if used to run the web app"
      info           : "Periodically, newer versions are released for Python software either due to security flaws or to include additional functionality. Using the latest Python version for web apps is recommended in order to take advantage of security fixes, if any, and/or additional functionalities of the newer version.

    Rationale:

    Newer versions may contain security enhancements and additional functionality. Using the latest software version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected.

    NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "Using Console:

    Login to Azure Portal using https://portal.azure.com

    Go to App Services

    Click on each App

    Under Setting section, Click on Application settings

    Set Python version to latest version available under General settings

    NOTE: No action is required, If Python version is set to Off as Python is not used by your web app.
    Using Command Line:
    To see the list of supported runtimes:

    az webapp list-runtimes | grep python

    To set latest Python version for an existing app, run the following command:

    az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --python-version <VERSION>"
      reference      : "800-171|3.14.1,800-53|SI-2c.,CIS_Recommendation|9.7,CN-L3|8.1.4.4(e),CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1M,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|SS14b,QCSC-v1|11.2,SWIFT-CSCv1|2.2"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listAppConfig"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $waname|.value[].properties.pythonVersion as $pythonversion|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " Python Version: \($pythonversion)" '
      regex          : "Python Version: "
      expect         : "Python Version: MANUAL_REVIEW"
      match_all      : YES
      severity       : MEDIUM
    </custom_item>

    <custom_item>
      description    : "9.8 Ensure that 'Java version' is the latest, if used to run the web app"
      info           : "Periodically, newer versions are released for Java software either due to security flaws or to include additional functionality. Using the latest Java version for web apps is recommended in order to take advantage of security fixes, if any, and/or new functionalities of the newer version.

    Rationale:

    Newer versions may contain security enhancements and additional functionality. Using the latest software version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected.

    NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "From Azure Console

    Login to Azure Portal using https://portal.azure.com

    Go to App Services

    Click on each App

    Under Setting section, Click on Application settings

    Under General settings, Set Java version to latest version available

    Set Java minor version to latest version available

    Set Java web container to the latest version of web container available

    NOTE: No action is required If Java version is set to Off as Java is not used by your web app.
    Using Azure Command Line Interface
    To see the list of supported runtimes:

    az webapp list-runtimes | grep java

    To set latest Java version for an existing app, run the following command:

    az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --java-version '1.8' --java-container 'Tomcat' --java-container-version '<VERSION>'"
      reference      : "800-171|3.14.1,800-53|SI-2c.,CIS_Recommendation|9.8,CN-L3|8.1.4.4(e),CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1M,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|SS14b,QCSC-v1|11.2,SWIFT-CSCv1|2.2"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listAppConfig"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $waname|.value[].properties.javaVersion as $javaversion|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " Java Version: \($javaversion)" '
      regex          : "Java Version: "
      expect         : "Java Version: MANUAL_REVIEW"
      match_all      : YES
      severity       : MEDIUM
    </custom_item>

    <custom_item>
      description    : "9.9 Ensure that 'HTTP Version' is the latest, if used to run the web app"
      info           : "Periodically, newer versions are released for HTTP either due to security flaws or to include additional functionality. Using the latest HTTP version for web apps to take advantage of security fixes, if any, and/or new functionalities of the newer version.

    Rationale:

    Newer versions may contain security enhancements and additional functionality. Using the latest version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected.

    HTTP 2.0 has additional performance improvements on the head-of-line blocking problem of old HTTP version, header compression, and prioritization of requests. HTTP 2.0 no longer supports HTTP 1.1's chunked transfer encoding mechanism, as it provides its own, more efficient, mechanisms for data streaming.

    NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "From Azure Console

    Login to Azure Portal using https://portal.azure.com

    Go to App Services

    Click on each App

    Under Setting section, Click on Configuration

    Set HTTP version to 2.0 under General settings

    NOTE: Most modern browsers support HTTP 2.0 protocol over TLS only, while non-encrypted traffic continues to use HTTP 1.1. To ensure that client browsers connect to your app with HTTP/2, either buy an App Service Certificate for your app's custom domain or bind a third party certificate.
    Using Azure Command Line Interface
    To set HTTP 2.0 version for an existing app, run the following command:

    az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --http20-enabled true"
      reference      : "800-171|3.14.1,800-53|SI-2c.,CIS_Recommendation|9.9,CN-L3|8.1.4.4(e),CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1M,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|SS14b,QCSC-v1|11.2,SWIFT-CSCv1|2.2"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listAppConfig"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $waname|.value[].properties.http20Enabled as $httpversion|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " HTTP 2.0: \($httpversion)" '
      regex          : "HTTP 2.0: "
      expect         : "HTTP 2.0: MANUAL_REVIEW"
      match_all      : YES
      severity       : MEDIUM
    </custom_item>

    <custom_item>
      description    : "9.10 Ensure FTP deployments are disabled"
      info           : "By default, Azure Functions, Web and API Services can be deployed over FTP. If FTP is required for an essential deployment workflow, FTPS should be required for FTP login for all App Service Apps and Functions.

    Rationale:

    Azure FTP deployment endpoints are public. An attacker listening to traffic on a wifi network used by a remote employee or a corporate network could see login traffic in clear-text which would then grant them full control of the code base of the app or service. This finding is more severe if User Credentials for deployment are set at the subscription level rather than using the default Application Credentials which are unique per App.

    Impact:

    Any deployment workflows that rely on FTP or FTPs rather than the WebDeploy or HTTPs endpoints may be affected."
      solution       : "From Azure Console

    Go to the Azure Portal

    Select App Services

    Click on an App

    Select Settings > Configuration

    Under Platform Settings, FTP state should be Disabled
    or FTPS Only

    Default Value:

    Enabled"
      reference      : "800-171|3.5.2,800-53|IA-5.,CIS_Recommendation|9.10,CSCv7|14.4,CSCv7|16.5,CSF|PR.AC-1,ITSG-33|IA-5,LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
      see_also       : "https://workbench.cisecurity.org/files/3131"
      request        : "listAppConfig"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $waname|.value[].properties.ftpsState as $ftpstate|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " FTP State: \($ftpstate)" '
      regex          : "FTP State: "
      not_expect     : "FTP State: AllAllowed"
      match_all      : YES
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "9.2 Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
      info        : "Azure Web Apps allows sites to run under both HTTP and HTTPS by default. Web apps can be accessed by anyone using non-secure HTTP links by default. Non-secure HTTP requests can be restricted and all HTTP requests redirected to the secure HTTPS port. It is recommended to enforce HTTPS-only traffic.

Rationale:

Enabling HTTPS-only traffic will redirect all non-secure HTTP request to HTTPS ports. HTTPS uses the SSL/TLS protocol to provide a secure connection, which is both encrypted and authenticated. So it is important to support HTTPS for the security benefits.

Impact:

When it is enabled, every incoming HTTP requests are redirected to the HTTPS port. It means an extra level of security will be added to the HTTP requests made to the app."
      solution    : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to App Services

Click on each App

Under Setting section, Click on SSL settings

Set HTTPS Only to On under Protocol Settings section

Using Azure Command Line Interface
To set HTTPS-only traffic value for an existing app, run the following command:

az webapp update --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --set httpsOnly=true

Default Value:

By default, HTTPS-only feature will be disabled when a new app is created using the command-line tool or Azure Portal console."
      reference   : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|9.2,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|7,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "9.3 Ensure web app is using the latest version of TLS encryption"
      info        : "The TLS(Transport Layer Security) protocol secures transmission of data over the internet using standard encryption technology. Encryption should be set with the latest version of TLS. App service allows TLS 1.2 by default, which is the recommended TLS level by industry standards, such as PCI DSS.

Rationale:

App service currently allows the web app to set TLS versions 1.0, 1.1 and 1.2. It is highly recommended to use the latest TLS 1.2 version for web app secure connections."
      solution    : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to App Services

Click on each App

Under Setting section, Click on SSL settings

Set Minimum TLS Version to 1.2 under Protocol Settings section

Using Azure Command Line Interface
To set TLS Version for an existing app, run the following command:

az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --min-tls-version 1.2

Default Value:

By default, TLS Version feature will be set to 1.2 when a new app is created using the command-line tool or Azure Portal console."
      reference   : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|9.3,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|7,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "9.5 Ensure that Register with Azure Active Directory is enabled on App Service"
      info        : "Managed service identity in App Service makes the app more secure by eliminating secrets from the app, such as credentials in the connection strings. When registering with Azure Active Directory in the app service, the app will connect to other Azure services securely without the need of username and passwords.

Rationale:

App Service provides a highly scalable, self-patching web hosting service in Azure. It also provides a managed identity for apps, which is a turn-key solution for securing access to Azure SQL Database and other Azure services."
      solution    : "From Azure Console

Login to Azure Portal using https://portal.azure.com

Go to App Services

Click on each App

Under Setting section, Click on Identity

Set Status to On

Using Azure Command Line Interface
To set Register with Azure Active Directory feature for an existing app, run the following command:

az webapp identity assign --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME>"
      reference   : "800-171|3.4.2,800-53|CM-6b.,CIS_Recommendation|9.5,CN-L3|8.1.10.6(d),CSCv7|16.2,CSF|PR.IP-1,ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "9.6 Ensure that 'PHP version' is the latest, if used to run the web app"
      info        : "Periodically newer versions are released for PHP software either due to security flaws or to include additional functionality. Using the latest PHP version for web apps is recommended in order to take advantage of security fixes, if any, and/or additional functionalities of the newer version.

    Rationale:

    Newer versions may contain security enhancements and additional functionality. Using the latest software version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected."
      solution    : "From Azure Console

    Login to Azure Portal using https://portal.azure.com

    Go to App Services

    Click on each App

    Under Setting section, Click on Configuration

    Set PHP version to latest version available under General settings

    NOTE: No action is required If PHP version is set to Off as PHP is not used by your web app.
    Using Azure Command Line Interface
    To see the list of supported runtimes:

    az webapp list-runtimes | grep php

    To set latest PHP version for an existing app, run the following command:

    az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --php-version <VERSION>

    Default Value:

    By default, PHP 5.6 version will be used when creating a new app using the command-line tool or the Azure Portal console."
      reference   : "800-171|3.14.1,800-53|SI-2c.,CIS_Recommendation|9.6,CN-L3|8.1.4.4(e),CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1M,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|SS14b,QCSC-v1|11.2,SWIFT-CSCv1|2.2"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "9.7 Ensure that 'Python version' is the latest, if used to run the web app"
      info        : "Periodically, newer versions are released for Python software either due to security flaws or to include additional functionality. Using the latest Python version for web apps is recommended in order to take advantage of security fixes, if any, and/or additional functionalities of the newer version.

    Rationale:

    Newer versions may contain security enhancements and additional functionality. Using the latest software version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected."
      solution    : "Using Console:

    Login to Azure Portal using https://portal.azure.com

    Go to App Services

    Click on each App

    Under Setting section, Click on Application settings

    Set Python version to latest version available under General settings

    NOTE: No action is required, If Python version is set to Off as Python is not used by your web app.
    Using Command Line:
    To see the list of supported runtimes:

    az webapp list-runtimes | grep python

    To set latest Python version for an existing app, run the following command:

    az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --python-version <VERSION>"
      reference   : "800-171|3.14.1,800-53|SI-2c.,CIS_Recommendation|9.7,CN-L3|8.1.4.4(e),CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1M,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|SS14b,QCSC-v1|11.2,SWIFT-CSCv1|2.2"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "9.8 Ensure that 'Java version' is the latest, if used to run the web app"
      info        : "Periodically, newer versions are released for Java software either due to security flaws or to include additional functionality. Using the latest Java version for web apps is recommended in order to take advantage of security fixes, if any, and/or new functionalities of the newer version.

    Rationale:

    Newer versions may contain security enhancements and additional functionality. Using the latest software version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected."
      solution    : "From Azure Console

    Login to Azure Portal using https://portal.azure.com

    Go to App Services

    Click on each App

    Under Setting section, Click on Application settings

    Under General settings, Set Java version to latest version available

    Set Java minor version to latest version available

    Set Java web container to the latest version of web container available

    NOTE: No action is required If Java version is set to Off as Java is not used by your web app.
    Using Azure Command Line Interface
    To see the list of supported runtimes:

    az webapp list-runtimes | grep java

    To set latest Java version for an existing app, run the following command:

    az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --java-version '1.8' --java-container 'Tomcat' --java-container-version '<VERSION>'"
      reference   : "800-171|3.14.1,800-53|SI-2c.,CIS_Recommendation|9.8,CN-L3|8.1.4.4(e),CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1M,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|SS14b,QCSC-v1|11.2,SWIFT-CSCv1|2.2"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "9.9 Ensure that 'HTTP Version' is the latest, if used to run the web app"
      info        : "Periodically, newer versions are released for HTTP either due to security flaws or to include additional functionality. Using the latest HTTP version for web apps to take advantage of security fixes, if any, and/or new functionalities of the newer version.

    Rationale:

    Newer versions may contain security enhancements and additional functionality. Using the latest version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected.

    HTTP 2.0 has additional performance improvements on the head-of-line blocking problem of old HTTP version, header compression, and prioritization of requests. HTTP 2.0 no longer supports HTTP 1.1's chunked transfer encoding mechanism, as it provides its own, more efficient, mechanisms for data streaming."
      solution    : "From Azure Console

    Login to Azure Portal using https://portal.azure.com

    Go to App Services

    Click on each App

    Under Setting section, Click on Configuration

    Set HTTP version to 2.0 under General settings

    NOTE: Most modern browsers support HTTP 2.0 protocol over TLS only, while non-encrypted traffic continues to use HTTP 1.1. To ensure that client browsers connect to your app with HTTP/2, either buy an App Service Certificate for your app's custom domain or bind a third party certificate.
    Using Azure Command Line Interface
    To set HTTP 2.0 version for an existing app, run the following command:

    az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --http20-enabled true"
      reference   : "800-171|3.14.1,800-53|SI-2c.,CIS_Recommendation|9.9,CN-L3|8.1.4.4(e),CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1M,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|SS14b,QCSC-v1|11.2,SWIFT-CSCv1|2.2"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>

    <report type:"PASSED">
      description : "9.10 Ensure FTP deployments are disabled"
      info        : "By default, Azure Functions, Web and API Services can be deployed over FTP. If FTP is required for an essential deployment workflow, FTPS should be required for FTP login for all App Service Apps and Functions.

    Rationale:

    Azure FTP deployment endpoints are public. An attacker listening to traffic on a wifi network used by a remote employee or a corporate network could see login traffic in clear-text which would then grant them full control of the code base of the app or service. This finding is more severe if User Credentials for deployment are set at the subscription level rather than using the default Application Credentials which are unique per App.

    Impact:

    Any deployment workflows that rely on FTP or FTPs rather than the WebDeploy or HTTPs endpoints may be affected."
      solution    : "From Azure Console

    Go to the Azure Portal

    Select App Services

    Click on an App

    Select Settings > Configuration

    Under Platform Settings, FTP state should be Disabled
    or FTPS Only

    Default Value:

    Enabled"
      reference   : "800-171|3.5.2,800-53|IA-5.,CIS_Recommendation|9.10,CSCv7|14.4,CSCv7|16.5,CSF|PR.AC-1,ITSG-33|IA-5,LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
      see_also    : "https://workbench.cisecurity.org/files/3131"
    </report>
  </else>
</if>

</check_type>
