#
# This script is Copyright (C) 2004-2021 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.0 $
# $Date: 2021/07/12 $
#
# description : This document implements the security configuration as recommended by the
#               CIS Amazon Web Services Foundations Benchmark
#
#<ui_metadata>
#<display_name>CIS Amazon Web Services Foundations L1 1.4.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>CIS Amazon Web Services Foundations L1</name>
#  <version>1.4.0</version>
#  <link>https://workbench.cisecurity.org/files/3416</link>
#</spec>
#<labels>amazon_aws,amazon,aws,security,cis</labels>
#<benchmark_refs>LEVEL,CSCv6,CSCv7,CCE,CIS_Recommendation</benchmark_refs>
#<variables>
#  <variable>
#    <name>INACTIVE_ACCOUNT_DAYS</name>
#    <default>45</default>
#    <description>Days without Account activity</description>
#    <info>Inactive Days</info>
#  </variable>
#  <variable>
#    <name>ALARM_ARN</name>
#    <default>arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark</default>
#    <description>4.x - SNS subscription ARN</description>
#    <info>The SNS TopicARN used by the Metric Filter Alarms</info>
#  </variable>
#  <variable>
#    <name>API_METRIC_NAME</name>
#    <default>UnauthorizedAPICalls</default>
#    <description>4.1 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>MFA_METRIC_NAME</name>
#    <default>ManagementConsoleLoginWithoutMFA</default>
#    <description>4.2 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>ROOT_METRIC_NAME</name>
#    <default>RootAccountUsage</default>
#    <description>4.3 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>IAM_METRIC_NAME</name>
#    <default>IAMPolicyChanges</default>
#    <description>4.4 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>CLOUDTRAIL_METRIC_NAME</name>
#    <default>CloudTrailConfigChanges</default>
#    <description>4.5 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>S3_METRIC_NAME</name>
#    <default>S3BucketPolicyChanges</default>
#    <description>4.8 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>GATEWAY_METRIC_NAME</name>
#    <default>NetworkGatewayChanges</default>
#    <description>4.12 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>ROUTE_TABLE_METRIC_NAME</name>
#    <default>RouteTableChanges</default>
#    <description>4.13 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>VPC_METRIC_NAME</name>
#    <default>VPCChanges</default>
#    <description>4.14 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>ORG_METRIC_NAME</name>
#    <default>OrgChanges</default>
#    <description>4.15 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>S3_BUCKET_NAME</name>
#    <default>S3_BUCKET_NAME</default>
#    <description>Your S3 Amazon bucket name.</description>
#    <info>2.1.3 - S3 Bucket Name</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"amazon_aws">

<report type:"WARNING">
  description : "1.1 Maintain current contact details"
  info        : "Ensure contact email and telephone details for AWS accounts are current and map to more than one individual in your organization.

An AWS account supports a number of contact details, and AWS will use these to contact the account owner if activity judged to be in breach of Acceptable Use Policy or indicative of likely security compromise is observed by the AWS Abuse team. Contact details should not be for a single individual, as circumstances may arise where that individual is unavailable. Email contact details should point to a mail alias which forwards email to multiple individuals within the organization; where feasible, phone contact details should point to a PABX hunt group or other call-forwarding system.

Rationale:

If an AWS account is observed to be behaving in a prohibited or suspicious manner, AWS will attempt to contact the account owner by email and phone using the contact details listed. If this is unsuccessful and the account behavior needs urgent mitigation, proactive measures may be taken, including throttling of traffic between the account exhibiting suspicious behavior and the AWS API endpoints and the Internet. This will result in impaired service to and from the account in question, so it is in both the customers' and AWS' best interests that prompt contact can be established. This is best achieved by setting AWS account contact details to point to resources which have multiple individuals as recipients, such as email aliases and PABX hunt groups.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "This activity can only be performed via the AWS Console, with a user who has permission to read and write Billing information (aws-portal:*Billing ).

Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.

On the navigation bar, choose your account name, and then choose My Account.

On the Account Settings page, next to Account Settings, choose Edit.

Next to the field that you need to update, choose Edit.

After you have entered your changes, choose Save changes.

After you have made your changes, choose Done.

To edit your contact information, under Contact Information, choose Edit.

For the fields that you want to change, type your updated information, and then choose Update."
  reference   : "800-53|IR-8,CIS_Recommendation|1.1,CSCv6|6.3,CSCv7|19.3,CSCv8|17.2,LEVEL|1M"
  see_also    : "https://workbench.cisecurity.org/files/3416"
</report>

<report type:"WARNING">
  description : "1.2 Ensure security contact information is registered"
  info        : "AWS provides customers with the option of specifying the contact information for account's security team. It is recommended that this information be provided.

Rationale:

Specifying security-specific contact information will help ensure that security advisories sent by AWS reach the team in your organization that is best equipped to respond to them.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the following to establish security contact information:
From Console:

Click on your account name at the top right corner of the console.

From the drop-down menu Click My Account

Scroll down to the Alternate Contacts section

Enter contact information in the Security section

Note: Consider specifying an internal email distribution list to ensure emails are regularly monitored by more than one individual."
  reference   : "800-53|IR-8,CCE|CCE-79200-2,CIS_Recommendation|1.2,CSCv6|19,CSCv7|19,CSCv7|19.2,CSCv8|17.2,CSCv8|17.6,LEVEL|1M"
  see_also    : "https://workbench.cisecurity.org/files/3416"
</report>

<report type:"WARNING">
  description : "1.3 Ensure security questions are registered in the AWS account"
  info        : "The AWS support portal allows account owners to establish security questions that can be used to authenticate individuals calling AWS customer service for support. It is recommended that security questions be established.

Rationale:

When creating a new AWS account, a default super user is automatically created. This account is referred to as the 'root user' or 'root' account. It is recommended that the use of this account be limited and highly controlled. During events in which the 'root' password is no longer accessible or the MFA token associated with 'root' is lost/destroyed it is possible, through authentication using secret questions and associated answers, to recover 'root' user login access.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Console:

Login to the AWS Account as the 'root' user

Click on the <Root_Account_Name> from the top right of the console

From the drop-down menu Click My Account

Scroll down to the Configure Security Questions section

Click on Edit

Click on each Question

From the drop-down select an appropriate question

Click on the Answer section

Enter an appropriate answer

Follow process for all 3 questions

Click Update when complete

Place Questions and Answers and place in a secure physical location"
  reference   : "800-53|AC-2,CIS_Recommendation|1.3,CSCv6|16,CSCv7|16,CSCv8|17.2,LEVEL|1M"
  see_also    : "https://workbench.cisecurity.org/files/3416"
</report>

<custom_item>
  type        : IAM
  description : "1.4 Ensure no 'root' user account access key exists - 'Access Key 1'"
  info        : "The 'root' user account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the 'root' user account be removed.

Rationale:

Removing access keys associated with the 'root' user account limits vectors by which the account can be compromised. Additionally, removing the 'root' access keys encourages the creation and use of role based accounts that are least privileged."
  solution    : "Perform the following to delete or disable active 'root' user access keys
From Console:

Sign in to the AWS Management Console as 'root' and open the IAM console at https://console.aws.amazon.com/iam/.

Click on <Root_Account_Name> at the top right and select My Security Credentials from the drop down list

On the pop out screen Click on Continue to Security Credentials

Click on Access Keys (Access Key ID and Secret Access Key)

Under the Status column if there are any Keys which are Active

Click on Make Inactive - (Temporarily disable Key - may be needed again)

Click Delete - (Deleted keys cannot be recovered)"
  reference   : "800-171|3.1.5,800-53|AC-6.,CCE|CCE-78910-7,CIS_Recommendation|1.4,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|4.3,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:user = '[root_account]']\">
      <xsl:for-each select=\"//iam:Member[iam:user = '[root_account]']\">
        <xsl:text>[root_account] : Access Key 1 Active = </xsl:text><xsl:value-of select=\"iam:access_key_1_active\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>[root_account] : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "\[root_account\] :"
  expect      : "\[root_account\] : Access Key 1 Active = false"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.4 Ensure no 'root' user account access key exists - 'Access Key 2'"
  info        : "The 'root' user account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the 'root' user account be removed.

Rationale:

Removing access keys associated with the 'root' user account limits vectors by which the account can be compromised. Additionally, removing the 'root' access keys encourages the creation and use of role based accounts that are least privileged."
  solution    : "Perform the following to delete or disable active 'root' user access keys
From Console:

Sign in to the AWS Management Console as 'root' and open the IAM console at https://console.aws.amazon.com/iam/.

Click on <Root_Account_Name> at the top right and select My Security Credentials from the drop down list

On the pop out screen Click on Continue to Security Credentials

Click on Access Keys (Access Key ID and Secret Access Key)

Under the Status column if there are any Keys which are Active

Click on Make Inactive - (Temporarily disable Key - may be needed again)

Click Delete - (Deleted keys cannot be recovered)"
  reference   : "800-171|3.1.5,800-53|AC-6.,CCE|CCE-78910-7,CIS_Recommendation|1.4,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|4.3,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:user = '[root_account]']\">
      <xsl:for-each select=\"//iam:Member[iam:user = '[root_account]']\">
        <xsl:text>[root_account] : Access Key 2 Active = </xsl:text><xsl:value-of select=\"iam:access_key_2_active\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>[root_account] : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "\[root_account\] :"
  expect      : "\[root_account\] : Access Key 2 Active = false"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.5 Ensure MFA is enabled for the 'root' user account"
  info        : "The 'root' user account is the most privileged user in an AWS account. Multi-factor Authentication (MFA) adds an extra layer of protection on top of a username and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their username and password as well as for an authentication code from their AWS MFA device.

Note: When virtual MFA is used for 'root' accounts, it is recommended that the device used is NOT a personal device, but rather a dedicated mobile device (tablet or phone) that is managed to be kept charged and secured independent of any individual personal devices. ('non-personal virtual MFA') This lessens the risks of losing access to the MFA due to device loss, device trade-in or if the individual owning the device is no longer employed at the company.

Rationale:

Enabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential."
  solution    : "Perform the following to establish MFA for the 'root' user account:

Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.

Note: to manage MFA devices for the 'root' AWS account, you must use your 'root' account credentials to sign in to AWS. You cannot manage MFA devices for the 'root' account using other credentials.

Choose Dashboard , and under Security Status , expand Activate MFA on your root account.

Choose Activate MFA

In the wizard, choose A virtual MFA device and then choose Next Step .

IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.

Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see Virtual MFA Applications.) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).

Determine whether the MFA app supports QR codes, and then do one of the following:

Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.

In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.

When you are finished, the virtual MFA device starts generating one-time passwords.
In the Manage MFA Device wizard, in the Authentication Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Active Virtual MFA."
  reference   : "800-171|3.5.2,800-53|IA-5(11),CCE|CCE-78911-5,CIS_Recommendation|1.5,CN-L3|7.1.3.1(f),CSCv7|4.5,CSF|PR.AC-1,ITSG-33|IA-5,LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.2,SWIFT-CSCv1|5.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "GetAccountSummary"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:SummaryMap/iam:entry[iam:key = 'AccountMFAEnabled']/iam:value\">
      <xsl:for-each select=\"//iam:SummaryMap/iam:entry[iam:key = 'AccountMFAEnabled']\">
        <xsl:text>AccountMFAEnabled : </xsl:text><xsl:value-of select=\"iam:value\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>AccountMFAEnabled : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "AccountMFAEnabled :"
  expect      : "AccountMFAEnabled : 1$"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.7 Eliminate use of the 'root' user for administrative and daily tasks"
  info        : "With the creation of an AWS account, a 'root user' is created that cannot be disabled or deleted. That user has unrestricted access to and control over all resources in the AWS account. It is highly recommended that the use of this account be avoided for everyday tasks.

Rationale:

The 'root user' has unrestricted access to and control over all account resources. Use of it is inconsistent with the principles of least privilege and separation of duties, and can lead to unnecessary harm due to error or account compromise.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "If you find that the 'root' user account is being used for daily activity to include administrative tasks that do not require the 'root' user:

Change the 'root' user password.

Deactivate or delete any access keys associate with the 'root' user.

**Remember, anyone who has 'root' user credentials for your AWS account has unrestricted access to and control of all the resources in your account, including billing information."
  reference   : "800-171|3.12.3,800-53|CA-7.,CIS_Recommendation|1.7,CSCv7|4.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-2,CSF|DE.CM-3,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-1,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.IP-7,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,CSF|RS.MI-3,ITSG-33|CA-7,LEVEL|1A,NESA|M1.2.2,NESA|M5.3.1,NESA|M5.4.1,NESA|M6.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:user = '[root_account]']\">
      <xsl:for-each select=\"//iam:Member[iam:user = '[root_account]']\">
        <xsl:text>[root_account] :&#10;</xsl:text>
        <xsl:text>    Password Last Used Date = </xsl:text><xsl:value-of select=\"iam:password_last_used\"/><xsl:text>&#10;</xsl:text>
        <xsl:text>    Access Key 1 Last Used Date = </xsl:text><xsl:value-of select=\"iam:access_key_1_last_used_date\"/><xsl:text>&#10;</xsl:text>
        <xsl:text>    Access Key 2 Last Used Date = </xsl:text><xsl:value-of select=\"iam:access_key_2_last_used_date\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>[root_account] : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : ".+"
  expect      : "[root_account] : Not Found"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : IAM
  description : "1.8 Ensure IAM password policy requires minimum length of 14 or greater"
  info        : "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are at least a given length. It is recommended that the password policy require a minimum password length 14.

Rationale:

Setting a password complexity policy increases account resiliency against brute force login attempts."
  solution    : "Perform the following to set the password policy as prescribed:
From Console:

Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)

Go to IAM Service on the AWS Console

Click on Account Settings on the Left Pane

Set 'Minimum password length' to 14 or greater.

Click 'Apply password policy'

From Command Line:

 aws iam update-account-password-policy --minimum-password-length 14

Note: All commands starting with 'aws iam update-account-password-policy' can be combined into a single command."
  reference   : "800-171|3.5.7,800-53|IA-5(1)(a),CCE|CCE-78907-3,CIS_Recommendation|1.8,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv6|16,CSCv7|16,CSF|PR.AC-1,ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1)(a),LEVEL|1A,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "GetAccountPasswordPolicy"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:for-each select=\"//iam:GetAccountPasswordPolicyResult/iam:PasswordPolicy\">
    <xsl:choose>
      <xsl:when test=\"iam:MinimumPasswordLength\">
        MinimumPasswordLength : <xsl:value-of select=\"iam:MinimumPasswordLength\"/><xsl:text>&#10;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>MinimumPasswordLength : Not Found</xsl:text><xsl:text>&#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>
</xsl:template>"
  regex       : "MinimumPasswordLength :"
  expect      : "MinimumPasswordLength : (1[4-9]|[2-9][0-9]|1[01][0-9]|12[0-8])$"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.9 Ensure IAM password policy prevents password reuse"
  info        : "IAM password policies can prevent the reuse of a given password by the same user. It is recommended that the password policy prevent the reuse of passwords.

Rationale:

Preventing password reuse increases account resiliency against brute force login attempts."
  solution    : "Perform the following to set the password policy as prescribed:
From Console:

Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)

Go to IAM Service on the AWS Console

Click on Account Settings on the Left Pane

Check 'Prevent password reuse'

Set 'Number of passwords to remember' is set to 24

From Command Line:

 aws iam update-account-password-policy --password-reuse-prevention 24

Note: All commands starting with 'aws iam update-account-password-policy' can be combined into a single command."
  reference   : "800-171|3.5.8,800-53|IA-5(1)(e),CCE|CCE-78908-1,CIS_Recommendation|1.9,CSCv6|4.4,CSCv7|4.4,CSF|PR.AC-1,ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1)(e),LEVEL|1A,NESA|T5.2.3,NIAv2|AM22c,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.3"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "GetAccountPasswordPolicy"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:for-each select=\"//iam:GetAccountPasswordPolicyResult/iam:PasswordPolicy\">
    <xsl:choose>
      <xsl:when test=\"iam:PasswordReusePrevention\">
        PasswordReusePrevention : <xsl:value-of select=\"iam:PasswordReusePrevention\"/><xsl:text>&#10;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>PasswordReusePrevention : Not Found</xsl:text><xsl:text>&#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>
</xsl:template>"
  regex       : "PasswordReusePrevention :"
  expect      : "PasswordReusePrevention : (2[4-9]|[3-9][0-9])$"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.10 Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password"
  info        : "Multi-Factor Authentication (MFA) adds an extra layer of authentication assurance beyond traditional credentials. With MFA enabled, when a user signs in to the AWS Console, they will be prompted for their user name and password as well as for an authentication code from their physical or virtual MFA token. It is recommended that MFA be enabled for all accounts that have a console password.

Rationale:

Enabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that displays a time-sensitive key and have knowledge of a credential.

Impact:

AWS will soon end support for SMS multi-factor authentication (MFA). New customers are not allowed to use this feature. We recommend that existing customers switch to one of the following alternative methods of MFA."
  solution    : "Perform the following to enable MFA:
From Console:

Sign in to the AWS Management Console and open the IAM console at 'https://console.aws.amazon.com/iam/'

In the left pane, select Users.

In the User Name list, choose the name of the intended MFA user.

Choose the Security Credentials tab, and then choose Manage MFA Device.

In the Manage MFA Device wizard, choose Virtual MFA device, and then choose Continue.

IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.

Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see Virtual MFA Applications at https://aws.amazon.com/iam/details/mfa/#Virtual_MFA_Applications). If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).

Determine whether the MFA app supports QR codes, and then do one of the following:

Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.

In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.

When you are finished, the virtual MFA device starts generating one-time passwords.

In the Manage MFA Device wizard, in the MFA Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the MFA Code 2 box.

Click Assign MFA."
  reference   : "800-171|3.5.2,800-53|IA-5(11),CCE|CCE-78901-6,CIS_Recommendation|1.10,CN-L3|7.1.3.1(f),CSCv6|4.5,CSCv7|4.5,CSF|PR.AC-1,ITSG-33|IA-5,LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.2,SWIFT-CSCv1|5.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:mfa_active = 'false' and iam:password_enabled = 'true']\">
      <xsl:for-each select=\"//iam:Member[iam:mfa_active = 'false' and iam:password_enabled = 'true']\">
          <xsl:text>Console user </xsl:text><xsl:value-of select=\"iam:user\"/><xsl:text> does not have MFA enabled&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>All console users have MFA enabled.&#10;</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : ".+"
  expect      : "All console users have MFA enabled."
</custom_item>

<custom_item>
  type        : IAM
  description : "1.11 Do not setup access keys during initial user setup for all IAM users that have a console password"
  info        : "AWS console defaults to no check boxes selected when creating a new IAM user. When cerating the IAM User credentials you have to determine what type of access they require.

Programmatic access: The IAM user might need to make API calls, use the AWS CLI, or use the Tools for Windows PowerShell. In that case, create an access key (access key ID and a secret access key) for that user.

AWS Management Console access: If the user needs to access the AWS Management Console, create a password for the user.

Rationale:

Requiring the additional steps be taken by the user for programmatic access after their profile has been created will give a stronger indication of intent that access keys are [a] necessary for their work and [b] once the access key is established on an account that the keys may be in use somewhere in the organization.

Note: Even if it is known the user will need access keys, require them to create the keys themselves or put in a support ticket to have them created as a separate step from user creation."
  solution    : "Perform the following to delete access keys that do not pass the audit:
From Console:

Login to the AWS Management Console:

Click Services

Click IAM

Click on Users

Click on Security Credentials

As an Administrator

Click on the X (Delete) for keys that were created at the same time as the user profile but have not been used.

As an IAM User

Click on the X (Delete) for keys that were created at the same time as the user profile but have not been used.

From Command Line:

aws iam delete-access-key --access-key-id <access-key-id-listed> --user-name <users-name>"
  reference   : "800-171|3.5.2,800-53|IA-5.,CIS_Recommendation|1.11,CSCv6|16,CSCv7|16,CSF|PR.AC-1,ITSG-33|IA-5,LEVEL|1M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:password_enabled != 'false' and ((iam:access_key_1_active = 'true' and iam:access_key_1_last_used_date = 'N/A') or (iam:access_key_2_active = 'true' and iam:access_key_2_last_used_date = 'N/A'))] \">
      <xsl:for-each select=\"//iam:Member[iam:password_enabled != 'false' and iam:access_key_1_active = 'true' and iam:access_key_1_last_used_date = 'N/A']\">
        <xsl:value-of select=\"iam:user\"/><xsl:text> : Access Key 1 Last Used Date = </xsl:text><xsl:value-of select=\"iam:access_key_1_last_used_date\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
      <xsl:for-each select=\"//iam:Member[iam:password_enabled = 'true' and iam:access_key_2_active = 'true' and iam:access_key_2_last_used_date = 'N/A']\">
        <xsl:value-of select=\"iam:user\"/><xsl:text> : Access Key 2 Last Used Date = </xsl:text><xsl:value-of select=\"iam:access_key_2_last_used_date\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>No Users with Password Enabled and Key Last Used Date set to N/A</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : ".+"
  expect      : "No Users with Password Enabled and Key Last Used Date set to N/A"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.12 Ensure credentials unused for 45 days or greater are disabled"
  info        : "AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 45 or greater days be deactivated or removed.

Rationale:

Disabling or removing unnecessary credentials will reduce the window of opportunity for credentials associated with a compromised or abandoned account to be used."
  solution    : "From Console:
Perform the following to manage Unused Password (IAM user console access)

Login to the AWS Management Console:

Click Services

Click IAM

Click on Users

Click on Security Credentials

Select user whose Console last sign-in is greater than 45 days

Click Security credentials

In section Sign-in credentials, Console password click Manage

Under Console Access select Disable
10.Click Apply

Perform the following to deactivate Access Keys:

Login to the AWS Management Console:

Click Services

Click IAM

Click on Users

Click on Security Credentials

Select any access keys that are over 45 days old and that have been used and

Click on Make Inactive

Select any access keys that are over 45 days old and that have not been used and

Click the X to Delete"
  reference   : "800-171|3.1.1,800-53|AC-2(3),CCE|CCE-78900-8,CIS_Recommendation|1.12,CN-L3|7.1.3.2(e),CN-L3|8.1.4.2(c),CSCv7|16.9,CSF|PR.AC-1,CSF|PR.AC-4,ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.9.2.6,ITSG-33|AC-2(3),LEVEL|1A,NIAv2|AM26,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,TBA-FIISB|36.2.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  name        : INACTIVE_USERS_AUDIT_STRICT
# Note: Variable @INACTIVE_ACCOUNT_DAYS@ replaced with "45" in field "days".
  days        : "45"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.13 Ensure there is only one active access key available for any single IAM user"
  info        : "Access keys are long-term credentials for an IAM user or the AWS account 'root' user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API (directly or using the AWS SDK)

Rationale:

Access keys are long-term credentials for an IAM user or the AWS account 'root' user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API. One of the best ways to protect your account is to not allow users to have multiple access keys."
  solution    : "From Console:

Sign in to the AWS Management Console and navigate to IAM dashboard at https://console.aws.amazon.com/iam/.

In the left navigation panel, choose Users.

Click on the IAM user name that you want to examine.

On the IAM user configuration page, select Security Credentials tab.

In Access Keys section, choose one access key that is less than 90 days old. This should be the only active key used by this IAM user to access AWS resources programmatically. Test your application(s) to make sure that the chosen access key is working.

In the same Access Keys section, identify your non-operational access keys (other than the chosen one) and deactivate it by clicking the Make Inactive link.

If you receive the Change Key Status confirmation box, click Deactivate to switch off the selected key.

Repeat steps no. 3 - 7 for each IAM user in your AWS account.

From Command Line:

Using the IAM user and access key information provided in the Audit CLI, choose one access key that is less than 90 days old. This should be the only active key used by this IAM user to access AWS resources programmatically. Test your application(s) to make sure that the chosen access key is working.

Run the update-access-key command below using the IAM user name and the non-operational access key IDs to deactivate the unnecessary key(s). Refer to the Audit section to identify the unnecessary access key ID for the selected IAM user

Note - the command does not return any output:

aws iam update-access-key --access-key-id <access-key-id> --status Inactive --user-name <user-name>

To confirm that the selected access key pair has been successfully deactivated run the list-access-keys audit command again for that IAM User:

aws iam list-access-keys --user-name <user-name>

The command output should expose the metadata for each access key associated with the IAM user. If the non-operational key pair(s) Status is set to Inactive, the key has been successfully deactivated and the IAM user access configuration adheres now to this recommendation.

Repeat steps no. 1 - 3 for each IAM user in your AWS account."
  reference   : "800-171|3.5.5,800-171|3.5.6,800-53|IA-4b.,CIS_Recommendation|1.13,CN-L3|7.1.2.7(b),CSCv7|4,CSF|PR.AC-1,ITSG-33|IA-4b.,LEVEL|1A,NESA|T5.5.2,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|5"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:access_key_1_active = 'true' and iam:access_key_2_active = 'true']\">
      <xsl:for-each select=\"//iam:Member[iam:access_key_1_active = 'true' and iam:access_key_2_active = 'true']\">
        <xsl:value-of select=\"iam:user\"/><xsl:text> : Multiple access keys active&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>No users with multiple access keys active&#10;</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  not_expect  : ".+ : Multiple access keys active"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.14 Ensure access keys are rotated every 90 days or less"
  info        : "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.

Rationale:

Rotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used.

Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Perform the following to rotate access keys:
From Console:

Go to Management Console (https://console.aws.amazon.com/iam)

Click on Users

Click on Security Credentials

As an Administrator

Click on Make Inactive for keys that have not been rotated in 90 Days

As an IAM User

Click on Make Inactive or Delete for keys which have not been rotated or used in 90 Days

Click on '' Create Access Key

Update programmatic call with new Access Key credentials

From Command Line:

While the first access key is still active, create a second access key, which is active by default. Run the following command:

aws iam create-access-key

At this point, the user has two active access keys.

Update all applications and tools to use the new access key.

Determine whether the first access key is still in use by using this command:

aws iam get-access-key-last-used

One approach is to wait several days and then check the old access key for any use before proceeding.

Even if step Step 3 indicates no use of the old key, it is recommended that you do not immediately delete the first access key. Instead, change the state of the first access key to Inactive using this command:

aws iam update-access-key

Use only the new access key to confirm that your applications are working. Any applications and tools that still use the original access key will stop working at this point because they no longer have access to AWS resources. If you find such an application or tool, you can switch its state back to Active to reenable the first access key. Then return to step Step 2 and update this application to use the new key.

After you wait some period of time to ensure that all applications and tools have been updated, you can delete the first access key with this command:

aws iam delete-access-key"
  reference   : "800-171|3.5.2,800-53|IA-5.,CCE|CCE-78902-4,CIS_Recommendation|1.14,CSCv6|16,CSCv7|16,CSF|PR.AC-1,ITSG-33|IA-5,LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:access_key_1_active = 'true' or iam:access_key_2_active = 'true']\">
      <xsl:for-each select=\"//iam:Member[iam:access_key_1_active = 'true' or iam:access_key_2_active = 'true']\">
        <xsl:choose>
          <xsl:when test=\"//iam:Member[iam:access_key_1_active = 'true']\">
            <xsl:value-of select=\"iam:user\"/><xsl:text> : Access Key 1 Last Rotated = </xsl:text><xsl:value-of select=\"iam:access_key_1_last_rotated\"/><xsl:text>&#10;</xsl:text>
          </xsl:when>
        </xsl:choose>
        <xsl:choose>
          <xsl:when test=\"//iam:Member[iam:access_key_2_active = 'true']\">
            <xsl:value-of select=\"iam:user\"/><xsl:text> : Access Key 2 Last Rotated = </xsl:text><xsl:value-of select=\"iam:access_key_2_last_rotated\"/><xsl:text>&#10;</xsl:text>
          </xsl:when>
        </xsl:choose>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>No Accounts With Access Keys</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : ".*"
  expect      : "No Accounts With Access Keys"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : IAM
  description : "1.15 Ensure IAM Users Receive Permissions Only Through Groups"
  info        : "IAM users are granted access to services, functions, and data through IAM policies. There are three ways to define policies for a user: 1) Edit the user policy directly, aka an inline, or user, policy; 2) attach a policy directly to a user; 3) add the user to an IAM group that has an attached policy.

Only the third implementation is recommended.

Rationale:

Assigning IAM policy only through groups unifies permissions management to a single, flexible layer consistent with organizational functional roles. By unifying permissions management, the likelihood of excessive permissions is reduced."
  solution    : "Perform the following to create an IAM group and assign a policy to it:

Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.

In the navigation pane, click Groups and then click Create New Group .

In the Group Name box, type the name of the group and then click Next Step .

In the list of policies, select the check box for each policy that you want to apply to all members of the group. Then click Next Step .

Click Create Group

Perform the following to add a user to a given group:

Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.

In the navigation pane, click Groups

Select the group to add a user to

Click Add Users To Group

Select the users to be added to the group

Click Add Users

Perform the following to remove a direct association between a user and policy:

Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.

In the left navigation pane, click on Users

For each user:

Select the user

Click on the Permissions tab

Expand Permissions policies

Click X for each policy; then click Detach or Remove (depending on policy type)"
  reference   : "800-171|3.1.1,800-53|AC-3.,CCE|CCE-78912-3,CIS_Recommendation|1.15,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|16,CSCv7|16,CSF|PR.AC-4,CSF|PR.PT-3,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|1A,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "ListUserPolicies"
  xsl_stmt    : "<xsl:template match=\"/iam:ListUserPoliciesResponse\">
  <xsl:for-each select=\"iam:ListUserPoliciesResult\">
    <xsl:choose>
      <xsl:when test=\"iam:PolicyNames/iam:member\">
        <xsl:value-of select=\"iam:UserName\"/><xsl:text> has inline policy </xsl:text><xsl:value-of select=\"iam:PolicyNames/iam:member\" /><xsl:text>&#10;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select=\"iam:UserName\"/><xsl:text> has no inline policies&#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>
</xsl:template>"
  not_expect  : ".* has inline policy"
</custom_item>

<custom_item>
  type           : IAM
  description    : "1.16 Ensure IAM policies that allow full '*:*' administrative privileges are not attached - *:* administrative privileges are not attached"
  info           : "IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant least privilege -that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform only those tasks, instead of allowing full administrative privileges.

Rationale:

It's more secure to start with a minimum set of permissions and grant additional permissions as necessary, rather than starting with permissions that are too lenient and then trying to tighten them later.

Providing full administrative privileges instead of restricting to the minimum set of permissions that the user is required to do exposes the resources to potentially unwanted actions.

IAM policies that have a statement with 'Effect': 'Allow' with 'Action': '*' over 'Resource': '*' should be removed."
  solution       : "From Console:
Perform the following to detach the policy that has full administrative privileges:

Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.

In the navigation pane, click Policies and then search for the policy name found in the audit step.

Select the policy that needs to be deleted.

In the policy action menu, select first Detach

Select all Users, Groups, Roles that have this policy attached

Click Detach Policy

In the policy action menu, select Detach

From Command Line:
Perform the following to detach the policy that has full administrative privileges as found in the audit step:

Lists all IAM users, groups, and roles that the specified managed policy is attached to.

  aws iam list-entities-for-policy --policy-arn <policy_arn>

Detach the policy from all IAM Users:

  aws iam detach-user-policy --user-name <iam_user> --policy-arn <policy_arn>

Detach the policy from all IAM Groups:

  aws iam detach-group-policy --group-name <iam_group> --policy-arn <policy_arn>

Detach the policy from all IAM Roles:

  aws iam detach-role-policy --role-name <iam_role> --policy-arn <policy_arn>"
  reference      : "800-171|3.1.5,800-53|AC-6.,CCE|CCE-78912-3,CIS_Recommendation|1.16,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|4,CSCv7|4,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also       : "https://workbench.cisecurity.org/files/3416"
  aws_action     : "GetPolicyVersion"
  json_transform : '.[] | if ((.Document.Statement[].Effect? == "Allow") and (.Document.Statement[].Resource | .. == "*")  and (.Document.Statement[].Action | .. == "*")) then "full admin privileges allowed on " + .PolicyArn else "" end'
  not_expect     : "full admin privileges allowed on ."
</custom_item>

<custom_item>
  type        : IAM
  description : "1.17 Ensure a support role has been created to manage incidents with AWS Support"
  info        : "AWS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support.

Rationale:

By implementing least privilege for access control, an IAM Role will require an appropriate IAM Policy to allow Support Center Access in order to manage Incidents with AWS Support.

Impact:

All AWS Support plans include an unlimited number of account and billing support cases, with no long-term contracts. Support billing calculations are performed on a per-account basis for all plans. Enterprise Support plan customers have the option to include multiple enabled accounts in an aggregated monthly billing calculation. Monthly charges for the Business and Enterprise support plans are based on each month's AWS usage charges, subject to a monthly minimum, billed in advance."
  solution    : "From Command Line:

Create an IAM role for managing incidents with AWS:

Create a trust relationship policy document that allows <iam_user> to manage AWS incidents, and save it locally as /tmp/TrustPolicy.json:

      {
        'Version': '2012-10-17',
        'Statement': [
          {
            'Effect': 'Allow',
            'Principal': {
              'AWS': '<iam_user>'
            },
            'Action': 'sts:AssumeRole'
          }
        ]
      }

Create the IAM role using the above trust policy:

aws iam create-role --role-name <aws_support_iam_role> --assume-role-policy-document file:///tmp/TrustPolicy.json

Attach 'AWSSupportAccess' managed policy to the created IAM role:

aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSSupportAccess --role-name <aws_support_iam_role>"
  reference   : "800-171|3.1.5,800-53|AC-6(1),CIS_Recommendation|1.17,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|14,CSF|PR.AC-4,ISO/IEC-27001|A.9.4.4,ITSG-33|AC-6(1),LEVEL|1A,NESA|T5.1.1,NESA|T5.4.4,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM31,NIAv2|GS3,NIAv2|GS4,NIAv2|GS8c,NIAv2|VL3b,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "ListEntitiesForPolicy"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:ListEntitiesForPolicyResult/iam:PolicyRoles/iam:member\">
      <xsl:text>Pass - member is found under PolicyRoles</xsl:text>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>Fail - member is not found under PolicyRoles</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "(Pass|Fail)"
  expect      : "Pass - member is found under PolicyRoles"
  policy_arn  : "arn:aws:iam::aws:policy/AWSSupportAccess"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.19 Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed"
  info        : "To enable HTTPS connections to your website or application in AWS, you need an SSL/TLS server certificate. You can use ACM or IAM to store and deploy server certificates. Use IAM as a certificate manager only when you must support HTTPS connections in a region that is not supported by ACM. IAM securely encrypts your private keys and stores the encrypted version in IAM SSL certificate storage. IAM supports deploying server certificates in all regions, but you must obtain your certificate from an external provider for use with AWS. You cannot upload an ACM certificate to IAM. Additionally, you cannot manage your certificates from the IAM Console.

Rationale:

Removing expired SSL/TLS certificates eliminates the risk that an invalid certificate will be deployed accidentally to a resource such as AWS Elastic Load Balancer (ELB), which can damage the credibility of the application/website behind the ELB. As a best practice, it is recommended to delete expired certificates.

Impact:

Deleting the certificate could have implications for your application If you are using a expired server certificate with Elastic Load Balancing, Cloudfront etc. . One has to make configurations at respective services to ensure there is no interruption in application.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "From Console:
Removing expired certificates via AWS Management Console is not currently supported. To delete SSL/TLS certificates stored in IAM via the AWS API use the Command Line Interface (CLI).
From Command Line:
To delete Expired Certificate run following command by replacing <CERTIFICATE_NAME> with the name of the certificate to delete:

aws iam delete-server-certificate --server-certificate-name <CERTIFICATE_NAME>

When the preceding command is successful, it does not return any output.

Default Value:

By default, expired certificates won't get deleted."
  reference   : "800-171|3.4.3,800-53|CM-3(6),CIS_Recommendation|1.19,CN-L3|8.1.10.6(g),CSCv7|13,CSF|PR.IP-1,CSF|PR.IP-3,ISO/IEC-27001|A.10.1.1,ITSG-33|CM-3,LEVEL|1A,NESA|T3.2.3,NESA|T3.3.2,NESA|T7.5.1,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|CM1,NIAv2|CM1a,NIAv2|CM1b,NIAv2|CM1c,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "ListServerCertificates"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:ListServerCertificatesResult/iam:ServerCertificateMetadataList/iam:member\">
      <xsl:text>Certificate Expiration:&#10;</xsl:text>
      <xsl:for-each select=\"//iam:ListServerCertificatesResult/iam:ServerCertificateMetadataList/iam:member\">
        <xsl:text>  </xsl:text>
        <xsl:value-of select=\"iam:ServerCertificateName\"/><xsl:text> : </xsl:text><xsl:value-of select=\"iam:Expiration\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>Server Certificates Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : ".+"
  expect      : "Server Certificates Not Found"
  severity    : MEDIUM
</custom_item>

<report type:"WARNING">
  description : "1.20 Ensure that IAM Access analyzer is enabled for all regions"
  info        : "Enable IAM Access analyzer for IAM policies about all resources in each region.

IAM Access Analyzer is a technology introduced at AWS reinvent 2019. After the Analyzer is enabled in IAM, scan results are displayed on the console showing the accessible resources. Scans show resources that other accounts and federated users can access, such as KMS keys and IAM roles. So the results allow you to determine if an unintended user is allowed, making it easier for administrators to monitor least privileges access. Access Analyzer analyzes only policies that are applied to resources in the same AWS Region.

Rationale:

AWS IAM Access Analyzer helps you identify the resources in your organization and accounts, such as Amazon S3 buckets or IAM roles, that are shared with an external entity. This lets you identify unintended access to your resources and data. Access Analyzer identifies resources that are shared with external principals by using logic-based reasoning to analyze the resource-based policies in your AWS environment. IAM Access Analyzer continuously monitors all policies for S3 bucket, IAM roles, KMS(Key Management Service) keys, AWS Lambda functions, and Amazon SQS(Simple Queue Service) queues.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Console:
Perform the following to enable IAM Access analyzer for IAM policies:

Open the IAM console at https://console.aws.amazon.com/iam/.

Choose Access analyzer.

Choose Create analyzer.

On the Create analyzer page, confirm that the Region displayed is the Region where you want to enable Access Analyzer.

Enter a name for the analyzer. Optional as it will generate a name for you automatically.

Add any tags that you want to apply to the analyzer. Optional.

Choose Create Analyzer.

Repeat these step for each active region

From Command Line:
Run the following command:

aws accessanalyzer create-analyzer --analyzer-name <NAME> --type <ACCOUNT|ORGANIZATION>

Repeat this command above for each active region.
Note: The IAM Access Analyzer is successfully configured only when the account you use has the necessary permissions."
  reference   : "CSCv7|14,CSCv7|14.6,CSCv8|3.3,LEVEL|1A,CIS_Recommendation|1.20,800-53|AC-3"
  see_also    : "https://workbench.cisecurity.org/files/3416"
</report>

<custom_item>
  type        : S3
  description : "2.1.3 Ensure MFA Delete is enable on S3 buckets - versioning status"
  info        : "Once MFA Delete is enabled on your sensitive and classified S3 bucket it requires the user to have two forms of authentication.

Rationale:

Adding MFA delete to an S3 bucket, requires additional authentication when you change the version state of your bucket or you delete and object version adding another layer of security in the event your security credentials are compromised or unauthorized access is granted.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the steps below to enable MFA delete on an S3 bucket.
Note:
-You cannot enable MFA Delete using the AWS Management Console. You must use the AWS CLI or API.
-You must use your 'root' account to enable MFA Delete on S3 buckets.
From Command line:

Run the s3api put-bucket-versioning command

aws s3api put-bucket-versioning --profile my-root-profile --bucket Bucket_Name --versioning-configuration Status=Enabled,MFADelete=Enabled --mfa 'arn:aws:iam::aws_account_id:mfa/root-account-mfa-device passcode'"
  reference   : "800-53|CP-10.,CIS_Recommendation|2.1.3,CSCv7|14.6,CSF|RC.RP-1,CSF|RS.RP-1,ITSG-33|CP-10,ITSG-33|CP-10a.,LEVEL|1A,NESA|T2.2.4,QCSC-v1|5.2.3,QCSC-v1|10.2.1,QCSC-v1|11.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "GetBucketVersioning"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:for-each select=\"//s3:VersioningConfiguration\">
  <xsl:choose>
  <xsl:when test=\"s3:Status\">
  <xsl:text>Versioning Status = </xsl:text><xsl:value-of select=\"s3:Status\"/><xsl:text>&#10;</xsl:text>
  </xsl:when>
  <xsl:otherwise>
  <xsl:text>Versioning Status = Not Found</xsl:text><xsl:text>&#10;</xsl:text>
  </xsl:otherwise>
  </xsl:choose>
  </xsl:for-each>
  </xsl:template>"
  regex       : "Versioning Status ="
  expect      : "Versioning Status = Enabled"
# Note: Variable @S3_BUCKET_NAME@ replaced with "S3_BUCKET_NAME" in field "bucket_name".
  bucket_name : "S3_BUCKET_NAME"
</custom_item>

<custom_item>
  type        : S3
  description : "2.1.3 Ensure MFA Delete is enable on S3 buckets - MfaDelete"
  info        : "Once MFA Delete is enabled on your sensitive and classified S3 bucket it requires the user to have two forms of authentication.

Rationale:

Adding MFA delete to an S3 bucket, requires additional authentication when you change the version state of your bucket or you delete and object version adding another layer of security in the event your security credentials are compromised or unauthorized access is granted.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the steps below to enable MFA delete on an S3 bucket.
Note:
-You cannot enable MFA Delete using the AWS Management Console. You must use the AWS CLI or API.
-You must use your 'root' account to enable MFA Delete on S3 buckets.
From Command line:

Run the s3api put-bucket-versioning command

aws s3api put-bucket-versioning --profile my-root-profile --bucket Bucket_Name --versioning-configuration Status=Enabled,MFADelete=Enabled --mfa 'arn:aws:iam::aws_account_id:mfa/root-account-mfa-device passcode'"
  reference   : "800-171|3.1.1,800-171|3.5.3,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3.,800-53|IA-2(1),800-53|MP-2.,CIS_Recommendation|2.1.3,CN-L3|7.1.2.7(b),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.PT-2,CSF|PR.PT-3,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|IA-2(1),ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.4.2,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|AM36,NIAv2|SS29,NIAv2|VL3c,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|1.2,TBA-FIISB|31.1,TBA-FIISB|35.1,TBA-FIISB|36.1"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "GetBucketVersioning"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:for-each select=\"//s3:VersioningConfiguration\">
  <xsl:choose>
  <xsl:when test=\"s3:MfaDelete\">
  <xsl:text>MfaDelete = </xsl:text><xsl:value-of select=\"s3:MfaDelete\"/><xsl:text>&#10;</xsl:text>
  </xsl:when>
  <xsl:otherwise>
  <xsl:text>MfaDelete = Not Found</xsl:text><xsl:text>&#10;</xsl:text>
  </xsl:otherwise>
  </xsl:choose>
  </xsl:for-each>
  </xsl:template>"
  regex       : "MfaDelete ="
  expect      : "MfaDelete = Enabled"
# Note: Variable @S3_BUCKET_NAME@ replaced with "S3_BUCKET_NAME" in field "bucket_name".
  bucket_name : "S3_BUCKET_NAME"
</custom_item>

<report type:"WARNING">
  description : "2.1.5 Ensure that S3 Buckets are configured with 'Block public access (bucket settings)'"
  info        : "Amazon S3 provides Block public access (bucket settings) and Block public access (account settings) to help you manage public access to Amazon S3 resources. By default, S3 buckets and objects are created with public access disabled. However, an IAM principal with sufficient S3 permissions can enable public access at the bucket and/or object level. While enabled, Block public access (bucket settings) prevents an individual bucket, and its contained objects, from becoming publicly accessible. Similarly, Block public access (account settings) prevents all buckets, and contained objects, from becoming publicly accessible across the entire account.

Rationale:

Amazon S3 Block public access (bucket settings) prevents the accidental or malicious public exposure of data contained within the respective bucket(s).

Amazon S3 Block public access (account settings) prevents the accidental or malicious public exposure of data contained within all buckets of the respective AWS account.

Whether blocking public access to all or some buckets is an organizational decision that should be based on data sensitivity, least privilege, and use case.

Impact:

When you apply Block Public Access settings to an account, the settings apply to all AWS Regions globally. The settings might not take effect in all Regions immediately or simultaneously, but they eventually propagate to all Regions.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "If utilizing Block Public Access (bucket settings)
From Console:

Login to AWS Management Console and open the Amazon S3 console using https://console.aws.amazon.com/s3/

Select the Check box next to the Bucket.

Click on 'Edit public access settings'.

Click 'Block all public access'

Repeat for all the buckets in your AWS account that contain sensitive data.

From Command Line:

List all of the S3 Buckets

aws s3 ls

Set the Block Public Access to true on that bucket

aws s3api put-public-access-block --bucket <name-of-bucket> --public-access-block-configuration 'BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true'

If utilizing Block Public Access (account settings)
From Console:
If the output reads true for the separate configuration settings then it is set on the account.

Login to AWS Management Console and open the Amazon S3 console using https://console.aws.amazon.com/s3/

Choose Block Public Access (account settings)

Choose Edit to change the block public access settings for all the buckets in your AWS account

Choose the settings you want to change, and then choose Save. For details about each setting, pause on the i icons.

When you're asked for confirmation, enter confirm. Then Click Confirm to save your changes.

From Command Line:
To set Block Public access settings for this account, run the following command:

aws s3control put-public-access-block
--public-access-block-configuration BlockPublicAcls=true, IgnorePublicAcls=true, BlockPublicPolicy=true, RestrictPublicBuckets=true
--account-id <value>"
  reference   : "CSCv7|14.6,CSCv8|3.3,LEVEL|1A,CIS_Recommendation|2.1.5,800-53|AC-3"
  see_also    : "https://workbench.cisecurity.org/files/3416"
</report>

<report type:"WARNING">
  description : "2.2.1 Ensure EBS volume encryption is enabled"
  info        : "Elastic Compute Cloud (EC2) supports encryption at rest when using the Elastic Block Store (EBS) service. While disabled by default, forcing encryption at EBS volume creation is supported.

Rationale:

Encrypting data at rest reduces the likelihood that it is unintentionally exposed and can nullify the impact of disclosure if the encryption remains unbroken.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From Console:

Login to AWS Management Console and open the Amazon EC2 console using https://console.aws.amazon.com/ec2/

Under Account attributes, click EBS encryption.

Click Manage.

Click the Enable checkbox.

Click Update EBS encryption

Repeat for every region requiring the change.

Note: EBS volume encryption is configured per region.
From Command Line:

Run

aws --region <region> ec2 enable-ebs-encryption-by-default

Verify that 'EbsEncryptionByDefault': true is displayed.

Repeat every region requiring the change.

Note: EBS volume encryption is configured per region."
  reference   : "CSCv7|14.8,CSCv8|3.11,LEVEL|1M,CIS_Recommendation|2.2.1,800-53|IA-5"
  see_also    : "https://workbench.cisecurity.org/files/3416"
</report>

<custom_item>
  type        : RDS
  description : "2.3.1 Ensure that encryption is enabled for RDS Instances"
  info        : "Amazon RDS encrypted DB instances use the industry standard AES-256 encryption algorithm to encrypt your data on the server that hosts your Amazon RDS DB instances. After your data is encrypted, Amazon RDS handles authentication of access and decryption of your data transparently with a minimal impact on performance.

Rationale:

Databases are likely to hold sensitive and critical data, it is highly recommended to implement encryption in order to protect your data from unauthorized access or disclosure. With RDS encryption enabled, the data stored on the instance's underlying storage, the automated backups, read replicas, and snapshots, are all encrypted."
  solution    : "From Console:

Login to the AWS Management Console and open the RDS dashboard at https://console.aws.amazon.com/rds/.

In the left navigation panel, click on Databases

Select the Database instance that needs to encrypt.

Click on Actions button placed at the top right and select Take Snapshot.

On the Take Snapshot page, enter a database name of which you want to take a snapshot in the Snapshot Name field and click on Take Snapshot.

Select the newly created snapshot and click on the Action button placed at the top right and select Copy snapshot from the Action menu.

On the Make Copy of DB Snapshot page, perform the following:

In the New DB Snapshot Identifier field, Enter a name for the new snapshot.

Check Copy Tags, New snapshot must have the same tags as the source snapshot.

Select Yes from the Enable Encryption dropdown list to enable encryption, You can choose to use the AWS default encryption key or custom key from Master Key dropdown list.

Click Copy Snapshot to create an encrypted copy of the selected instance snapshot.

Select the new Snapshot Encrypted Copy and click on the Action button placed at the top right and select Restore Snapshot button from the Action menu, This will restore the encrypted snapshot to a new database instance.

On the Restore DB Instance page, enter a unique name for the new database instance in the DB Instance Identifier field.

Review the instance configuration details and click Restore DB Instance.

As the new instance provisioning process is completed can update application configuration to refer to the endpoint of the new Encrypted database instance Once the database endpoint is changed at the application level, can remove the unencrypted instance.

From Command Line:

Run describe-db-instances command to list all RDS database names available in the selected AWS region, The command output should return the database instance identifier.

aws rds describe-db-instances --region <region-name> --query 'DBInstances[*].DBInstanceIdentifier'

Run create-db-snapshot command to create a snapshot for the selected database instance, The command output will return the new snapshot with name DB Snapshot Name.

aws rds create-db-snapshot --region <region-name> --db-snapshot-identifier <DB-Snapshot-Name> --db-instance-identifier <DB-Name>

Now run list-aliases command to list the KMS keys aliases available in a specified region, The command output should return each key alias currently available. For our RDS encryption activation process, locate the ID of the AWS default KMS key.

aws kms list-aliases --region <region-name>

Run copy-db-snapshot command using the default KMS key ID for RDS instances returned earlier to create an encrypted copy of the database instance snapshot, The command output will return the encrypted instance snapshot configuration.

aws rds copy-db-snapshot --region <region-name> --source-db-snapshot-identifier <DB-Snapshot-Name> --target-db-snapshot-identifier <DB-Snapshot-Name-Encrypted> --copy-tags --kms-key-id <KMS-ID-For-RDS>

Run restore-db-instance-from-db-snapshot command to restore the encrypted snapshot created at the previous step to a new database instance, If successful, the command output should return the new encrypted database instance configuration.

aws rds restore-db-instance-from-db-snapshot --region <region-name> --db-instance-identifier <DB-Name-Encrypted> --db-snapshot-identifier <DB-Snapshot-Name-Encrypted>

Run describe-db-instances command to list all RDS database names, available in the selected AWS region, Output will return database instance identifier name Select encrypted database name that we just created DB-Name-Encrypted.

aws rds describe-db-instances --region <region-name> --query 'DBInstances[*].DBInstanceIdentifier'



Run again describe-db-instances command using the RDS instance identifier returned earlier, to determine if the selected database instance is encrypted, The command output should return the encryption status True.

aws rds describe-db-instances --region <region-name> --db-instance-identifier <DB-Name-Encrypted> --query 'DBInstances[*].StorageEncrypted'"
  reference   : "800-171|3.13.16,800-53|SC-28(1),CIS_Recommendation|2.3.1,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.8,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1A,QCSC-v1|5.2.2,QCSC-v1|6.2,TBA-FIISB|28.1"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "DescribeDBInstances"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
  <xsl:when test=\"//rds:DBInstance\">
  <xsl:for-each select=\"//rds:DBInstance\">
  <xsl:value-of select=\"rds:DBInstanceIdentifier\"/><xsl:text> : Storage Encrypted = </xsl:text><xsl:value-of select=\"rds:StorageEncrypted\"/><xsl:text>&#10;</xsl:text>
  </xsl:for-each>
  </xsl:when>
  <xsl:otherwise>
  <xsl:text>No Encryption Found</xsl:text>
  </xsl:otherwise>
  </xsl:choose>
  </xsl:template>"
  regex       : ".+ : Storage Encrypted ="
  not_expect  : ".+ : Storage Encrypted = false"
</custom_item>

<custom_item>
  type           : CLOUDTRAIL
  description    : "3.1 Ensure CloudTrail is enabled in all regions - IsMultiRegionTrail"
  info           : "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).

Rationale:

The AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing. Additionally,

ensuring that a multi-regions trail exists will ensure that unexpected activity occurring in otherwise unused regions is detected

ensuring that a multi-regions trail exists will ensure that Global Service Logging is enabled for a trail by default to capture recording of events generated on AWS global services

for a multi-regions trail, ensuring that management events configured for all type of Read/Writes ensures recording of management operations that are performed on all resources in an AWS account

Impact:

S3 lifecycle features can be used to manage the accumulation and management of logs over time. See the following AWS resource for more information on these features:

https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html"
  solution       : "Perform the following to enable global (Multi-region) CloudTrail logging:
From Console:

Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/cloudtrail

Click on Trails on the left navigation pane

Click Get Started Now , if presented

Click Add new trail

Enter a trail name in the Trail name box

Set the Apply trail to all regions option to Yes

Specify an S3 bucket name in the S3 bucket box

Click Create

If 1 or more trails already exist, select the target trail to enable for global logging

Click the edit icon (pencil) next to Apply trail to all regions , Click Yes and Click Save.

Click the edit icon (pencil) next to Management Events click All for setting Read/Write Events and Click Save.

From Command Line:

aws cloudtrail create-trail --name <trail_name> --bucket-name <s3_bucket_for_cloudtrail> --is-multi-region-trail
aws cloudtrail update-trail --name <trail_name> --is-multi-region-trail

Note: Creating CloudTrail via CLI without providing any overriding options configures Management Events to set All type of Read/Writes by default.

Default Value:

Not Enabled"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,CCE|CCE-78913-1,CIS_Recommendation|3.1,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSCv7|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1A,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/3416"
  aws_action     : "DescribeTrails"
  json_transform : 'if .[0].trailList == [] then "No Trails defined" else (.[0].trailList[] |
                "\(.Name) - IsMultiRegionTrail = \(.IsMultiRegionTrail)") end'
  regex          : "IsMultiRegionTrail = "
  expect         : "IsMultiRegionTrail = true"
</custom_item>

<report type:"WARNING">
  description : "3.1 Ensure CloudTrail is enabled in all regions - IsLogging"
  info        : "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).

Rationale:

The AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing. Additionally,

ensuring that a multi-regions trail exists will ensure that unexpected activity occurring in otherwise unused regions is detected

ensuring that a multi-regions trail exists will ensure that Global Service Logging is enabled for a trail by default to capture recording of events generated on AWS global services

for a multi-regions trail, ensuring that management events configured for all type of Read/Writes ensures recording of management operations that are performed on all resources in an AWS account

Impact:

S3 lifecycle features can be used to manage the accumulation and management of logs over time. See the following AWS resource for more information on these features:

https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the following to enable global (Multi-region) CloudTrail logging:
From Console:

Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/cloudtrail

Click on Trails on the left navigation pane

Click Get Started Now , if presented

Click Add new trail

Enter a trail name in the Trail name box

Set the Apply trail to all regions option to Yes

Specify an S3 bucket name in the S3 bucket box

Click Create

If 1 or more trails already exist, select the target trail to enable for global logging

Click the edit icon (pencil) next to Apply trail to all regions , Click Yes and Click Save.

Click the edit icon (pencil) next to Management Events click All for setting Read/Write Events and Click Save.

From Command Line:

aws cloudtrail create-trail --name <trail_name> --bucket-name <s3_bucket_for_cloudtrail> --is-multi-region-trail
aws cloudtrail update-trail --name <trail_name> --is-multi-region-trail

Note: Creating CloudTrail via CLI without providing any overriding options configures Management Events to set All type of Read/Writes by default.

Default Value:

Not Enabled"
  reference   : "800-53|AU-12c.,CCE|CCE-78913-1,CIS_Recommendation|3.1,CSCv6|6.2,CSCv7|6.2,CSCv8|8.5,LEVEL|1A"
  see_also    : "https://workbench.cisecurity.org/files/3416"
</report>

<report type:"WARNING">
  description : "3.1 Ensure CloudTrail is enabled in all regions - IncludeManagementEvents"
  info        : "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).

Rationale:

The AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing. Additionally,

ensuring that a multi-regions trail exists will ensure that unexpected activity occurring in otherwise unused regions is detected

ensuring that a multi-regions trail exists will ensure that Global Service Logging is enabled for a trail by default to capture recording of events generated on AWS global services

for a multi-regions trail, ensuring that management events configured for all type of Read/Writes ensures recording of management operations that are performed on all resources in an AWS account

Impact:

S3 lifecycle features can be used to manage the accumulation and management of logs over time. See the following AWS resource for more information on these features:

https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the following to enable global (Multi-region) CloudTrail logging:
From Console:

Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/cloudtrail

Click on Trails on the left navigation pane

Click Get Started Now , if presented

Click Add new trail

Enter a trail name in the Trail name box

Set the Apply trail to all regions option to Yes

Specify an S3 bucket name in the S3 bucket box

Click Create

If 1 or more trails already exist, select the target trail to enable for global logging

Click the edit icon (pencil) next to Apply trail to all regions , Click Yes and Click Save.

Click the edit icon (pencil) next to Management Events click All for setting Read/Write Events and Click Save.

From Command Line:

aws cloudtrail create-trail --name <trail_name> --bucket-name <s3_bucket_for_cloudtrail> --is-multi-region-trail
aws cloudtrail update-trail --name <trail_name> --is-multi-region-trail

Note: Creating CloudTrail via CLI without providing any overriding options configures Management Events to set All type of Read/Writes by default.

Default Value:

Not Enabled"
  reference   : "800-53|AU-12c.,CCE|CCE-78913-1,CIS_Recommendation|3.1,CSCv6|6.2,CSCv7|6.2,CSCv8|8.5,LEVEL|1A"
  see_also    : "https://workbench.cisecurity.org/files/3416"
</report>

<report type:"WARNING">
  description : "3.1 Ensure CloudTrail is enabled in all regions - ReadWriteType"
  info        : "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).

Rationale:

The AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing. Additionally,

ensuring that a multi-regions trail exists will ensure that unexpected activity occurring in otherwise unused regions is detected

ensuring that a multi-regions trail exists will ensure that Global Service Logging is enabled for a trail by default to capture recording of events generated on AWS global services

for a multi-regions trail, ensuring that management events configured for all type of Read/Writes ensures recording of management operations that are performed on all resources in an AWS account

Impact:

S3 lifecycle features can be used to manage the accumulation and management of logs over time. See the following AWS resource for more information on these features:

https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the following to enable global (Multi-region) CloudTrail logging:
From Console:

Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/cloudtrail

Click on Trails on the left navigation pane

Click Get Started Now , if presented

Click Add new trail

Enter a trail name in the Trail name box

Set the Apply trail to all regions option to Yes

Specify an S3 bucket name in the S3 bucket box

Click Create

If 1 or more trails already exist, select the target trail to enable for global logging

Click the edit icon (pencil) next to Apply trail to all regions , Click Yes and Click Save.

Click the edit icon (pencil) next to Management Events click All for setting Read/Write Events and Click Save.

From Command Line:

aws cloudtrail create-trail --name <trail_name> --bucket-name <s3_bucket_for_cloudtrail> --is-multi-region-trail
aws cloudtrail update-trail --name <trail_name> --is-multi-region-trail

Note: Creating CloudTrail via CLI without providing any overriding options configures Management Events to set All type of Read/Writes by default.

Default Value:

Not Enabled"
  reference   : "800-53|AU-12c.,CCE|CCE-78913-1,CIS_Recommendation|3.1,CSCv6|6.2,CSCv7|6.2,CSCv8|8.5,LEVEL|1A"
  see_also    : "https://workbench.cisecurity.org/files/3416"
</report>

<custom_item>
  type           : CLOUDTRAIL
  description    : "3.3 Ensure the S3 bucket used to store CloudTrail logs is not publicly accessible"
  info           : "CloudTrail logs a record of every API call made in your AWS account. These logs file are stored in an S3 bucket. It is recommended that the bucket policy or access control list (ACL) applied to the S3 bucket that CloudTrail logs to prevent public access to the CloudTrail logs.

Rationale:

Allowing public access to CloudTrail log content may aid an adversary in identifying weaknesses in the affected account's use or configuration.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Perform the following to remove any public access that has been granted to the bucket via an ACL or S3 bucket policy:

Go to Amazon S3 console at https://console.aws.amazon.com/s3/home

Right-click on the bucket and click Properties

In the Properties pane, click the Permissions tab.

The tab shows a list of grants, one row per grant, in the bucket ACL. Each row identifies the grantee and the permissions granted.

Select the row that grants permission to Everyone or Any Authenticated User

Uncheck all the permissions granted to Everyone or Any Authenticated User (click x to delete the row).

Click Save to save the ACL.

If the Edit bucket policy button is present, click it.

Remove any Statement having an Effect set to Allow and a Principal set to '*' or {'AWS' : '*'}.

Default Value:

By default, S3 buckets are not publicly accessible"
  reference      : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9(4),CCE|CCE-78915-6,CIS_Recommendation|3.3,CN-L3|8.1.4.3(d),CSCv6|14.6,CSCv7|14.6,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9(4),ITSG-33|AU-9(4)(a),ITSG-33|AU-9(4)(b),LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,NIAv2|SM5,NIAv2|SM6,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|5.1"
  see_also       : "https://workbench.cisecurity.org/files/3416"
  aws_action     : "DescribeTrails"
  json_transform : 'if .[0].trailList == [] then "No Trails defined" else (.[0].trailList[] |
                "\(.Name) - S3 Bucket = \(.S3BucketName)") end'
  not_expect     : ".+"
  severity       : MEDIUM
</custom_item>

<custom_item>
  type           : CLOUDTRAIL
  description    : "3.4 Ensure CloudTrail trails are integrated with CloudWatch Logs - 'log group is configured'"
  info           : "AWS CloudTrail is a web service that records AWS API calls made in a given AWS account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs within a specified S3 bucket for long term analysis, realtime analysis can be performed by configuring CloudTrail to send logs to CloudWatch Logs. For a trail that is enabled in all regions in an account, CloudTrail sends log files from all those regions to a CloudWatch Logs log group. It is recommended that CloudTrail logs be sent to CloudWatch Logs.

Note: The intent of this recommendation is to ensure AWS account activity is being captured, monitored, and appropriately alarmed on. CloudWatch Logs is a native way to accomplish this using AWS services but does not preclude the use of an alternate solution.

Rationale:

Sending CloudTrail logs to CloudWatch Logs will facilitate real-time and historic activity logging based on user, API, resource, and IP address, and provides opportunity to establish alarms and notifications for anomalous or sensitivity account activity.

Impact:

Note: By default, CloudWatch Logs will store Logs indefinitely unless a specific retention period is defined for the log group. When choosing the number of days to retain, keep in mind the average days it takes an organization to realize they have been breached is 210 days (at the time of this writing). Since additional time is required to research a breach, a minimum 365 day retention policy allows time for detection and research. You may also wish to archive the logs to a cheaper storage service rather than simply deleting them. See the following AWS resource to manage CloudWatch Logs retention periods:

https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/SettingLogRetention.html"
  solution       : "Perform the following to establish the prescribed state:
From Console:

Login to the CloudTrail console at https://console.aws.amazon.com/cloudtrail/

Select the Trail the needs to be updated.

Scroll down to CloudWatch Logs

Click Edit

Under CloudWatch Logs click the box Enabled

Under Log Group pick new or select an existing log group

Edit the Log group name to match the CloudTrail or pick the existing CloudWatch Group.

Under IAM Role pick new or select an existing.

Edit the Role name to match the CloudTrail or pick the existing IAM Role.

Click 'Save changes.

From Command Line:

aws cloudtrail update-trail --name <trail_name> --cloudwatch-logs-log-group-arn <cloudtrail_log_group_arn> --cloudwatch-logs-role-arn <cloudtrail_cloudwatchLogs_role_arn>"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,CCE|CCE-78916-4,CIS_Recommendation|3.4,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSCv6|6.5,CSCv7|6.2,CSCv7|6.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1A,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/3416"
  aws_action     : "DescribeTrails"
  json_transform : 'if .[0].trailList == [] then "No Trails defined" else (.[0].trailList[] |
                "\(.Name) - CloudWatchLogsLogGroupArn = \(.CloudWatchLogsLogGroupArn // "No Log Group Defined")") end'
  regex          : "CloudWatchLogsLogGroupArn = "
  expect         : "CloudWatchLogsLogGroupArn = arn:"
</custom_item>

<report type:"WARNING">
  description : "3.4 Ensure CloudTrail trails are integrated with CloudWatch Logs - 'LogWatch Log Delivery'"
  info        : "AWS CloudTrail is a web service that records AWS API calls made in a given AWS account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs within a specified S3 bucket for long term analysis, realtime analysis can be performed by configuring CloudTrail to send logs to CloudWatch Logs. For a trail that is enabled in all regions in an account, CloudTrail sends log files from all those regions to a CloudWatch Logs log group. It is recommended that CloudTrail logs be sent to CloudWatch Logs.

Note: The intent of this recommendation is to ensure AWS account activity is being captured, monitored, and appropriately alarmed on. CloudWatch Logs is a native way to accomplish this using AWS services but does not preclude the use of an alternate solution.

Rationale:

Sending CloudTrail logs to CloudWatch Logs will facilitate real-time and historic activity logging based on user, API, resource, and IP address, and provides opportunity to establish alarms and notifications for anomalous or sensitivity account activity.

Impact:

Note: By default, CloudWatch Logs will store Logs indefinitely unless a specific retention period is defined for the log group. When choosing the number of days to retain, keep in mind the average days it takes an organization to realize they have been breached is 210 days (at the time of this writing). Since additional time is required to research a breach, a minimum 365 day retention policy allows time for detection and research. You may also wish to archive the logs to a cheaper storage service rather than simply deleting them. See the following AWS resource to manage CloudWatch Logs retention periods:

https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/SettingLogRetention.html

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the following to establish the prescribed state:
From Console:

Login to the CloudTrail console at https://console.aws.amazon.com/cloudtrail/

Select the Trail the needs to be updated.

Scroll down to CloudWatch Logs

Click Edit

Under CloudWatch Logs click the box Enabled

Under Log Group pick new or select an existing log group

Edit the Log group name to match the CloudTrail or pick the existing CloudWatch Group.

Under IAM Role pick new or select an existing.

Edit the Role name to match the CloudTrail or pick the existing IAM Role.

Click 'Save changes.

From Command Line:

aws cloudtrail update-trail --name <trail_name> --cloudwatch-logs-log-group-arn <cloudtrail_log_group_arn> --cloudwatch-logs-role-arn <cloudtrail_cloudwatchLogs_role_arn>"
  reference   : "800-53|AU-12c.,CCE|CCE-78916-4,CIS_Recommendation|3.4,CSCv6|6.2,CSCv6|6.5,CSCv7|6.2,CSCv7|6.5,CSCv8|8.5,CSCv8|8.9,LEVEL|1A"
  see_also    : "https://workbench.cisecurity.org/files/3416"
</report>

<report type:"WARNING">
  description : "3.6 Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket"
  info        : "S3 Bucket Access Logging generates a log that contains access records for each request made to your S3 bucket. An access log record contains details about the request, such as the request type, the resources specified in the request worked, and the time and date the request was processed. It is recommended that bucket access logging be enabled on the CloudTrail S3 bucket.

Rationale:

By enabling S3 bucket logging on target S3 buckets, it is possible to capture all events which may affect objects within any target buckets. Configuring logs to be placed in a separate bucket allows access to log information which can be useful in security and incident response workflows.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the following to enable S3 bucket logging:
From Console:

Sign in to the AWS Management Console and open the S3 console at https://console.aws.amazon.com/s3.

Under All Buckets click on the target S3 bucket

Click on Properties in the top right of the console

Under Bucket: <s3_bucket_for_cloudtrail> click on Logging

Configure bucket logging

Click on Enabled checkbox

Select Target Bucket from list

Enter a Target Prefix

Click Save

Default Value:

Logging is disabled."
  reference   : "800-53|AU-2.,CCE|CCE-78918-0,CIS_Recommendation|3.6,CSCv6|14.9,CSCv6|6.2,CSCv7|14.9,CSCv7|6.2,CSCv8|3.14,CSCv8|8.2,LEVEL|1A"
  see_also    : "https://workbench.cisecurity.org/files/3416"
</report>

<custom_item>
  type           : LOGS
  description    : "4.1 Ensure a log metric filter and alarm exist for unauthorized API calls - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.

Rationale:

Monitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.

Impact:

This alert may be triggered by normal read-only console activities that attempt to opportunistically gather optional information, but gracefully fail if they don't have permissions.

If an excessive number of alerts are being generated then an organization may wish to consider adding read access to the limited IAM user permissions simply to quiet the alerts.

In some cases doing this may allow the users to actually view some areas of the system - any additional access given should be reviewed for alignment with the original limited IAM user intent."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for unauthorized API calls and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<unauthorized_api_calls_metric>'  --metric-transformations metricName= '<unauthorized_api_calls_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.errorCode = '*UnauthorizedOperation') || ($.errorCode = 'AccessDenied*') || ($.sourceIPAddress!='delivery.logs.amazonaws.com') || ($.eventName!='HeadBucket') }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<unauthorized_api_calls_alarm>'  --metric-name  '<unauthorized_api_calls_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CCE|CCE-79186-3,CIS_Recommendation|4.1,CSCv6|6.5,CSCv6|6.7,CSCv7|6.5,CSCv7|6.7,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
  see_also       : "https://workbench.cisecurity.org/files/3416"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\s*\$\.errorCode\s*=\s*(\\"|\')?\*UnauthorizedOperation(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.errorCode\s*=\s*(\\"|\')?AccessDenied\*(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.sourceIPAddress\s*\!\=\s*(\\"|\')?delivery\.logs\.amazonaws\.com(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*\!\=\s*(\\"|\')?HeadBucket(\\"|\')?\s*\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "4.1 Ensure a log metric filter and alarm exist for unauthorized API calls - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.

Rationale:

Monitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.

Impact:

This alert may be triggered by normal read-only console activities that attempt to opportunistically gather optional information, but gracefully fail if they don't have permissions.

If an excessive number of alerts are being generated then an organization may wish to consider adding read access to the limited IAM user permissions simply to quiet the alerts.

In some cases doing this may allow the users to actually view some areas of the system - any additional access given should be reviewed for alignment with the original limited IAM user intent."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for unauthorized API calls and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<unauthorized_api_calls_metric>'  --metric-transformations metricName= '<unauthorized_api_calls_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.errorCode = '*UnauthorizedOperation') || ($.errorCode = 'AccessDenied*') || ($.sourceIPAddress!='delivery.logs.amazonaws.com') || ($.eventName!='HeadBucket') }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<unauthorized_api_calls_alarm>'  --metric-name  '<unauthorized_api_calls_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference   : "800-171|3.3.4,800-53|AU-5.,CCE|CCE-79186-3,CIS_Recommendation|4.1,CN-L3|7.1.3.3(e),CSCv6|6.5,CSCv6|6.7,CSCv7|6.5,CSCv7|6.7,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1A,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "DescribeAlarms"
# Note: Variable @API_METRIC_NAME@ replaced with "UnauthorizedAPICalls" in field "<xsl".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='UnauthorizedAPICalls'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @API_METRIC_NAME@ replaced with "UnauthorizedAPICalls" in field "expect".
  expect      : "Metric UnauthorizedAPICalls has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "4.1 Ensure a log metric filter and alarm exist for unauthorized API calls - 'alarm exists'"
      aws_action  : "DescribeAlarms"
# Note: Variable @API_METRIC_NAME@ replaced with "UnauthorizedAPICalls" in field "<xsl".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='UnauthorizedAPICalls'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @API_METRIC_NAME@ replaced with "UnauthorizedAPICalls" in field "expect".
      expect      : "Metric UnauthorizedAPICalls has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "4.1 Ensure a log metric filter and alarm exist for unauthorized API calls - 'subscription exists'"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "4.1 Ensure a log metric filter and alarm exist for unauthorized API calls - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.

Rationale:

Monitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.

Impact:

This alert may be triggered by normal read-only console activities that attempt to opportunistically gather optional information, but gracefully fail if they don't have permissions.

If an excessive number of alerts are being generated then an organization may wish to consider adding read access to the limited IAM user permissions simply to quiet the alerts.

In some cases doing this may allow the users to actually view some areas of the system - any additional access given should be reviewed for alignment with the original limited IAM user intent."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for unauthorized API calls and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<unauthorized_api_calls_metric>'  --metric-transformations metricName= '<unauthorized_api_calls_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.errorCode = '*UnauthorizedOperation') || ($.errorCode = 'AccessDenied*') || ($.sourceIPAddress!='delivery.logs.amazonaws.com') || ($.eventName!='HeadBucket') }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<unauthorized_api_calls_alarm>'  --metric-name  '<unauthorized_api_calls_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CIS_Recommendation|4.1,CSCv6|6.5,CSCv6|6.7,CSCv7|6.5,CSCv7|6.7,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "4.1 Ensure a log metric filter and alarm exist for unauthorized API calls - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.

Rationale:

Monitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.

Impact:

This alert may be triggered by normal read-only console activities that attempt to opportunistically gather optional information, but gracefully fail if they don't have permissions.

If an excessive number of alerts are being generated then an organization may wish to consider adding read access to the limited IAM user permissions simply to quiet the alerts.

In some cases doing this may allow the users to actually view some areas of the system - any additional access given should be reviewed for alignment with the original limited IAM user intent."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for unauthorized API calls and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<unauthorized_api_calls_metric>'  --metric-transformations metricName= '<unauthorized_api_calls_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.errorCode = '*UnauthorizedOperation') || ($.errorCode = 'AccessDenied*') || ($.sourceIPAddress!='delivery.logs.amazonaws.com') || ($.eventName!='HeadBucket') }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<unauthorized_api_calls_alarm>'  --metric-name  '<unauthorized_api_calls_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CIS_Recommendation|4.1,CSCv6|6.5,CSCv6|6.7,CSCv7|6.5,CSCv7|6.7,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "4.2 Ensure a log metric filter and alarm exist for Management Console sign-in without MFA - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).

Rationale:

Monitoring for single-factor console logins will increase visibility into accounts that are not protected by MFA."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the <cloudtrail_log_group_name> taken from audit step 1.

Use Command:

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<no_mfa_console_signin_metric>'  --metric-transformations metricName= '<no_mfa_console_signin_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') }'

Or (To reduce false positives incase Single Sign-On (SSO) is used in organization):

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<no_mfa_console_signin_metric>'  --metric-transformations metricName= '<no_mfa_console_signin_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') && ($.userIdentity.type = 'IAMUser') && ($.responseElements.ConsoleLogin = 'Success') }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<no_mfa_console_signin_alarm>'  --metric-name  '<no_mfa_console_signin_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CCE|CCE-79187-1,CIS_Recommendation|4.2,CSCv6|16,CSCv7|16,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
  see_also       : "https://workbench.cisecurity.org/files/3416"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\$\.eventName\s*=\s*(\\"|\')?ConsoleLogin(\\"|\')?\s*\)\s*\&\&\s*\(\$\.additionalEventData\.MFAUsed\s*\!\=\s*(\\"|\')?Yes(\\"|\')?\s*\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "4.2 Ensure a log metric filter and alarm exist for Management Console sign-in without MFA - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).

Rationale:

Monitoring for single-factor console logins will increase visibility into accounts that are not protected by MFA."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the <cloudtrail_log_group_name> taken from audit step 1.

Use Command:

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<no_mfa_console_signin_metric>'  --metric-transformations metricName= '<no_mfa_console_signin_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') }'

Or (To reduce false positives incase Single Sign-On (SSO) is used in organization):

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<no_mfa_console_signin_metric>'  --metric-transformations metricName= '<no_mfa_console_signin_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') && ($.userIdentity.type = 'IAMUser') && ($.responseElements.ConsoleLogin = 'Success') }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<no_mfa_console_signin_alarm>'  --metric-name  '<no_mfa_console_signin_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference   : "800-171|3.3.4,800-53|AU-5.,CCE|CCE-79187-1,CIS_Recommendation|4.2,CN-L3|7.1.3.3(e),CSCv6|16,CSCv7|16,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1A,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "DescribeAlarms"
# Note: Variable @MFA_METRIC_NAME@ replaced with "ManagementConsoleLoginWithoutMFA" in field "<xsl".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='ManagementConsoleLoginWithoutMFA'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @MFA_METRIC_NAME@ replaced with "ManagementConsoleLoginWithoutMFA" in field "expect".
  expect      : "Metric ManagementConsoleLoginWithoutMFA has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @MFA_METRIC_NAME@ replaced with "ManagementConsoleLoginWithoutMFA" in field "<xsl".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='ManagementConsoleLoginWithoutMFA'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @MFA_METRIC_NAME@ replaced with "ManagementConsoleLoginWithoutMFA" in field "expect".
      expect      : "Metric ManagementConsoleLoginWithoutMFA has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "4.2 Ensure a log metric filter and alarm exist for Management Console sign-in without MFA - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).

Rationale:

Monitoring for single-factor console logins will increase visibility into accounts that are not protected by MFA."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the <cloudtrail_log_group_name> taken from audit step 1.

Use Command:

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<no_mfa_console_signin_metric>'  --metric-transformations metricName= '<no_mfa_console_signin_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') }'

Or (To reduce false positives incase Single Sign-On (SSO) is used in organization):

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<no_mfa_console_signin_metric>'  --metric-transformations metricName= '<no_mfa_console_signin_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') && ($.userIdentity.type = 'IAMUser') && ($.responseElements.ConsoleLogin = 'Success') }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<no_mfa_console_signin_alarm>'  --metric-name  '<no_mfa_console_signin_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79187-1,CIS_Recommendation|4.2,CSCv6|6.5,CSCv6|6.7,CSCv7|16,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "4.2 Ensure a log metric filter and alarm exist for Management Console sign-in without MFA - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).

Rationale:

Monitoring for single-factor console logins will increase visibility into accounts that are not protected by MFA."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the <cloudtrail_log_group_name> taken from audit step 1.

Use Command:

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<no_mfa_console_signin_metric>'  --metric-transformations metricName= '<no_mfa_console_signin_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') }'

Or (To reduce false positives incase Single Sign-On (SSO) is used in organization):

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<no_mfa_console_signin_metric>'  --metric-transformations metricName= '<no_mfa_console_signin_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') && ($.userIdentity.type = 'IAMUser') && ($.responseElements.ConsoleLogin = 'Success') }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<no_mfa_console_signin_alarm>'  --metric-name  '<no_mfa_console_signin_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79187-1,CIS_Recommendation|4.2,CSCv6|6.5,CSCv6|6.7,CSCv7|16,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "4.3 Ensure a log metric filter and alarm exist for usage of 'root' account - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for 'root' login attempts.

Rationale:

Monitoring for 'root' account logins will provide visibility into the use of a fully privileged account and an opportunity to reduce the use of it."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for 'Root' account usage and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name '<cloudtrail_log_group_name>' --filter-name '<root_usage_metric>' --metric-transformations metricName= '<root_usage_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ $.userIdentity.type = 'Root' && $.userIdentity.invokedBy NOT EXISTS && $.eventType != 'AwsServiceEvent' }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<root_usage_alarm>'  --metric-name  '<root_usage_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CCE|CCE-79188-9,CIS_Recommendation|4.3,CSCv6|4.9,CSCv7|4.9,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
  see_also       : "https://workbench.cisecurity.org/files/3416"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\$\.userIdentity\.type\s*=\s*(\\"|\')?Root(\\"|\')?\s*\&\&\s*\$\.userIdentity\.invokedBy\s*NOT\s*EXISTS\s*\&\&\s*\$\.eventType\s*\!=\s*(\\"|\')?AwsServiceEvent(\\"|\')\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "4.3 Ensure a log metric filter and alarm exist for usage of 'root' account - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for 'root' login attempts.

Rationale:

Monitoring for 'root' account logins will provide visibility into the use of a fully privileged account and an opportunity to reduce the use of it."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for 'Root' account usage and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name '<cloudtrail_log_group_name>' --filter-name '<root_usage_metric>' --metric-transformations metricName= '<root_usage_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ $.userIdentity.type = 'Root' && $.userIdentity.invokedBy NOT EXISTS && $.eventType != 'AwsServiceEvent' }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<root_usage_alarm>'  --metric-name  '<root_usage_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference   : "800-171|3.3.4,800-53|AU-5.,CCE|CCE-79188-9,CIS_Recommendation|4.3,CN-L3|7.1.3.3(e),CSCv6|4.9,CSCv7|4.9,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1A,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "DescribeAlarms"
# Note: Variable @ROOT_METRIC_NAME@ replaced with "RootAccountUsage" in field "<xsl".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='RootAccountUsage'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @ROOT_METRIC_NAME@ replaced with "RootAccountUsage" in field "expect".
  expect      : "Metric RootAccountUsage has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @ROOT_METRIC_NAME@ replaced with "RootAccountUsage" in field "<xsl".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='RootAccountUsage'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @ROOT_METRIC_NAME@ replaced with "RootAccountUsage" in field "expect".
      expect      : "Metric RootAccountUsage has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "4.3 Ensure a log metric filter and alarm exist for usage of 'root' account - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for 'root' login attempts.

Rationale:

Monitoring for 'root' account logins will provide visibility into the use of a fully privileged account and an opportunity to reduce the use of it."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for 'Root' account usage and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name '<cloudtrail_log_group_name>' --filter-name '<root_usage_metric>' --metric-transformations metricName= '<root_usage_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ $.userIdentity.type = 'Root' && $.userIdentity.invokedBy NOT EXISTS && $.eventType != 'AwsServiceEvent' }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<root_usage_alarm>'  --metric-name  '<root_usage_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79188-9,CIS_Recommendation|4.3,CSCv6|6.5,CSCv6|6.7,CSCv7|4.9,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "4.3 Ensure a log metric filter and alarm exist for usage of 'root' account - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for 'root' login attempts.

Rationale:

Monitoring for 'root' account logins will provide visibility into the use of a fully privileged account and an opportunity to reduce the use of it."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for 'Root' account usage and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name '<cloudtrail_log_group_name>' --filter-name '<root_usage_metric>' --metric-transformations metricName= '<root_usage_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ $.userIdentity.type = 'Root' && $.userIdentity.invokedBy NOT EXISTS && $.eventType != 'AwsServiceEvent' }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<root_usage_alarm>'  --metric-name  '<root_usage_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79188-9,CIS_Recommendation|4.3,CSCv6|6.5,CSCv6|6.7,CSCv7|4.9,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "4.4 Ensure a log metric filter and alarm exist for IAM policy changes - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.

Rationale:

Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for IAM policy changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name '<cloudtrail_log_group_name>' --filter-name  '<iam_changes_metric>'  --metric-transformations metricName= '<iam_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<iam_changes_alarm>'  --metric-name  '<iam_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CCE|CCE-79189-7,CIS_Recommendation|4.4,CSCv6|16,CSCv7|16,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
  see_also       : "https://workbench.cisecurity.org/files/3416"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?DeleteGroupPolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?DeleteRolePolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?DeleteUserPolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?PutGroupPolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?PutRolePolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?PutUserPolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?CreatePolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?DeletePolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?CreatePolicyVersion(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?DeletePolicyVersion(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?AttachRolePolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?DetachRolePolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?AttachUserPolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?DetachUserPolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?AttachGroupPolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?DetachGroupPolicy(\\"|\')?\s*\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "4.4 Ensure a log metric filter and alarm exist for IAM policy changes - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.

Rationale:

Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for IAM policy changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name '<cloudtrail_log_group_name>' --filter-name  '<iam_changes_metric>'  --metric-transformations metricName= '<iam_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<iam_changes_alarm>'  --metric-name  '<iam_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference   : "800-171|3.3.4,800-53|AU-5.,CCE|CCE-79189-7,CIS_Recommendation|4.4,CN-L3|7.1.3.3(e),CSCv6|16,CSCv7|16,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1A,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "DescribeAlarms"
# Note: Variable @IAM_METRIC_NAME@ replaced with "IAMPolicyChanges" in field "<xsl".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='IAMPolicyChanges'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @IAM_METRIC_NAME@ replaced with "IAMPolicyChanges" in field "expect".
  expect      : "Metric IAMPolicyChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @IAM_METRIC_NAME@ replaced with "IAMPolicyChanges" in field "<xsl".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='IAMPolicyChanges'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @IAM_METRIC_NAME@ replaced with "IAMPolicyChanges" in field "expect".
      expect      : "Metric IAMPolicyChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "4.4 Ensure a log metric filter and alarm exist for IAM policy changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.

Rationale:

Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for IAM policy changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name '<cloudtrail_log_group_name>' --filter-name  '<iam_changes_metric>'  --metric-transformations metricName= '<iam_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<iam_changes_alarm>'  --metric-name  '<iam_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79189-7,CIS_Recommendation|4.4,CSCv6|6.5,CSCv6|6.7,CSCv7|16,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "4.4 Ensure a log metric filter and alarm exist for IAM policy changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.

Rationale:

Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for IAM policy changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name '<cloudtrail_log_group_name>' --filter-name  '<iam_changes_metric>'  --metric-transformations metricName= '<iam_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<iam_changes_alarm>'  --metric-name  '<iam_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79189-7,CIS_Recommendation|4.4,CSCv6|6.5,CSCv6|6.7,CSCv7|16,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "4.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.

Rationale:

Monitoring changes to CloudTrail's configuration will help ensure sustained visibility to activities performed in the AWS account."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for cloudtrail configuration changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<cloudtrail_cfg_changes_metric>'  --metric-transformations metricName= '<cloudtrail_cfg_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<cloudtrail_cfg_changes_alarm>'  --metric-name  '<cloudtrail_cfg_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CCE|CCE-79190-5,CIS_Recommendation|4.5,CSCv6|6,CSCv7|6,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
  see_also       : "https://workbench.cisecurity.org/files/3416"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?CreateTrail(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?UpdateTrail(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?DeleteTrail(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?StartLogging(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?StopLogging(\\"|\')?\s*\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "4.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.

Rationale:

Monitoring changes to CloudTrail's configuration will help ensure sustained visibility to activities performed in the AWS account."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for cloudtrail configuration changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<cloudtrail_cfg_changes_metric>'  --metric-transformations metricName= '<cloudtrail_cfg_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<cloudtrail_cfg_changes_alarm>'  --metric-name  '<cloudtrail_cfg_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference   : "800-171|3.3.4,800-53|AU-5.,CCE|CCE-79190-5,CIS_Recommendation|4.5,CN-L3|7.1.3.3(e),CSCv6|6,CSCv7|6,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1A,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "DescribeAlarms"
# Note: Variable @CLOUDTRAIL_METRIC_NAME@ replaced with "CloudTrailConfigChanges" in field "<xsl".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='CloudTrailConfigChanges'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @CLOUDTRAIL_METRIC_NAME@ replaced with "CloudTrailConfigChanges" in field "expect".
  expect      : "Metric CloudTrailConfigChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @CLOUDTRAIL_METRIC_NAME@ replaced with "CloudTrailConfigChanges" in field "<xsl".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='CloudTrailConfigChanges'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @CLOUDTRAIL_METRIC_NAME@ replaced with "CloudTrailConfigChanges" in field "expect".
      expect      : "Metric CloudTrailConfigChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "4.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.

Rationale:

Monitoring changes to CloudTrail's configuration will help ensure sustained visibility to activities performed in the AWS account."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for cloudtrail configuration changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<cloudtrail_cfg_changes_metric>'  --metric-transformations metricName= '<cloudtrail_cfg_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<cloudtrail_cfg_changes_alarm>'  --metric-name  '<cloudtrail_cfg_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79190-5,CIS_Recommendation|4.5,CSCv6|6.5,CSCv6|6.7,CSCv7|6,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "4.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.

Rationale:

Monitoring changes to CloudTrail's configuration will help ensure sustained visibility to activities performed in the AWS account."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for cloudtrail configuration changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<cloudtrail_cfg_changes_metric>'  --metric-transformations metricName= '<cloudtrail_cfg_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<cloudtrail_cfg_changes_alarm>'  --metric-name  '<cloudtrail_cfg_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79190-5,CIS_Recommendation|4.5,CSCv6|6.5,CSCv6|6.7,CSCv7|6,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "4.8 Ensure a log metric filter and alarm exist for S3 bucket policy changes - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.

Rationale:

Monitoring changes to S3 bucket policies may reduce time to detect and correct permissive policies on sensitive S3 buckets."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for S3 bucket policy changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<s3_bucket_policy_changes_metric>'  --metric-transformations metricName= '<s3_bucket_policy_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<s3_bucket_policy_changes_alarm>'  --metric-name  '<s3_bucket_policy_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CCE|CCE-79193-9,CIS_Recommendation|4.8,CSCv6|14,CSCv6|6.2,CSCv7|14,CSCv7|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
  see_also       : "https://workbench.cisecurity.org/files/3416"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\s*\$\.eventSource\s*=\s*(\\"|\')?s3\.amazonaws\.com(\\"|\')?\s*\)\s*\&\&\s*\(\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?PutBucketAcl(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?PutBucketPolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?PutBucketCors(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?PutBucketLifecycle(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?PutBucketReplication(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?DeleteBucketPolicy(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?DeleteBucketCors(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?DeleteBucketLifecycle(\\"|\')?\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*(\\"|\')?DeleteBucketReplication(\\"|\')?\s*\)\s*\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "4.8 Ensure a log metric filter and alarm exist for S3 bucket policy changes - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.

Rationale:

Monitoring changes to S3 bucket policies may reduce time to detect and correct permissive policies on sensitive S3 buckets."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for S3 bucket policy changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<s3_bucket_policy_changes_metric>'  --metric-transformations metricName= '<s3_bucket_policy_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<s3_bucket_policy_changes_alarm>'  --metric-name  '<s3_bucket_policy_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference   : "800-171|3.3.4,800-53|AU-5.,CCE|CCE-79193-9,CIS_Recommendation|4.8,CN-L3|7.1.3.3(e),CSCv6|14,CSCv6|6.2,CSCv7|14,CSCv7|6.2,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1A,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "DescribeAlarms"
# Note: Variable @S3_METRIC_NAME@ replaced with "S3BucketPolicyChanges" in field "<xsl".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='S3BucketPolicyChanges'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @S3_METRIC_NAME@ replaced with "S3BucketPolicyChanges" in field "expect".
  expect      : "Metric S3BucketPolicyChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @S3_METRIC_NAME@ replaced with "S3BucketPolicyChanges" in field "<xsl".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='S3BucketPolicyChanges'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @S3_METRIC_NAME@ replaced with "S3BucketPolicyChanges" in field "expect".
      expect      : "Metric S3BucketPolicyChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "4.8 Ensure a log metric filter and alarm exist for S3 bucket policy changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.

Rationale:

Monitoring changes to S3 bucket policies may reduce time to detect and correct permissive policies on sensitive S3 buckets."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for S3 bucket policy changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<s3_bucket_policy_changes_metric>'  --metric-transformations metricName= '<s3_bucket_policy_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<s3_bucket_policy_changes_alarm>'  --metric-name  '<s3_bucket_policy_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79193-9,CIS_Recommendation|4.8,CSCv6|6.5,CSCv6|6.7,CSCv7|14,CSCv7|6.2,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "4.8 Ensure a log metric filter and alarm exist for S3 bucket policy changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.

Rationale:

Monitoring changes to S3 bucket policies may reduce time to detect and correct permissive policies on sensitive S3 buckets."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for S3 bucket policy changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<s3_bucket_policy_changes_metric>'  --metric-transformations metricName= '<s3_bucket_policy_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<s3_bucket_policy_changes_alarm>'  --metric-name  '<s3_bucket_policy_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79193-9,CIS_Recommendation|4.8,CSCv6|6.5,CSCv6|6.7,CSCv7|14,CSCv7|6.2,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "4.12 Ensure a log metric filter and alarm exist for changes to network gateways - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.

Rationale:

Monitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for network gateways changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<network_gw_changes_metric>'  --metric-transformations metricName= '<network_gw_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<network_gw_changes_alarm>'  --metric-name  '<network_gw_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CCE|CCE-79197-0,CIS_Recommendation|4.12,CSCv6|6.2,CSCv6|11.3,CSCv7|6.2,CSCv7|11.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
  see_also       : "https://workbench.cisecurity.org/files/3416"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\$\.eventName\s*=\s*(\\"|\')?CreateCustomerGateway(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DeleteCustomerGateway(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?AttachInternetGateway(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?CreateInternetGateway(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DeleteInternetGateway(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DetachInternetGateway(\\"|\')?\s*\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "4.12 Ensure a log metric filter and alarm exist for changes to network gateways - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.

Rationale:

Monitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for network gateways changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<network_gw_changes_metric>'  --metric-transformations metricName= '<network_gw_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<network_gw_changes_alarm>'  --metric-name  '<network_gw_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference   : "800-171|3.3.4,800-53|AU-5.,CCE|CCE-79197-0,CIS_Recommendation|4.12,CN-L3|7.1.3.3(e),CSCv6|6.2,CSCv6|11.3,CSCv7|6.2,CSCv7|11.3,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1A,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "DescribeAlarms"
# Note: Variable @GATEWAY_METRIC_NAME@ replaced with "NetworkGatewayChanges" in field "<xsl".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='NetworkGatewayChanges'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @GATEWAY_METRIC_NAME@ replaced with "NetworkGatewayChanges" in field "expect".
  expect      : "Metric NetworkGatewayChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @GATEWAY_METRIC_NAME@ replaced with "NetworkGatewayChanges" in field "<xsl".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='NetworkGatewayChanges'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @GATEWAY_METRIC_NAME@ replaced with "NetworkGatewayChanges" in field "expect".
      expect      : "Metric NetworkGatewayChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "4.12 Ensure a log metric filter and alarm exist for changes to network gateways - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.

Rationale:

Monitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for network gateways changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<network_gw_changes_metric>'  --metric-transformations metricName= '<network_gw_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<network_gw_changes_alarm>'  --metric-name  '<network_gw_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79197-0,CIS_Recommendation|4.12,CSCv6|6.5,CSCv6|6.7,CSCv7|11.3,CSCv7|6.2,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "4.12 Ensure a log metric filter and alarm exist for changes to network gateways - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.

Rationale:

Monitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for network gateways changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<network_gw_changes_metric>'  --metric-transformations metricName= '<network_gw_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<network_gw_changes_alarm>'  --metric-name  '<network_gw_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79197-0,CIS_Recommendation|4.12,CSCv6|6.5,CSCv6|6.7,CSCv7|11.3,CSCv7|6.2,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "4.13 Ensure a log metric filter and alarm exist for route table changes - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.

Rationale:

Monitoring changes to route tables will help ensure that all VPC traffic flows through an expected path."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for route table changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<route_table_changes_metric>'  --metric-transformations metricName= '<route_table_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<route_table_changes_alarm>'  --metric-name  '<route_table_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CCE|CCE-79198-8,CIS_Recommendation|4.13,CSCv6|6.2,CSCv6|11.3,CSCv7|6.2,CSCv7|11.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
  see_also       : "https://workbench.cisecurity.org/files/3416"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\$\.eventName\s*=\s*(\\"|\')?CreateRoute(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?CreateRouteTable(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?ReplaceRoute(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?ReplaceRouteTableAssociation(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DeleteRouteTable(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DeleteRoute(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DisassociateRouteTable(\\"|\')?\s*\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "4.13 Ensure a log metric filter and alarm exist for route table changes - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.

Rationale:

Monitoring changes to route tables will help ensure that all VPC traffic flows through an expected path."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for route table changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<route_table_changes_metric>'  --metric-transformations metricName= '<route_table_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<route_table_changes_alarm>'  --metric-name  '<route_table_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference   : "800-171|3.3.4,800-53|AU-5.,CCE|CCE-79198-8,CIS_Recommendation|4.13,CN-L3|7.1.3.3(e),CSCv6|6.2,CSCv6|11.3,CSCv7|6.2,CSCv7|11.3,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1A,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "DescribeAlarms"
# Note: Variable @ROUTE_TABLE_METRIC_NAME@ replaced with "RouteTableChanges" in field "<xsl".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='RouteTableChanges'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @ROUTE_TABLE_METRIC_NAME@ replaced with "RouteTableChanges" in field "expect".
  expect      : "Metric RouteTableChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @ROUTE_TABLE_METRIC_NAME@ replaced with "RouteTableChanges" in field "<xsl".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='RouteTableChanges'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @ROUTE_TABLE_METRIC_NAME@ replaced with "RouteTableChanges" in field "expect".
      expect      : "Metric RouteTableChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "4.13 Ensure a log metric filter and alarm exist for route table changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.

Rationale:

Monitoring changes to route tables will help ensure that all VPC traffic flows through an expected path."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for route table changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<route_table_changes_metric>'  --metric-transformations metricName= '<route_table_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<route_table_changes_alarm>'  --metric-name  '<route_table_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79198-8,CIS_Recommendation|4.13,CSCv6|6.5,CSCv6|6.7,CSCv7|11.3,CSCv7|6.2,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "4.13 Ensure a log metric filter and alarm exist for route table changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.

Rationale:

Monitoring changes to route tables will help ensure that all VPC traffic flows through an expected path."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for route table changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<route_table_changes_metric>'  --metric-transformations metricName= '<route_table_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<route_table_changes_alarm>'  --metric-name  '<route_table_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79198-8,CIS_Recommendation|4.13,CSCv6|6.5,CSCv6|6.7,CSCv7|11.3,CSCv7|6.2,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "4.14 Ensure a log metric filter and alarm exist for VPC changes - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.

Rationale:

Monitoring changes to VPC will help ensure VPC traffic flow is not getting impacted."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for VPC changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<vpc_changes_metric>'  --metric-transformations metricName= '<vpc_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.



Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<vpc_changes_alarm>'  --metric-name  '<vpc_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CCE|CCE-79199-6,CIS_Recommendation|4.14,CSCv6|5.5,CSCv7|5.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
  see_also       : "https://workbench.cisecurity.org/files/3416"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\$\.eventName\s*=\s*(\\"|\')?CreateVpc(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DeleteVpc(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?ModifyVpcAttribute(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?AcceptVpcPeeringConnection(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?CreateVpcPeeringConnection(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DeleteVpcPeeringConnection(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?RejectVpcPeeringConnection(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?AttachClassicLinkVpc(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DetachClassicLinkVpc(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DisableVpcClassicLink(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?EnableVpcClassicLink(\\"|\')?\s*\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "4.14 Ensure a log metric filter and alarm exist for VPC changes - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.

Rationale:

Monitoring changes to VPC will help ensure VPC traffic flow is not getting impacted."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for VPC changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<vpc_changes_metric>'  --metric-transformations metricName= '<vpc_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.



Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<vpc_changes_alarm>'  --metric-name  '<vpc_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference   : "800-171|3.3.4,800-53|AU-5.,CCE|CCE-79199-6,CIS_Recommendation|4.14,CN-L3|7.1.3.3(e),CSCv6|5.5,CSCv7|5.5,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1A,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "DescribeAlarms"
# Note: Variable @VPC_METRIC_NAME@ replaced with "VPCChanges" in field "<xsl".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='VPCChanges'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @VPC_METRIC_NAME@ replaced with "VPCChanges" in field "expect".
  expect      : "Metric VPCChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @VPC_METRIC_NAME@ replaced with "VPCChanges" in field "<xsl".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='VPCChanges'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @VPC_METRIC_NAME@ replaced with "VPCChanges" in field "expect".
      expect      : "Metric VPCChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "4.14 Ensure a log metric filter and alarm exist for VPC changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.

Rationale:

Monitoring changes to VPC will help ensure VPC traffic flow is not getting impacted."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for VPC changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<vpc_changes_metric>'  --metric-transformations metricName= '<vpc_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.



Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<vpc_changes_alarm>'  --metric-name  '<vpc_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79199-6,CIS_Recommendation|4.14,CSCv6|6.5,CSCv6|6.7,CSCv7|5.5,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "4.14 Ensure a log metric filter and alarm exist for VPC changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.

Rationale:

Monitoring changes to VPC will help ensure VPC traffic flow is not getting impacted."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for VPC changes and the <cloudtrail_log_group_name> taken from audit step 1.

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<vpc_changes_metric>'  --metric-transformations metricName= '<vpc_changes_metric>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.



Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name  '<vpc_changes_alarm>'  --metric-name  '<vpc_changes_metric>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79199-6,CIS_Recommendation|4.14,CSCv6|6.5,CSCv6|6.7,CSCv7|5.5,CSCv8|8.11,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1A,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "4.15 Ensure a log metric filter and alarm exists for AWS Organizations changes - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.

Rationale:

Monitoring AWS Organizations changes can help you prevent any unwanted, accidental or intentional modifications that may lead to unauthorized access or other security breaches. This monitoring technique helps you to ensure that any unexpected changes performed within your AWS Organizations can be investigated and any unwanted changes can be rolled back."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for AWS Organizations changes and the <cloudtrail_log_group_name> taken from audit step 1:

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<organizations_changes>'  --metric-transformations metricName= '<organizations_changes>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = organizations.amazonaws.com) && (($.eventName = 'AcceptHandshake')  || ($.eventName = 'AttachPolicy')  || ($.eventName = 'CreateAccount') || ($.eventName = 'CreateOrganizationalUnit') || ($.eventName = 'CreatePolicy') || ($.eventName = 'DeclineHandshake') || ($.eventName = 'DeleteOrganization') || ($.eventName = 'DeleteOrganizationalUnit') || ($.eventName = 'DeletePolicy') ||  ($.eventName = 'DetachPolicy') || ($.eventName = 'DisablePolicyType') || ($.eventName = 'EnablePolicyType') || ($.eventName = 'InviteAccountToOrganization') || ($.eventName = 'LeaveOrganization') || ($.eventName = 'MoveAccount') || ($.eventName = 'RemoveAccountFromOrganization') || ($.eventName = 'UpdatePolicy') || ($.eventName = 'UpdateOrganizationalUnit')) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify:

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2:

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2:

aws cloudwatch put-metric-alarm --alarm-name  '<organizations_changes>'  --metric-name  '<organizations_changes>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12.,CIS_Recommendation|4.15,CSCv7|6.2,CSCv7|14.6,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1A,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
  see_also       : "https://workbench.cisecurity.org/files/3416"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\$\.eventSource\s*=\s*(\\"|\')?organizations.amazonaws.com(\\"|\')?\s*\)\s*&&\s*\(\(\$\.eventName\s*=\s*(\\"|\')?AcceptHandshake(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?AttachPolicy(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?CreateAccount(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?CreateOrganizationalUnit(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?CreatePolicy(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DeclineHandshake(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DeleteOrganization(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DeleteOrganizationalUnit(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DeletePolicy(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DetachPolicy(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?DisablePolicyType(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?EnablePolicyType(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?InviteAccountToOrganization(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?LeaveOrganization(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?MoveAccount(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?RemoveAccountFromOrganization(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?UpdatePolicy(\\"|\')?\s*\)\s*\|\|\s*\(\$\.eventName\s*=\s*(\\"|\')?UpdateOrganizationalUnit(\\"|\')?\s*\)\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "4.15 Ensure a log metric filter and alarm exists for AWS Organizations changes - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.

Rationale:

Monitoring AWS Organizations changes can help you prevent any unwanted, accidental or intentional modifications that may lead to unauthorized access or other security breaches. This monitoring technique helps you to ensure that any unexpected changes performed within your AWS Organizations can be investigated and any unwanted changes can be rolled back."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for AWS Organizations changes and the <cloudtrail_log_group_name> taken from audit step 1:

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<organizations_changes>'  --metric-transformations metricName= '<organizations_changes>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = organizations.amazonaws.com) && (($.eventName = 'AcceptHandshake')  || ($.eventName = 'AttachPolicy')  || ($.eventName = 'CreateAccount') || ($.eventName = 'CreateOrganizationalUnit') || ($.eventName = 'CreatePolicy') || ($.eventName = 'DeclineHandshake') || ($.eventName = 'DeleteOrganization') || ($.eventName = 'DeleteOrganizationalUnit') || ($.eventName = 'DeletePolicy') ||  ($.eventName = 'DetachPolicy') || ($.eventName = 'DisablePolicyType') || ($.eventName = 'EnablePolicyType') || ($.eventName = 'InviteAccountToOrganization') || ($.eventName = 'LeaveOrganization') || ($.eventName = 'MoveAccount') || ($.eventName = 'RemoveAccountFromOrganization') || ($.eventName = 'UpdatePolicy') || ($.eventName = 'UpdateOrganizationalUnit')) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify:

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2:

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2:

aws cloudwatch put-metric-alarm --alarm-name  '<organizations_changes>'  --metric-name  '<organizations_changes>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
  reference   : "800-171|3.3.4,800-53|AU-5.,CIS_Recommendation|4.15,CN-L3|7.1.3.3(e),CSCv7|6.2,CSCv7|14.6,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1A,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "DescribeAlarms"
# Note: Variable @ORG_METRIC_NAME@ replaced with "OrgChanges" in field "<xsl".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='OrgChanges'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @ORG_METRIC_NAME@ replaced with "OrgChanges" in field "expect".
  expect      : "Metric OrgChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @ORG_METRIC_NAME@ replaced with "OrgChanges" in field "<xsl".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='OrgChanges'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
# Note: Variable @ORG_METRIC_NAME@ replaced with "OrgChanges" in field "expect".
      expect      : "Metric OrgChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "4.15 Ensure a log metric filter and alarm exists for AWS Organizations changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.

Rationale:

Monitoring AWS Organizations changes can help you prevent any unwanted, accidental or intentional modifications that may lead to unauthorized access or other security breaches. This monitoring technique helps you to ensure that any unexpected changes performed within your AWS Organizations can be investigated and any unwanted changes can be rolled back."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for AWS Organizations changes and the <cloudtrail_log_group_name> taken from audit step 1:

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<organizations_changes>'  --metric-transformations metricName= '<organizations_changes>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = organizations.amazonaws.com) && (($.eventName = 'AcceptHandshake')  || ($.eventName = 'AttachPolicy')  || ($.eventName = 'CreateAccount') || ($.eventName = 'CreateOrganizationalUnit') || ($.eventName = 'CreatePolicy') || ($.eventName = 'DeclineHandshake') || ($.eventName = 'DeleteOrganization') || ($.eventName = 'DeleteOrganizationalUnit') || ($.eventName = 'DeletePolicy') ||  ($.eventName = 'DetachPolicy') || ($.eventName = 'DisablePolicyType') || ($.eventName = 'EnablePolicyType') || ($.eventName = 'InviteAccountToOrganization') || ($.eventName = 'LeaveOrganization') || ($.eventName = 'MoveAccount') || ($.eventName = 'RemoveAccountFromOrganization') || ($.eventName = 'UpdatePolicy') || ($.eventName = 'UpdateOrganizationalUnit')) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify:

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2:

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2:

aws cloudwatch put-metric-alarm --alarm-name  '<organizations_changes>'  --metric-name  '<organizations_changes>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-53|AU-5.,CIS_Recommendation|4.15,CSCv7|14.6,CSCv7|6.2,CSCv8|8.11,LEVEL|1A"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "4.15 Ensure a log metric filter and alarm exists for AWS Organizations changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.

Rationale:

Monitoring AWS Organizations changes can help you prevent any unwanted, accidental or intentional modifications that may lead to unauthorized access or other security breaches. This monitoring technique helps you to ensure that any unexpected changes performed within your AWS Organizations can be investigated and any unwanted changes can be rolled back."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

Create a metric filter based on filter pattern provided which checks for AWS Organizations changes and the <cloudtrail_log_group_name> taken from audit step 1:

aws logs put-metric-filter --log-group-name <cloudtrail_log_group_name> --filter-name  '<organizations_changes>'  --metric-transformations metricName= '<organizations_changes>' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = organizations.amazonaws.com) && (($.eventName = 'AcceptHandshake')  || ($.eventName = 'AttachPolicy')  || ($.eventName = 'CreateAccount') || ($.eventName = 'CreateOrganizationalUnit') || ($.eventName = 'CreatePolicy') || ($.eventName = 'DeclineHandshake') || ($.eventName = 'DeleteOrganization') || ($.eventName = 'DeleteOrganizationalUnit') || ($.eventName = 'DeletePolicy') ||  ($.eventName = 'DetachPolicy') || ($.eventName = 'DisablePolicyType') || ($.eventName = 'EnablePolicyType') || ($.eventName = 'InviteAccountToOrganization') || ($.eventName = 'LeaveOrganization') || ($.eventName = 'MoveAccount') || ($.eventName = 'RemoveAccountFromOrganization') || ($.eventName = 'UpdatePolicy') || ($.eventName = 'UpdateOrganizationalUnit')) }'

Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

Create an SNS topic that the alarm will notify:

aws sns create-topic --name <sns_topic_name>

Note: you can execute this command once and then re-use the same topic for all monitoring alarms.

Create an SNS subscription to the topic created in step 2:

aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --notification-endpoint <sns_subscription_endpoints>

Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2:

aws cloudwatch put-metric-alarm --alarm-name  '<organizations_changes>'  --metric-name  '<organizations_changes>'  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>"
      reference   : "800-53|AU-5.,CIS_Recommendation|4.15,CSCv7|14.6,CSCv7|6.2,CSCv8|8.11,LEVEL|1A"
      see_also    : "https://workbench.cisecurity.org/files/3416"
    </report>
  </else>
</if>

<custom_item>
  type        : EC2
  description : "5.1 Ensure no Network ACLs allow ingress from 0.0.0.0/0 to remote server administration ports"
  info        : "The Network Access Control List (NACL) function provide stateless filtering of ingress and egress network traffic to AWS resources. It is recommended that no NACL allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.

Rationale:

Public access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise."
  solution    : "From Console:
Perform the following:

Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home

In the left pane, click Network ACLs

For each network ACL to remediate, perform the following:

Select the network ACL

Click the Inbound Rules tab

Click Edit inbound rules

Either A) update the Source field to a range other than 0.0.0.0/0, or, B) Click Delete to remove the offending inbound rule

Click Save"
  reference   : "800-171|3.13.1,800-53|SC-7(12),800-53|SC-7(17),CIS_Recommendation|5.1,CN-L3|8.1.10.6(j),CSCv7|9.2,CSCv7|12.4,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),ITSG-33|SC-7(17),LEVEL|1A,NESA|T4.5.4,NIAv2|AM38,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,NIAv2|SS13d,NIAv2|SS26,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "DescribeNetworkAcls"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//ec2:networkAclSet/ec2:item/ec2:entrySet/ec2:item[ec2:ruleAction = 'allow' and ec2:egress = 'false']\">
      <xsl:text>Allow Ingress ACLs:&#10;</xsl:text>
      <xsl:for-each select=\"//ec2:networkAclSet/ec2:item\">
        <xsl:variable name=\"acl_id\" select=\"ec2:networkAclId\"/>
        <xsl:for-each select=\"ec2:entrySet/ec2:item\">
        <xsl:choose>
          <xsl:when test=\"ec2:ruleAction = 'allow' and ec2:egress = 'false'\">
            <xsl:text>ACL ID: </xsl:text>
            <xsl:value-of select=\"$acl_id\"/>
              <xsl:text> - Rule Number: </xsl:text>
              <xsl:value-of select=\"ec2:ruleNumber\"/>
              <xsl:text> - </xsl:text>
              <xsl:value-of select=\"ec2:ruleAction\"/>
              <xsl:text> </xsl:text>
              <xsl:value-of select=\"ec2:cidrBlock\"/>
              <xsl:text> to </xsl:text>
              <xsl:choose>
                <xsl:when test=\"ec2:portRange\">
                  <xsl:value-of select=\"ec2:portRange/ec2:from\"/>
                  <xsl:text>-</xsl:text>
                  <xsl:value-of select=\"ec2:portRange/ec2:to\"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>all ports</xsl:text>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:choose>
                <xsl:when test=\"ec2:protocol = '-1'\">
                  <xsl:text>/all protocols</xsl:text>
                </xsl:when>
                <xsl:when test=\"ec2:protocol = '6'\">
                  <xsl:text>/tcp</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select=\"ec2:protocol\"/>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:text>&#10;</xsl:text>
            </xsl:when>
          </xsl:choose>
        </xsl:for-each>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>No Allow Ingress ACLs</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : ".+"
  not_expect  : "allow 0\.0\.0\.0/0 to ((([0-9]|1[0-9]|2[0-2])-(2[2-9]|[3-9][0-9]|[1-9][0-9]{2,}+))|all ports|(([0-9]|[1-2][0-9]{0,3}|3[0-2][0-9]{2,}|33[0-8][0-9])-(3389|339[0-9]|3[4-9][0-9]{2,}|[1-9][0-9]{4,}+)))/(all protocols|tcp)"
</custom_item>

<custom_item>
  type        : EC2
  description : "5.2 Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports"
  info        : "Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.

Rationale:

Public access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.

Impact:

When updating an existing environment, ensure that administrators have access to remote server administration ports through another mechanism before removing access by deleting the 0.0.0.0/0 inbound rule."
  solution    : "Perform the following to implement the prescribed state:

Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home

In the left pane, click Security Groups

For each security group, perform the following:

Select the security group

Click the Inbound Rules tab

Click the Edit inbound rules button

Identify the rules to be edited or removed

Either A) update the Source field to a range other than 0.0.0.0/0, or, B) Click Delete to remove the offending inbound rule

Click Save rules"
  reference   : "800-171|3.13.1,800-53|SC-7(11),CIS_Recommendation|5.2,CN-L3|8.1.10.6(j),CSCv6|9.2,CSCv7|9.2,CSCv7|12.4,CSF|PR.AC-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(11),LEVEL|1A,NESA|T4.5.4,NIAv2|GS7c,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|31.3"
  see_also    : "https://workbench.cisecurity.org/files/3416"
  aws_action  : "DescribeSecurityGroups"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//ec2:securityGroupInfo/ec2:item\">
      <xsl:for-each select=\"//ec2:securityGroupInfo/ec2:item\">
        <xsl:variable name=\"group_name\" select=\"ec2:groupName\"/>
        <xsl:for-each select=\"ec2:ipPermissions/ec2:item\">
          <xsl:text>Security Group: </xsl:text>
          <xsl:value-of select=\"$group_name\" />
          <xsl:text> - allow </xsl:text>
          <xsl:value-of select=\"ec2:ipRanges/ec2:item/ec2:cidrIp\"/>
          <xsl:text> to </xsl:text>
          <xsl:choose>
            <xsl:when test=\"ec2:fromPort = '-1' and ec2:toPort = '-1' \">
              <xsl:text>all ports</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select=\"ec2:fromPort\"/>
              <xsl:text>-</xsl:text>
              <xsl:value-of select=\"ec2:toPort\"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>/</xsl:text>
          <xsl:choose>
            <xsl:when test=\"ec2:ipProtocol = '-1'\">
              <xsl:text>all protocols</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select=\"ec2:ipProtocol\"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>&#10;</xsl:text>
        </xsl:for-each>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>No security groups found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : ".+"
  not_expect  : "allow 0\.0\.0\.0/0 to ((([0-9]|1[0-9]|2[0-2])-(2[2-9]|[3-9][0-9]|[1-9][0-9]{2,}+))|all ports|(([0-9]|[1-2][0-9]{0,3}|3[0-2][0-9]{2,}|33[0-8][0-9])-(3389|339[0-9]|3[4-9][0-9]{2,}|[1-9][0-9]{4,}+)))/(all protocols|tcp)"
</custom_item>

</check_type>
